import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'

globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
globalThis.global = globalThis.global || __global_polyfill
globalThis.process = globalThis.process || __process_polyfill

import {
  require_dist as require_dist4
} from "./chunk-7NA6V5VI.js";
import "./chunk-BIURNFLG.js";
import "./chunk-DCM6H2ME.js";
import {
  ApiErrorCode,
  ApiModule,
  AuthErrorCode,
  BigNumber,
  CommonEvmUtils,
  Core,
  CoreConfig,
  CoreError,
  CoreErrorCode,
  CoreProvider,
  EndpointWeightsOperation,
  EvmAddress,
  EvmChain,
  EvmChainResolver,
  EvmNative,
  EvmSignature,
  EvmSimpleBlock,
  GetBlockStatsOperation,
  GetHottestNFTCollectionsByTradingVolumeOperation,
  GetMultipleTokenPricesOperation,
  GetNFTCollectionStatsOperation,
  GetNFTTokenStatsOperation,
  GetNFTTradesOperation,
  GetPairPriceOperation,
  GetTokenStatsOperation,
  GetTopCryptoCurrenciesByMarketCapOperation,
  GetTopCryptoCurrenciesByTradingVolumeOperation,
  GetTopERC20TokensByMarketCapOperation,
  GetTopERC20TokensByPriceMoversOperation,
  GetTopNFTCollectionsByMarketCapOperation,
  GetWalletActiveChainsOperation,
  GetWalletNetWorthOperation,
  GetWalletStatsOperation,
  GetWalletTokenBalancesPriceOperation,
  Module,
  MoralisApiError,
  MoralisAuthError,
  MoralisError,
  MoralisStreamError,
  NextPaginatedRequestResolver,
  OperationRequestValidator,
  PaginatedResponseAdapter,
  PaginationReader,
  RequestController,
  ResolveAddressToDomainOperation,
  ResponseAdapter,
  ReviewContractsOperation,
  StreamErrorCode,
  Web3ApiVersionOperation,
  getBlockOperation,
  getContractEventsOperation,
  getContractLogsOperation,
  getContractNFTsOperation,
  getDateToBlockOperation,
  getInternalTransactionsOperation,
  getMultipleNFTsOperation,
  getNFTContractMetadataOperation,
  getNFTContractTransfersOperation,
  getNFTLowestPriceOperation,
  getNFTMetadataOperation,
  getNFTOwnersOperation,
  getNFTTokenIdOwnersOperation,
  getNFTTransfersByBlockOperation,
  getNFTTransfersFromToBlockOperation,
  getNFTTransfersOperation,
  getNativeBalanceOperation,
  getNativeBalancesForAddressesOperation,
  getPairAddressOperation,
  getPairReservesOperation,
  getTokenAllowanceOperation,
  getTokenMetadataBySymbolOperation,
  getTokenMetadataOperation,
  getTokenPriceOperation,
  getTokenTransfersOperation,
  getTransactionOperation,
  getTransactionVerboseOperation,
  getWalletNFTCollectionsOperation,
  getWalletNFTTransfersOperation,
  getWalletNFTsOperation,
  getWalletTokenBalancesOperation,
  getWalletTokenTransfersOperation,
  getWalletTransactionsOperation,
  getWalletTransactionsVerboseOperation,
  isMoralisError,
  maybe,
  reSyncMetadataOperation,
  resolveAddressOperation,
  resolveDomainOperation,
  resolveENSDomainOperation,
  runContractFunctionOperation,
  syncNFTContractOperation,
  toCamelCase,
  uploadFolderOperation
} from "./chunk-7YN2C2OR.js";
import "./chunk-AG4X3SLA.js";
import "./chunk-6GFJ4YU5.js";
import "./chunk-MMCJUWWB.js";
import "./chunk-UXW6CEQH.js";
import "./chunk-EM6BAAUN.js";
import {
  require_bs58
} from "./chunk-CW55LPKJ.js";
import {
  Indexed,
  Interface,
  init_lib as init_lib3
} from "./chunk-JMTLALVE.js";
import {
  init_lib3 as init_lib2,
  init_lib6 as init_lib4,
  sha256,
  toUtf8Bytes
} from "./chunk-26QOIHDW.js";
import "./chunk-4H2UHIB4.js";
import "./chunk-A2JC7MJV.js";
import {
  BigNumber as BigNumber2,
  init_lib3 as init_lib
} from "./chunk-ZE5LSKC5.js";
import {
  require_bn
} from "./chunk-VTZKSTEZ.js";
import {
  Buffer$1,
  init_dist
} from "./chunk-GQ4K6W75.js";
import {
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-TXE7KCVI.js";
import {
  __toESM
} from "./chunk-FL3IE4PG.js";

// node_modules/moralis/lib/esm/index.js
var import_dist31 = __toESM(require_dist());
var import_dist32 = __toESM(require_dist2());
var import_dist33 = __toESM(require_dist3());

// node_modules/@moralisweb3/streams/lib/esm/index.js
var import_dist10 = __toESM(require_dist());
var import_dist11 = __toESM(require_dist2());
var import_dist12 = __toESM(require_dist3());

// node_modules/@moralisweb3/api-utils/lib/esm/index.js
var import_dist = __toESM(require_dist());
var import_dist2 = __toESM(require_dist2());
var import_dist3 = __toESM(require_dist3());
var ApiUtilsConfig = {
  apiKey: {
    name: "apiKey",
    defaultValue: null
  }
};
var _a;
var Environment;
(function(Environment2) {
  Environment2["BROWSER"] = "browser";
  Environment2["NODE"] = "node";
})(Environment || (Environment = {}));
var sdkNameForEnvironment = (_a = {}, _a[Environment.BROWSER] = "Javascript SDK", _a[Environment.NODE] = "NodeJS SDK", _a);
var currentEnvironment = getEnvironment();
function detectIsBrowser() {
  try {
    return typeof window !== "undefined" && typeof window.document !== "undefined";
  } catch (error) {
    return false;
  }
}
function getEnvironment() {
  if (detectIsBrowser()) {
    return Environment.BROWSER;
  }
  return Environment.NODE;
}
function getSdkName(environment, product) {
  if (product) {
    return product;
  }
  return sdkNameForEnvironment[environment];
}
var getSdkDetailsHeaders = function(product) {
  var sdkName = getSdkName(currentEnvironment, product);
  return {
    "x-moralis-platform": sdkName,
    "x-moralis-platform-version": Core.libVersion,
    "x-moralis-build-target": currentEnvironment
  };
};
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign5(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
var OperationRequestBuilder = (
  /** @class */
  function() {
    function OperationRequestBuilder2(operation, core2) {
      this.operation = operation;
      this.core = core2;
    }
    OperationRequestBuilder2.prototype.prepareUrl = function(baseUrl, request) {
      var _this = this;
      var _a2;
      var urlParams = this.operation.getRequestUrlParams(request, this.core);
      var urlPath = this.operation.urlPathPattern;
      for (var _i = 0, _b = (_a2 = this.operation.urlPathParamNames) !== null && _a2 !== void 0 ? _a2 : []; _i < _b.length; _i++) {
        var paramName = _b[_i];
        var paramValue = urlParams[paramName];
        if (paramValue === void 0 || paramValue === null) {
          throw new Error("Param ".concat(paramName, " is required"));
        }
        urlPath = urlPath.replace("{".concat(paramName, "}"), paramValue);
      }
      var url = "".concat(baseUrl).concat(urlPath);
      var urlSearchParams = {};
      Object.keys(urlParams).filter(function(paramName2) {
        var _a3;
        return !((_a3 = _this.operation.urlPathParamNames) === null || _a3 === void 0 ? void 0 : _a3.includes(paramName2));
      }).forEach(function(paramName2) {
        var paramValue2 = urlParams[paramName2];
        if (paramValue2 !== void 0 && paramValue2 !== null) {
          urlSearchParams[paramName2] = paramValue2;
        }
      });
      return { url, urlSearchParams };
    };
    OperationRequestBuilder2.prototype.prepareBody = function(request) {
      if (!this.operation.bodyType && !this.operation.getRequestBody) {
        return void 0;
      }
      if (!this.operation.getRequestBody) {
        throw new Error("getRequestBody is not implemented for operation ".concat(this.operation.name));
      }
      if (!this.operation.bodyParamNames) {
        throw new Error("bodyParamNames are empty for operation ".concat(this.operation.name));
      }
      var body = this.operation.getRequestBody(request, this.core);
      if (this.operation.bodyType === "properties") {
        return body;
      }
      if (this.operation.bodyType === "raw") {
        return body;
      }
      throw new Error("Not supported body type: ".concat(this.operation.bodyType));
    };
    OperationRequestBuilder2.prototype.prepareHeaders = function() {
      var apiKey = this.core.config.get(ApiUtilsConfig.apiKey);
      var product = this.core.config.get(CoreConfig.product);
      if (!apiKey) {
        throw new MoralisApiError({
          code: ApiErrorCode.API_KEY_NOT_SET,
          message: "apiKey is not set"
        });
      }
      var headers = getSdkDetailsHeaders(product);
      headers["x-api-key"] = apiKey;
      return headers;
    };
    return OperationRequestBuilder2;
  }()
);
var OperationResolver = (
  /** @class */
  /* @__PURE__ */ function() {
    function OperationResolver2(operation, baseUrl, core2) {
      var _this = this;
      this.operation = operation;
      this.baseUrl = baseUrl;
      this.core = core2;
      this.requestValidator = new OperationRequestValidator(this.operation);
      this.requestBuilder = new OperationRequestBuilder(this.operation, this.core);
      this.requestController = RequestController.create(this.core);
      this.fetch = function(request) {
        return __awaiter(_this, void 0, void 0, function() {
          var _a2, url, urlSearchParams, body, jsonResponse;
          var _this2 = this;
          return __generator(this, function(_b) {
            switch (_b.label) {
              case 0:
                this.requestValidator.validate(request);
                _a2 = this.requestBuilder.prepareUrl(this.baseUrl, request), url = _a2.url, urlSearchParams = _a2.urlSearchParams;
                body = this.requestBuilder.prepareBody(request);
                return [4, this.requestController.request({
                  method: this.operation.method,
                  url,
                  params: urlSearchParams,
                  headers: this.requestBuilder.prepareHeaders(),
                  data: body
                })];
              case 1:
                jsonResponse = _b.sent();
                return [2, new ResponseAdapter(jsonResponse, function() {
                  return _this2.operation.deserializeResponse(jsonResponse, request, _this2.core);
                })];
            }
          });
        });
      };
      if (operation.isNullable) {
        throw new Error("Operation ".concat(operation.name, " has invalid value for isNullable property"));
      }
    }
    return OperationResolver2;
  }()
);
function isNotFoundError(e) {
  var _a2;
  if (isMoralisError(e)) {
    if (((_a2 = e.details) === null || _a2 === void 0 ? void 0 : _a2.status) === 404) {
      return true;
    }
    if (e.code === ApiErrorCode.NOT_FOUND) {
      return true;
    }
  }
  return false;
}
var NullableOperationResolver = (
  /** @class */
  function() {
    function NullableOperationResolver2(operation, baseUrl, core2) {
      var _this = this;
      this.operation = operation;
      this.baseUrl = baseUrl;
      this.core = core2;
      this.requestValidator = new OperationRequestValidator(this.operation);
      this.requestBuilder = new OperationRequestBuilder(this.operation, this.core);
      this.requestController = RequestController.create(this.core);
      this.fetch = function(request) {
        return __awaiter(_this, void 0, void 0, function() {
          var result, e_1;
          return __generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                this.requestValidator.validate(request);
                _a2.label = 1;
              case 1:
                _a2.trys.push([1, 3, , 4]);
                return [4, this._fetch(request)];
              case 2:
                result = _a2.sent();
                if (!result.raw || typeof result.raw === "object" && Object.keys(result.raw).length === 0) {
                  throw new MoralisApiError({
                    code: ApiErrorCode.NOT_FOUND,
                    message: "The resource is not found"
                  });
                }
                return [2, result];
              case 3:
                e_1 = _a2.sent();
                if (isNotFoundError(e_1)) {
                  return [2, null];
                }
                throw e_1;
              case 4:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      if (!operation.isNullable) {
        throw new Error("Operation ".concat(operation.name, " has invalid value for isNullable property"));
      }
    }
    NullableOperationResolver2.prototype._fetch = function(request) {
      return __awaiter(this, void 0, void 0, function() {
        var _a2, url, urlSearchParams, body, jsonResponse;
        var _this = this;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _a2 = this.requestBuilder.prepareUrl(this.baseUrl, request), url = _a2.url, urlSearchParams = _a2.urlSearchParams;
              body = this.requestBuilder.prepareBody(request);
              return [4, this.requestController.request({
                method: this.operation.method,
                url,
                params: urlSearchParams,
                headers: this.requestBuilder.prepareHeaders(),
                data: body
              })];
            case 1:
              jsonResponse = _b.sent();
              return [2, new ResponseAdapter(jsonResponse, function() {
                return _this.operation.deserializeResponse(jsonResponse, request, _this.core);
              })];
          }
        });
      });
    };
    return NullableOperationResolver2;
  }()
);
var PaginatedOperationResolver = (
  /** @class */
  /* @__PURE__ */ function() {
    function PaginatedOperationResolver2(operation, baseUrl, core2) {
      var _this = this;
      this.operation = operation;
      this.baseUrl = baseUrl;
      this.core = core2;
      this.requestValidator = new OperationRequestValidator(this.operation);
      this.requestBuilder = new OperationRequestBuilder(this.operation, this.core);
      this.requestController = RequestController.create(this.core);
      this.fetch = function(request) {
        return __awaiter(_this, void 0, void 0, function() {
          var _a2, url, urlSearchParams, body, jsonResponse, pagination, nextRequest;
          var _this2 = this;
          return __generator(this, function(_b) {
            switch (_b.label) {
              case 0:
                this.requestValidator.validate(request);
                _a2 = this.requestBuilder.prepareUrl(this.baseUrl, request), url = _a2.url, urlSearchParams = _a2.urlSearchParams;
                body = this.requestBuilder.prepareBody(request);
                return [4, this.requestController.request({
                  method: this.operation.method,
                  url,
                  params: urlSearchParams,
                  headers: this.requestBuilder.prepareHeaders(),
                  data: body
                })];
              case 1:
                jsonResponse = _b.sent();
                pagination = PaginationReader.read(jsonResponse);
                nextRequest = NextPaginatedRequestResolver.resolve(this.operation.firstPageIndex, request, pagination);
                return [2, new PaginatedResponseAdapter(pagination, jsonResponse, function() {
                  return _this2.operation.deserializeResponse(jsonResponse, request, _this2.core);
                }, nextRequest ? function() {
                  return _this2.fetch(nextRequest);
                } : void 0)];
            }
          });
        });
      };
      if (operation.firstPageIndex !== 0 && operation.firstPageIndex !== 1) {
        throw new Error("Operation ".concat(operation.name, " has invalid value for firstPageIndex property"));
      }
    }
    return PaginatedOperationResolver2;
  }()
);
var OperationV3Resolver = (
  /** @class */
  function() {
    function OperationV3Resolver2(operation, baseUrl, core2) {
      this.operation = operation;
      this.baseUrl = baseUrl;
      this.core = core2;
      this.requestController = RequestController.create(this.core);
    }
    OperationV3Resolver2.prototype.request = function(request, body) {
      return __awaiter(this, void 0, void 0, function() {
        var urlParamNames, requestJSON, url, searchParams, bodyJSON, responseJson;
        var _this = this;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              urlParamNames = this.operation.parameterNames.filter(function(name) {
                return _this.operation.routePattern.includes("{".concat(name, "}"));
              });
              requestJSON = this.operation.serializeRequest ? this.operation.serializeRequest(request) : {};
              url = urlParamNames.reduce(function(current, name) {
                var value = requestJSON[name];
                current = current.replace("{".concat(name, "}"), String(value));
                return current;
              }, this.operation.routePattern);
              searchParams = this.operation.parameterNames.filter(function(name) {
                return !urlParamNames.includes(name);
              }).reduce(function(current, name) {
                current[name] = requestJSON[name];
                return current;
              }, {});
              bodyJSON = body && this.operation.serializeBody ? this.operation.serializeBody(body) : void 0;
              return [4, this.requestController.request({
                url,
                params: searchParams,
                baseURL: this.resolveBaseUrl(request),
                method: this.operation.httpMethod,
                data: bodyJSON,
                headers: this.prepareHeaders()
              })];
            case 1:
              responseJson = _a2.sent();
              if (!responseJson || !this.operation.parseResponse) {
                if (this.operation.hasResponse) {
                  throw new Error("Expected response, but API has returned empty response");
                }
                return [2, {
                  response: null,
                  responseJson: null
                }];
              }
              return [2, {
                response: this.operation.parseResponse(responseJson),
                responseJson
              }];
          }
        });
      });
    };
    OperationV3Resolver2.prototype.resolve = function(request, body) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, this.request(request, body)];
            case 1:
              return [2, _a2.sent().response];
          }
        });
      });
    };
    OperationV3Resolver2.prototype.fetch = function(request, body) {
      return __awaiter(this, void 0, void 0, function() {
        var data;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, this.request(request, body)];
            case 1:
              data = _a2.sent();
              return [2, new ResponseAdapter(data.responseJson, function() {
                return data.response;
              })];
          }
        });
      });
    };
    OperationV3Resolver2.prototype.resolveBaseUrl = function(request) {
      return typeof this.baseUrl === "string" ? this.baseUrl : this.baseUrl(request);
    };
    OperationV3Resolver2.prototype.prepareHeaders = function() {
      var apiKey = this.core.config.get(ApiUtilsConfig.apiKey);
      var product = this.core.config.get(CoreConfig.product);
      if (!apiKey) {
        throw new MoralisApiError({
          code: ApiErrorCode.API_KEY_NOT_SET,
          message: "apiKey is not set"
        });
      }
      var headers = getSdkDetailsHeaders();
      headers["x-api-key"] = "".concat(apiKey);
      headers["Authorization"] = "Bearer ".concat(apiKey);
      if (product) {
        headers["x-moralis-product"] = product;
      }
      return headers;
    };
    return OperationV3Resolver2;
  }()
);
var PaginatedResponseV3Adapter = (
  /** @class */
  function() {
    function PaginatedResponseV3Adapter2(response, json, nextHandler) {
      this.response = response;
      this.json = json;
      this.nextHandler = nextHandler;
    }
    Object.defineProperty(PaginatedResponseV3Adapter2.prototype, "result", {
      get: function() {
        if (!this.response.result) {
          throw new Error("No result");
        }
        return this.response.result;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(PaginatedResponseV3Adapter2.prototype, "pagination", {
      get: function() {
        return {
          total: this.response.total || 0,
          page: this.response.page || 0,
          pageSize: this.response.pageSize || 0,
          cursor: this.response.cursor
        };
      },
      enumerable: false,
      configurable: true
    });
    PaginatedResponseV3Adapter2.prototype.hasNext = function() {
      return !!this.nextHandler;
    };
    PaginatedResponseV3Adapter2.prototype.next = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a2) {
          if (!this.nextHandler) {
            throw new MoralisError({
              code: CoreErrorCode.NO_DATA_FOUND,
              message: "Page limit exceeded! Before call this method check an existence of the next page by .hasNext() method."
            });
          }
          return [2, this.nextHandler()];
        });
      });
    };
    PaginatedResponseV3Adapter2.prototype.raw = function() {
      return this.json;
    };
    PaginatedResponseV3Adapter2.prototype.toJSON = function() {
      return this.json;
    };
    return PaginatedResponseV3Adapter2;
  }()
);
var PaginatedOperationV3Resolver = (
  /** @class */
  function() {
    function PaginatedOperationV3Resolver2(operation, baseUrl, core2) {
      this.resolver = new OperationV3Resolver(operation, baseUrl, core2);
    }
    PaginatedOperationV3Resolver2.prototype.fetch = function(request, body) {
      return __awaiter(this, void 0, void 0, function() {
        var data, nextHandler;
        var _this = this;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, this.resolver.request(request, body)];
            case 1:
              data = _a2.sent();
              nextHandler = null;
              if (data.responseJson.cursor) {
                nextHandler = function() {
                  return __awaiter(_this, void 0, void 0, function() {
                    var nextRequest;
                    return __generator(this, function(_a3) {
                      nextRequest = __assign(__assign({}, request), { cursor: data.response.cursor });
                      return [2, this.fetch(nextRequest, body)];
                    });
                  });
                };
              }
              return [2, new PaginatedResponseV3Adapter(data.response, data.responseJson, nextHandler)];
          }
        });
      });
    };
    return PaginatedOperationV3Resolver2;
  }()
);
var ApiUtilsConfigSetup = (
  /** @class */
  function() {
    function ApiUtilsConfigSetup2() {
    }
    ApiUtilsConfigSetup2.register = function(config) {
      if (!config.hasKey(ApiUtilsConfig.apiKey)) {
        config.registerKey(ApiUtilsConfig.apiKey);
      }
    };
    return ApiUtilsConfigSetup2;
  }()
);
var ApiUtils = (
  /** @class */
  function(_super) {
    __extends(ApiUtils2, _super);
    function ApiUtils2(core2) {
      return _super.call(this, ApiUtils2.moduleName, core2) || this;
    }
    ApiUtils2.create = function(core2) {
      return new ApiUtils2(core2 !== null && core2 !== void 0 ? core2 : CoreProvider.getDefault());
    };
    ApiUtils2.prototype.setup = function() {
      ApiUtilsConfigSetup.register(this.core.config);
    };
    ApiUtils2.prototype.start = function() {
    };
    ApiUtils2.moduleName = "api";
    return ApiUtils2;
  }(Module)
);

// node_modules/@moralisweb3/common-streams-utils/lib/esm/index.js
var import_dist7 = __toESM(require_dist());
var import_dist8 = __toESM(require_dist2());
var import_dist9 = __toESM(require_dist3());

// node_modules/@moralisweb3/common-aptos-utils/lib/esm/index.js
var import_dist4 = __toESM(require_dist());
var import_dist5 = __toESM(require_dist2());
var import_dist6 = __toESM(require_dist3());
var CommonAptosUtilsConfig = {
  defaultAptosNetwork: {
    name: "defaultAptosNetwork",
    defaultValue: "mainnet"
  }
};
var CommonAptosUtilsConfigSetup = (
  /** @class */
  function() {
    function CommonAptosUtilsConfigSetup2() {
    }
    CommonAptosUtilsConfigSetup2.register = function(config) {
      config.registerKey(CommonAptosUtilsConfig.defaultAptosNetwork);
    };
    return CommonAptosUtilsConfigSetup2;
  }()
);
var isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!isLE)
  throw new Error("Non little-endian hardware is not supported");
var hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, "0"));
function bytesToHex(uint8a) {
  if (!(uint8a instanceof Uint8Array))
    throw new Error("Uint8Array expected");
  let hex = "";
  for (let i = 0; i < uint8a.length; i++) {
    hex += hexes[uint8a[i]];
  }
  return hex;
}
function hexToBytes(hex) {
  if (typeof hex !== "string") {
    throw new TypeError("hexToBytes: expected string, got " + typeof hex);
  }
  if (hex.length % 2)
    throw new Error("hexToBytes: received invalid unpadded hex");
  const array = new Uint8Array(hex.length / 2);
  for (let i = 0; i < array.length; i++) {
    const j = i * 2;
    const hexByte = hex.slice(j, j + 2);
    const byte = Number.parseInt(hexByte, 16);
    if (Number.isNaN(byte) || byte < 0)
      throw new Error("Invalid byte sequence");
    array[i] = byte;
  }
  return array;
}
var HexString = (
  /** @class */
  function() {
    function HexString2(hexString) {
      if (hexString.startsWith("0x")) {
        this.hexString = hexString;
      } else {
        this.hexString = "0x".concat(hexString);
      }
    }
    HexString2.fromBuffer = function(buffer) {
      return HexString2.fromUint8Array(buffer);
    };
    HexString2.fromUint8Array = function(arr) {
      return new HexString2(bytesToHex(arr));
    };
    HexString2.ensure = function(hexString) {
      if (typeof hexString === "string") {
        return new HexString2(hexString);
      }
      return hexString;
    };
    HexString2.prototype.hex = function() {
      return this.hexString;
    };
    HexString2.prototype.noPrefix = function() {
      return this.hexString.slice(2);
    };
    HexString2.prototype.toString = function() {
      return this.hex();
    };
    HexString2.prototype.toShortString = function() {
      var trimmed = this.hexString.replace(/^0x0*/, "");
      return "0x".concat(trimmed);
    };
    HexString2.prototype.toUint8Array = function() {
      return Uint8Array.from(hexToBytes(this.noPrefix()));
    };
    return HexString2;
  }()
);
var AccountAddress = (
  /** @class */
  function() {
    function AccountAddress2(address) {
      if (address.length !== AccountAddress2.LENGTH) {
        throw new Error("Expected address of length 32");
      }
      this.address = address;
    }
    AccountAddress2.fromHex = function(addr) {
      var address = HexString.ensure(addr);
      if (address.noPrefix().length % 2 !== 0) {
        address = new HexString("0".concat(address.noPrefix()));
      }
      var addressBytes = address.toUint8Array();
      if (addressBytes.length > AccountAddress2.LENGTH) {
        throw new Error("Hex string is too long. Address's length is 32 bytes.");
      } else if (addressBytes.length === AccountAddress2.LENGTH) {
        return new AccountAddress2(addressBytes);
      }
      var res = new Uint8Array(AccountAddress2.LENGTH);
      res.set(addressBytes, AccountAddress2.LENGTH - addressBytes.length);
      return new AccountAddress2(res);
    };
    AccountAddress2.isValid = function(addr) {
      if (addr === "") {
        return false;
      }
      var address = HexString.ensure(addr);
      if (address.noPrefix().length % 2 !== 0) {
        address = new HexString("0".concat(address.noPrefix()));
      }
      var addressBytes = address.toUint8Array();
      return addressBytes.length <= AccountAddress2.LENGTH;
    };
    AccountAddress2.LENGTH = 32;
    AccountAddress2.CORE_CODE_ADDRESS = AccountAddress2.fromHex("0x1");
    return AccountAddress2;
  }()
);
var AptosAddress = (
  /** @class */
  function() {
    function AptosAddress2(address) {
      this.address = address;
    }
    AptosAddress2.create = function(address) {
      if (address instanceof AptosAddress2) {
        return address;
      }
      return new AptosAddress2(AptosAddress2.parse(address));
    };
    AptosAddress2.fromJSON = function(json) {
      return AptosAddress2.create(json);
    };
    AptosAddress2.parse = function(address) {
      try {
        if (!AccountAddress.isValid(address)) {
          throw new Error("Address is invalid");
        }
      } catch (e) {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Invalid address provided: ".concat(address),
          cause: e
        });
      }
      if (address.startsWith("0x")) {
        address = address.substring(2);
      }
      var addr = address.padStart(64, "0");
      return "0x".concat(addr);
    };
    AptosAddress2.prototype.format = function() {
      return this.address;
    };
    AptosAddress2.equals = function(addressA, addressB) {
      return AptosAddress2.create(addressA).equals(addressB);
    };
    AptosAddress2.prototype.equals = function(address) {
      return this.address === AptosAddress2.create(address).address;
    };
    AptosAddress2.prototype.toString = function() {
      return this.address;
    };
    AptosAddress2.prototype.toJSON = function() {
      return this.address;
    };
    Object.defineProperty(AptosAddress2.prototype, "short", {
      /**
       * @returns a string representing the address, the leading zeros are removed from the address.
       * @example address.short; // "0x1"
       */
      get: function() {
        var address = this.address.substring(2).replace(/^0+/, "");
        return "0x".concat(address);
      },
      enumerable: false,
      configurable: true
    });
    return AptosAddress2;
  }()
);
var aptosNetworkNames = ["mainnet", "testnet", "devnet"];
var aptosChainIdToNetworkNames = {
  "1": "mainnet",
  "2": "testnet"
};
var AptosNetwork = (
  /** @class */
  function() {
    function AptosNetwork2(network) {
      this.network = network;
    }
    Object.defineProperty(AptosNetwork2, "MAINNET", {
      /**
       * Returns MAINNET network
       *
       * @example AptosNetwork.MAINNET
       */
      get: function() {
        return AptosNetwork2.create("mainnet");
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosNetwork2, "TESTNET", {
      /**
       * Returns TESTNET network
       *
       * @example AptosNetwork.MAINNET
       */
      get: function() {
        return AptosNetwork2.create("testnet");
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosNetwork2, "DEVNET", {
      /**
       * Returns DEVNET network
       *
       * @example AptosNetwork.MAINNET
       */
      get: function() {
        return AptosNetwork2.create("devnet");
      },
      enumerable: false,
      configurable: true
    });
    AptosNetwork2.create = function(network) {
      return network instanceof AptosNetwork2 ? network : new AptosNetwork2(AptosNetwork2.parse(network));
    };
    AptosNetwork2.parse = function(network) {
      var _a2;
      if (typeof network !== "string") {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Aptos network is not supported: ".concat(network)
        });
      }
      var networkName = (_a2 = aptosChainIdToNetworkNames[network]) !== null && _a2 !== void 0 ? _a2 : network;
      if (!aptosNetworkNames.includes(networkName)) {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Aptos network is not supported: ".concat(network)
        });
      }
      return networkName;
    };
    AptosNetwork2.prototype.format = function() {
      return this.network;
    };
    AptosNetwork2.prototype.equals = function(network) {
      return this.network === AptosNetwork2.create(network).network;
    };
    AptosNetwork2.prototype.toJSON = function() {
      return this.network;
    };
    AptosNetwork2.prototype.toString = function() {
      return this.network;
    };
    return AptosNetwork2;
  }()
);
var unitToDecimals = {
  aptos: 8,
  octas: 0
};
var AptosNative = (
  /** @class */
  function() {
    function AptosNative2(rawValue) {
      this.rawValue = rawValue;
    }
    AptosNative2.create = function(value, unit) {
      if (value instanceof AptosNative2) {
        return value;
      }
      return new AptosNative2(AptosNative2.parse(value, unit));
    };
    AptosNative2.fromJSON = function(json) {
      return AptosNative2.create(json, "octas");
    };
    AptosNative2.parse = function(value, unit) {
      if (unit === void 0) {
        unit = "aptos";
      }
      var decimal;
      if (typeof unit === "number") {
        decimal = unit;
      } else if (unitToDecimals[unit] !== void 0) {
        decimal = unitToDecimals[unit];
      } else {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Not supported Aptos unit: ".concat(unit)
        });
      }
      return BigNumber.fromDecimal(value.toString(), decimal);
    };
    AptosNative2.equals = function(valueA, valueB) {
      var aptosNativeA = AptosNative2.create(valueA);
      var aptosNativeB = AptosNative2.create(valueB);
      return aptosNativeA.octas === aptosNativeB.octas;
    };
    AptosNative2.prototype.equals = function(value) {
      return AptosNative2.equals(this, value);
    };
    AptosNative2.prototype.format = function() {
      return this.octas;
    };
    AptosNative2.prototype.toJSON = function() {
      return this.octas;
    };
    AptosNative2.prototype.toString = function() {
      return this.octas;
    };
    Object.defineProperty(AptosNative2.prototype, "value", {
      /**
       * @returns the value of the AptosNative as a BigNumber
       * @example `native.value`
       */
      get: function() {
        return this.rawValue;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosNative2.prototype, "aptos", {
      /**
       * Converts the AptosNative to an aptos unit.
       * @returns the value of the AptosNative as an aptos string
       * @example `native.aptos`
       */
      get: function() {
        return this.rawValue.toDecimal(unitToDecimals["aptos"]);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosNative2.prototype, "octas", {
      /**
       * Converts the AptosNative to a string.
       * @returns the value of the AptosNative as a string
       * @example `native.lamports`
       */
      get: function() {
        return this.rawValue.toString();
      },
      enumerable: false,
      configurable: true
    });
    return AptosNative2;
  }()
);
var AptosNetworkResolver = (
  /** @class */
  function() {
    function AptosNetworkResolver2() {
    }
    AptosNetworkResolver2.resolve = function(network, core2) {
      if (!network) {
        network = core2.config.get(CommonAptosUtilsConfig.defaultAptosNetwork);
      }
      return AptosNetwork.create(network).network;
    };
    return AptosNetworkResolver2;
  }()
);
var extendStatics2 = function(d, b) {
  extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics2(d, b);
};
function __extends2(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics2(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var CommonAptosUtils = (
  /** @class */
  function(_super) {
    __extends2(CommonAptosUtils2, _super);
    function CommonAptosUtils2(core2) {
      return _super.call(this, CommonAptosUtils2.moduleName, core2) || this;
    }
    CommonAptosUtils2.create = function(core2) {
      return new CommonAptosUtils2(core2 !== null && core2 !== void 0 ? core2 : CoreProvider.getDefault());
    };
    CommonAptosUtils2.prototype.setup = function() {
      CommonAptosUtilsConfigSetup.register(this.core.config);
    };
    CommonAptosUtils2.prototype.start = function() {
    };
    Object.defineProperty(CommonAptosUtils2.prototype, "AptosAddress", {
      get: function() {
        return AptosAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(CommonAptosUtils2.prototype, "AptosNative", {
      get: function() {
        return AptosNative;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(CommonAptosUtils2.prototype, "AptosNetwork", {
      get: function() {
        return AptosNetwork;
      },
      enumerable: false,
      configurable: true
    });
    CommonAptosUtils2.moduleName = "aptosUtils";
    return CommonAptosUtils2;
  }(Module)
);
var AptosNFTTokenResponseDefaultProperties = (
  /** @class */
  function() {
    function AptosNFTTokenResponseDefaultProperties2() {
    }
    AptosNFTTokenResponseDefaultProperties2.create = function(input) {
      return input;
    };
    AptosNFTTokenResponseDefaultProperties2.fromJSON = function(json) {
      return json;
    };
    return AptosNFTTokenResponseDefaultProperties2;
  }()
);
var AptosNFTTokenResponse = (
  /** @class */
  function() {
    function AptosNFTTokenResponse2(input) {
      this.collectionDataIdHash = input.collectionDataIdHash;
      this.collectionName = input.collectionName;
      this.creatorAddress = AptosAddress.create(input.creatorAddress);
      this.defaultProperties = AptosNFTTokenResponseDefaultProperties.create(input.defaultProperties);
      this.description = input.description;
      this.descriptionMutable = input.descriptionMutable;
      this.largestPropertyVersion = input.largestPropertyVersion;
      this.lastTransactionTimestamp = input.lastTransactionTimestamp;
      this.lastTransactionVersion = input.lastTransactionVersion;
      this.maximum = input.maximum;
      this.maximumMutable = input.maximumMutable;
      this.metadataUri = input.metadataUri;
      this.name = input.name;
      this.payeeAddress = AptosAddress.create(input.payeeAddress);
      this.propertiesMutable = input.propertiesMutable;
      this.royaltyMutable = input.royaltyMutable;
      this.royaltyPointsDenominator = input.royaltyPointsDenominator;
      this.royaltyPointsNumerator = input.royaltyPointsNumerator;
      this.supply = input.supply;
      this.tokenDataIdHash = input.tokenDataIdHash;
      this.uriMutable = input.uriMutable;
    }
    AptosNFTTokenResponse2.create = function(input) {
      if (input instanceof AptosNFTTokenResponse2) {
        return input;
      }
      return new AptosNFTTokenResponse2(input);
    };
    AptosNFTTokenResponse2.fromJSON = function(json) {
      var input = {
        collectionDataIdHash: json.collection_data_id_hash,
        collectionName: json.collection_name,
        creatorAddress: AptosAddress.fromJSON(json.creator_address),
        defaultProperties: AptosNFTTokenResponseDefaultProperties.fromJSON(json.default_properties),
        description: json.description,
        descriptionMutable: json.description_mutable,
        largestPropertyVersion: json.largest_property_version,
        lastTransactionTimestamp: json.last_transaction_timestamp,
        lastTransactionVersion: json.last_transaction_version,
        maximum: json.maximum,
        maximumMutable: json.maximum_mutable,
        metadataUri: json.metadata_uri,
        name: json.name,
        payeeAddress: AptosAddress.fromJSON(json.payee_address),
        propertiesMutable: json.properties_mutable,
        royaltyMutable: json.royalty_mutable,
        royaltyPointsDenominator: json.royalty_points_denominator,
        royaltyPointsNumerator: json.royalty_points_numerator,
        supply: json.supply,
        tokenDataIdHash: json.token_data_id_hash,
        uriMutable: json.uri_mutable
      };
      return AptosNFTTokenResponse2.create(input);
    };
    AptosNFTTokenResponse2.prototype.toJSON = function() {
      return {
        collection_data_id_hash: this.collectionDataIdHash,
        collection_name: this.collectionName,
        creator_address: this.creatorAddress.toJSON(),
        default_properties: this.defaultProperties,
        description: this.description,
        description_mutable: this.descriptionMutable,
        largest_property_version: this.largestPropertyVersion,
        last_transaction_timestamp: this.lastTransactionTimestamp,
        last_transaction_version: this.lastTransactionVersion,
        maximum: this.maximum,
        maximum_mutable: this.maximumMutable,
        metadata_uri: this.metadataUri,
        name: this.name,
        payee_address: this.payeeAddress.toJSON(),
        properties_mutable: this.propertiesMutable,
        royalty_mutable: this.royaltyMutable,
        royalty_points_denominator: this.royaltyPointsDenominator,
        royalty_points_numerator: this.royaltyPointsNumerator,
        supply: this.supply,
        token_data_id_hash: this.tokenDataIdHash,
        uri_mutable: this.uriMutable
      };
    };
    return AptosNFTTokenResponse2;
  }()
);
var GetNFTsByIdsOperation = {
  operationId: "getNFTsByIds",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts",
  parameterNames: ["token_ids", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return AptosNFTTokenResponse.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var tokenIds = request.tokenIds;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      token_ids: tokenIds,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTTokensByCollectionResponse = (
  /** @class */
  function() {
    function AptosNFTTokensByCollectionResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTTokenResponse.create(item);
      });
    }
    AptosNFTTokensByCollectionResponse2.create = function(input) {
      if (input instanceof AptosNFTTokensByCollectionResponse2) {
        return input;
      }
      return new AptosNFTTokensByCollectionResponse2(input);
    };
    AptosNFTTokensByCollectionResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTTokenResponse.fromJSON(item);
        })
      };
      return AptosNFTTokensByCollectionResponse2.create(input);
    };
    AptosNFTTokensByCollectionResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosNFTTokensByCollectionResponse2;
  }()
);
var GetNFTsByCollectionOperation = {
  operationId: "getNFTsByCollection",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts/collections/{collection_data_id_hash}/tokens",
  parameterNames: ["collection_data_id_hash", "limit", "offset", "cursor", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTTokensByCollectionResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var collectionDataIdHash = request.collectionDataIdHash;
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      collection_data_id_hash: collectionDataIdHash,
      limit,
      offset,
      cursor,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTTokensByCreatorsResponse = (
  /** @class */
  function() {
    function AptosNFTTokensByCreatorsResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTTokenResponse.create(item);
      });
    }
    AptosNFTTokensByCreatorsResponse2.create = function(input) {
      if (input instanceof AptosNFTTokensByCreatorsResponse2) {
        return input;
      }
      return new AptosNFTTokensByCreatorsResponse2(input);
    };
    AptosNFTTokensByCreatorsResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTTokenResponse.fromJSON(item);
        })
      };
      return AptosNFTTokensByCreatorsResponse2.create(input);
    };
    AptosNFTTokensByCreatorsResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosNFTTokensByCreatorsResponse2;
  }()
);
var GetNFTsByCreatorsOperation = {
  operationId: "getNFTsByCreators",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts/creators",
  parameterNames: ["limit", "offset", "cursor", "creator_addresses", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTTokensByCreatorsResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var creatorAddresses = request.creatorAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      creator_addresses: creatorAddresses.map(function(item) {
        return item.toJSON();
      }),
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTCollectionItemResponse = (
  /** @class */
  function() {
    function AptosNFTCollectionItemResponse2(input) {
      this.collectionDataIdHash = input.collectionDataIdHash;
      this.collectionName = input.collectionName;
      this.creatorAddress = AptosAddress.create(input.creatorAddress);
      this.description = input.description;
      this.descriptionMutable = input.descriptionMutable;
      this.lastTransactionTimestamp = input.lastTransactionTimestamp;
      this.lastTransactionVersion = input.lastTransactionVersion;
      this.maximum = input.maximum;
      this.maximumMutable = input.maximumMutable;
      this.metadataUri = input.metadataUri;
      this.supply = input.supply;
      this.tableHandle = input.tableHandle;
      this.uriMutable = input.uriMutable;
    }
    AptosNFTCollectionItemResponse2.create = function(input) {
      if (input instanceof AptosNFTCollectionItemResponse2) {
        return input;
      }
      return new AptosNFTCollectionItemResponse2(input);
    };
    AptosNFTCollectionItemResponse2.fromJSON = function(json) {
      var input = {
        collectionDataIdHash: json.collection_data_id_hash,
        collectionName: json.collection_name,
        creatorAddress: AptosAddress.fromJSON(json.creator_address),
        description: json.description,
        descriptionMutable: json.description_mutable,
        lastTransactionTimestamp: json.last_transaction_timestamp,
        lastTransactionVersion: json.last_transaction_version,
        maximum: json.maximum,
        maximumMutable: json.maximum_mutable,
        metadataUri: json.metadata_uri,
        supply: json.supply,
        tableHandle: json.table_handle,
        uriMutable: json.uri_mutable
      };
      return AptosNFTCollectionItemResponse2.create(input);
    };
    AptosNFTCollectionItemResponse2.prototype.toJSON = function() {
      return {
        collection_data_id_hash: this.collectionDataIdHash,
        collection_name: this.collectionName,
        creator_address: this.creatorAddress.toJSON(),
        description: this.description,
        description_mutable: this.descriptionMutable,
        last_transaction_timestamp: this.lastTransactionTimestamp,
        last_transaction_version: this.lastTransactionVersion,
        maximum: this.maximum,
        maximum_mutable: this.maximumMutable,
        metadata_uri: this.metadataUri,
        supply: this.supply,
        table_handle: this.tableHandle,
        uri_mutable: this.uriMutable
      };
    };
    return AptosNFTCollectionItemResponse2;
  }()
);
var AptosNFTCollectionsByNameRangeResponse = (
  /** @class */
  function() {
    function AptosNFTCollectionsByNameRangeResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTCollectionItemResponse.create(item);
      });
    }
    AptosNFTCollectionsByNameRangeResponse2.create = function(input) {
      if (input instanceof AptosNFTCollectionsByNameRangeResponse2) {
        return input;
      }
      return new AptosNFTCollectionsByNameRangeResponse2(input);
    };
    AptosNFTCollectionsByNameRangeResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTCollectionItemResponse.fromJSON(item);
        })
      };
      return AptosNFTCollectionsByNameRangeResponse2.create(input);
    };
    AptosNFTCollectionsByNameRangeResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosNFTCollectionsByNameRangeResponse2;
  }()
);
var GetNFTCollectionsOperation = {
  operationId: "getNFTCollections",
  groupName: "collections",
  httpMethod: "get",
  routePattern: "/collections",
  parameterNames: ["limit", "offset", "cursor", "fromName", "toName", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTCollectionsByNameRangeResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var fromName = request.fromName;
    var toName = request.toName;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      fromName,
      toName,
      network: network ? network.toJSON() : void 0
    };
  }
};
var GetNFTCollectionsByIdsOperation = {
  operationId: "getNFTCollectionsByIds",
  groupName: "collections",
  httpMethod: "get",
  routePattern: "/collections/ids",
  parameterNames: ["ids", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return AptosNFTCollectionItemResponse.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var ids = request.ids;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      ids,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTCollectionsByCreatorResponse = (
  /** @class */
  function() {
    function AptosNFTCollectionsByCreatorResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTCollectionItemResponse.create(item);
      });
    }
    AptosNFTCollectionsByCreatorResponse2.create = function(input) {
      if (input instanceof AptosNFTCollectionsByCreatorResponse2) {
        return input;
      }
      return new AptosNFTCollectionsByCreatorResponse2(input);
    };
    AptosNFTCollectionsByCreatorResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTCollectionItemResponse.fromJSON(item);
        })
      };
      return AptosNFTCollectionsByCreatorResponse2.create(input);
    };
    AptosNFTCollectionsByCreatorResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosNFTCollectionsByCreatorResponse2;
  }()
);
var GetNFTCollectionsByCreatorOperation = {
  operationId: "getNFTCollectionsByCreator",
  groupName: "collections",
  httpMethod: "get",
  routePattern: "/collections/creators",
  parameterNames: ["limit", "offset", "cursor", "creator_address", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTCollectionsByCreatorResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var creatorAddress = AptosAddress.create(request.creatorAddress);
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      creator_address: creatorAddress.toJSON(),
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTOwnerResponseTokenProperties = (
  /** @class */
  function() {
    function AptosNFTOwnerResponseTokenProperties2() {
    }
    AptosNFTOwnerResponseTokenProperties2.create = function(input) {
      return input;
    };
    AptosNFTOwnerResponseTokenProperties2.fromJSON = function(json) {
      return json;
    };
    return AptosNFTOwnerResponseTokenProperties2;
  }()
);
var AptosNFTOwnerResponse = (
  /** @class */
  function() {
    function AptosNFTOwnerResponse2(input) {
      this.amount = AptosNative.create(input.amount);
      this.collectionDataIdHash = input.collectionDataIdHash;
      this.collectionName = input.collectionName;
      this.creatorAddress = AptosAddress.create(input.creatorAddress);
      this.lastTransactionTimestamp = input.lastTransactionTimestamp;
      this.lastTransactionVersion = input.lastTransactionVersion;
      this.name = input.name;
      this.ownerAddress = AptosAddress.create(input.ownerAddress);
      this.propertyVersion = input.propertyVersion;
      this.tableType = input.tableType;
      this.tokenDataIdHash = input.tokenDataIdHash;
      this.tokenProperties = AptosNFTOwnerResponseTokenProperties.create(input.tokenProperties);
    }
    AptosNFTOwnerResponse2.create = function(input) {
      if (input instanceof AptosNFTOwnerResponse2) {
        return input;
      }
      return new AptosNFTOwnerResponse2(input);
    };
    AptosNFTOwnerResponse2.fromJSON = function(json) {
      var input = {
        amount: AptosNative.fromJSON(json.amount),
        collectionDataIdHash: json.collection_data_id_hash,
        collectionName: json.collection_name,
        creatorAddress: AptosAddress.fromJSON(json.creator_address),
        lastTransactionTimestamp: json.last_transaction_timestamp,
        lastTransactionVersion: json.last_transaction_version,
        name: json.name,
        ownerAddress: AptosAddress.fromJSON(json.owner_address),
        propertyVersion: json.property_version,
        tableType: json.table_type,
        tokenDataIdHash: json.token_data_id_hash,
        tokenProperties: AptosNFTOwnerResponseTokenProperties.fromJSON(json.token_properties)
      };
      return AptosNFTOwnerResponse2.create(input);
    };
    AptosNFTOwnerResponse2.prototype.toJSON = function() {
      return {
        amount: this.amount.toJSON(),
        collection_data_id_hash: this.collectionDataIdHash,
        collection_name: this.collectionName,
        creator_address: this.creatorAddress.toJSON(),
        last_transaction_timestamp: this.lastTransactionTimestamp,
        last_transaction_version: this.lastTransactionVersion,
        name: this.name,
        owner_address: this.ownerAddress.toJSON(),
        property_version: this.propertyVersion,
        table_type: this.tableType,
        token_data_id_hash: this.tokenDataIdHash,
        token_properties: this.tokenProperties
      };
    };
    return AptosNFTOwnerResponse2;
  }()
);
var AptosNFTOwnersByTokensResponse = (
  /** @class */
  function() {
    function AptosNFTOwnersByTokensResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTOwnerResponse.create(item);
      });
    }
    AptosNFTOwnersByTokensResponse2.create = function(input) {
      if (input instanceof AptosNFTOwnersByTokensResponse2) {
        return input;
      }
      return new AptosNFTOwnersByTokensResponse2(input);
    };
    AptosNFTOwnersByTokensResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTOwnerResponse.fromJSON(item);
        })
      };
      return AptosNFTOwnersByTokensResponse2.create(input);
    };
    AptosNFTOwnersByTokensResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosNFTOwnersByTokensResponse2;
  }()
);
var GetNFTOwnersByTokensOperation = {
  operationId: "getNFTOwnersByTokens",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts/owners",
  parameterNames: ["limit", "offset", "cursor", "token_ids", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTOwnersByTokensResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var tokenIds = request.tokenIds;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      token_ids: tokenIds,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTOwnersByCollectionResponse = (
  /** @class */
  function() {
    function AptosNFTOwnersByCollectionResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTOwnerResponse.create(item);
      });
    }
    AptosNFTOwnersByCollectionResponse2.create = function(input) {
      if (input instanceof AptosNFTOwnersByCollectionResponse2) {
        return input;
      }
      return new AptosNFTOwnersByCollectionResponse2(input);
    };
    AptosNFTOwnersByCollectionResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTOwnerResponse.fromJSON(item);
        })
      };
      return AptosNFTOwnersByCollectionResponse2.create(input);
    };
    AptosNFTOwnersByCollectionResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosNFTOwnersByCollectionResponse2;
  }()
);
var GetNFTOwnersByCollectionOperation = {
  operationId: "getNFTOwnersByCollection",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts/collections/{collection_data_id_hash}/owners",
  parameterNames: ["collection_data_id_hash", "limit", "offset", "cursor", "wallet_blacklist", "wallet_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTOwnersByCollectionResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var collectionDataIdHash = request.collectionDataIdHash;
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var walletBlacklist = request.walletBlacklist;
    var walletWhitelist = request.walletWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      collection_data_id_hash: collectionDataIdHash,
      limit,
      offset,
      cursor,
      wallet_blacklist: walletBlacklist,
      wallet_whitelist: walletWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTOwnersOfCollectionResponse = (
  /** @class */
  function() {
    function AptosNFTOwnersOfCollectionResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result;
    }
    AptosNFTOwnersOfCollectionResponse2.create = function(input) {
      if (input instanceof AptosNFTOwnersOfCollectionResponse2) {
        return input;
      }
      return new AptosNFTOwnersOfCollectionResponse2(input);
    };
    AptosNFTOwnersOfCollectionResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result
      };
      return AptosNFTOwnersOfCollectionResponse2.create(input);
    };
    AptosNFTOwnersOfCollectionResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result
      };
    };
    return AptosNFTOwnersOfCollectionResponse2;
  }()
);
var GetNFTOwnersOfCollectionOperation = {
  operationId: "getNFTOwnersOfCollection",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts/collections/{collection_data_id_hash}/owners/list",
  parameterNames: ["collection_data_id_hash", "limit", "offset", "cursor", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTOwnersOfCollectionResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var collectionDataIdHash = request.collectionDataIdHash;
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      collection_data_id_hash: collectionDataIdHash,
      limit,
      offset,
      cursor,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTTransferResponse = (
  /** @class */
  function() {
    function AptosNFTTransferResponse2(input) {
      this.coinAmount = input.coinAmount ? AptosNative.create(input.coinAmount) : void 0;
      this.coinType = input.coinType;
      this.collectionDataIdHash = input.collectionDataIdHash;
      this.collectionName = input.collectionName;
      this.creatorAddress = AptosAddress.create(input.creatorAddress);
      this.eventAccountAddress = input.eventAccountAddress;
      this.eventCreationNumber = input.eventCreationNumber;
      this.eventSequenceNumber = input.eventSequenceNumber;
      this.fromAddress = input.fromAddress ? AptosAddress.create(input.fromAddress) : void 0;
      this.name = input.name;
      this.propertyVersion = input.propertyVersion;
      this.toAddress = input.toAddress ? AptosAddress.create(input.toAddress) : void 0;
      this.tokenAmount = AptosNative.create(input.tokenAmount);
      this.tokenDataIdHash = input.tokenDataIdHash;
      this.transactionTimestamp = input.transactionTimestamp;
      this.transactionVersion = input.transactionVersion;
      this.transferType = input.transferType;
    }
    AptosNFTTransferResponse2.create = function(input) {
      if (input instanceof AptosNFTTransferResponse2) {
        return input;
      }
      return new AptosNFTTransferResponse2(input);
    };
    AptosNFTTransferResponse2.fromJSON = function(json) {
      var input = {
        coinAmount: json.coin_amount ? AptosNative.fromJSON(json.coin_amount) : void 0,
        coinType: json.coin_type,
        collectionDataIdHash: json.collection_data_id_hash,
        collectionName: json.collection_name,
        creatorAddress: AptosAddress.fromJSON(json.creator_address),
        eventAccountAddress: json.event_account_address,
        eventCreationNumber: json.event_creation_number,
        eventSequenceNumber: json.event_sequence_number,
        fromAddress: json.from_address ? AptosAddress.fromJSON(json.from_address) : void 0,
        name: json.name,
        propertyVersion: json.property_version,
        toAddress: json.to_address ? AptosAddress.fromJSON(json.to_address) : void 0,
        tokenAmount: AptosNative.fromJSON(json.token_amount),
        tokenDataIdHash: json.token_data_id_hash,
        transactionTimestamp: json.transaction_timestamp,
        transactionVersion: json.transaction_version,
        transferType: json.transfer_type
      };
      return AptosNFTTransferResponse2.create(input);
    };
    AptosNFTTransferResponse2.prototype.toJSON = function() {
      return {
        coin_amount: this.coinAmount ? this.coinAmount.toJSON() : void 0,
        coin_type: this.coinType,
        collection_data_id_hash: this.collectionDataIdHash,
        collection_name: this.collectionName,
        creator_address: this.creatorAddress.toJSON(),
        event_account_address: this.eventAccountAddress,
        event_creation_number: this.eventCreationNumber,
        event_sequence_number: this.eventSequenceNumber,
        from_address: this.fromAddress ? this.fromAddress.toJSON() : void 0,
        name: this.name,
        property_version: this.propertyVersion,
        to_address: this.toAddress ? this.toAddress.toJSON() : void 0,
        token_amount: this.tokenAmount.toJSON(),
        token_data_id_hash: this.tokenDataIdHash,
        transaction_timestamp: this.transactionTimestamp,
        transaction_version: this.transactionVersion,
        transfer_type: this.transferType
      };
    };
    return AptosNFTTransferResponse2;
  }()
);
var AptosNFTTransfersByTokensResponse = (
  /** @class */
  function() {
    function AptosNFTTransfersByTokensResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTTransferResponse.create(item);
      });
    }
    AptosNFTTransfersByTokensResponse2.create = function(input) {
      if (input instanceof AptosNFTTransfersByTokensResponse2) {
        return input;
      }
      return new AptosNFTTransfersByTokensResponse2(input);
    };
    AptosNFTTransfersByTokensResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTTransferResponse.fromJSON(item);
        })
      };
      return AptosNFTTransfersByTokensResponse2.create(input);
    };
    AptosNFTTransfersByTokensResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosNFTTransfersByTokensResponse2;
  }()
);
var GetNFTTransfersByIdsOperation = {
  operationId: "getNFTTransfersByIds",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts/transfers",
  parameterNames: ["limit", "offset", "cursor", "wallet_blacklist", "wallet_whitelist", "token_ids", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTTransfersByTokensResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var walletBlacklist = request.walletBlacklist;
    var walletWhitelist = request.walletWhitelist;
    var tokenIds = request.tokenIds;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      wallet_blacklist: walletBlacklist,
      wallet_whitelist: walletWhitelist,
      token_ids: tokenIds,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetNFTTransfersByCollectionResponse = (
  /** @class */
  function() {
    function AptosGetNFTTransfersByCollectionResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTTransferResponse.create(item);
      });
    }
    AptosGetNFTTransfersByCollectionResponse2.create = function(input) {
      if (input instanceof AptosGetNFTTransfersByCollectionResponse2) {
        return input;
      }
      return new AptosGetNFTTransfersByCollectionResponse2(input);
    };
    AptosGetNFTTransfersByCollectionResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTTransferResponse.fromJSON(item);
        })
      };
      return AptosGetNFTTransfersByCollectionResponse2.create(input);
    };
    AptosGetNFTTransfersByCollectionResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetNFTTransfersByCollectionResponse2;
  }()
);
var GetNFTTransfersByCollectionOperation = {
  operationId: "getNFTTransfersByCollection",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts/transfers/collections/{collection_data_id_hash}",
  parameterNames: ["collection_data_id_hash", "limit", "offset", "cursor", "wallet_whitelist", "wallet_blacklist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetNFTTransfersByCollectionResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var collectionDataIdHash = request.collectionDataIdHash;
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var walletWhitelist = request.walletWhitelist;
    var walletBlacklist = request.walletBlacklist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      collection_data_id_hash: collectionDataIdHash,
      limit,
      offset,
      cursor,
      wallet_whitelist: walletWhitelist,
      wallet_blacklist: walletBlacklist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetNFTTransfersByCreatorsResponse = (
  /** @class */
  function() {
    function AptosGetNFTTransfersByCreatorsResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTTransferResponse.create(item);
      });
    }
    AptosGetNFTTransfersByCreatorsResponse2.create = function(input) {
      if (input instanceof AptosGetNFTTransfersByCreatorsResponse2) {
        return input;
      }
      return new AptosGetNFTTransfersByCreatorsResponse2(input);
    };
    AptosGetNFTTransfersByCreatorsResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTTransferResponse.fromJSON(item);
        })
      };
      return AptosGetNFTTransfersByCreatorsResponse2.create(input);
    };
    AptosGetNFTTransfersByCreatorsResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetNFTTransfersByCreatorsResponse2;
  }()
);
var GetNFTTransfersByCreatorsOperation = {
  operationId: "getNFTTransfersByCreators",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts/transfers/creators",
  parameterNames: ["limit", "offset", "cursor", "creator_addresses", "collection_blacklist", "collection_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetNFTTransfersByCreatorsResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var creatorAddresses = request.creatorAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var collectionBlacklist = request.collectionBlacklist;
    var collectionWhitelist = request.collectionWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      creator_addresses: creatorAddresses.map(function(item) {
        return item.toJSON();
      }),
      collection_blacklist: collectionBlacklist,
      collection_whitelist: collectionWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTTransfersByWalletsResponse = (
  /** @class */
  function() {
    function AptosNFTTransfersByWalletsResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTTransferResponse.create(item);
      });
    }
    AptosNFTTransfersByWalletsResponse2.create = function(input) {
      if (input instanceof AptosNFTTransfersByWalletsResponse2) {
        return input;
      }
      return new AptosNFTTransfersByWalletsResponse2(input);
    };
    AptosNFTTransfersByWalletsResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTTransferResponse.fromJSON(item);
        })
      };
      return AptosNFTTransfersByWalletsResponse2.create(input);
    };
    AptosNFTTransfersByWalletsResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosNFTTransfersByWalletsResponse2;
  }()
);
var GetNFTTransfersByWalletsOperation = {
  operationId: "getNFTTransfersByWallets",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts/transfers/wallets",
  parameterNames: ["limit", "offset", "cursor", "wallet_addresses", "collection_blacklist", "collection_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTTransfersByWalletsResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var walletAddresses = request.walletAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var collectionBlacklist = request.collectionBlacklist;
    var collectionWhitelist = request.collectionWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      wallet_addresses: walletAddresses.map(function(item) {
        return item.toJSON();
      }),
      collection_blacklist: collectionBlacklist,
      collection_whitelist: collectionWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosCoinInfoDto = (
  /** @class */
  function() {
    function AptosCoinInfoDto2(input) {
      this.coinType = input.coinType;
      this.coinTypeHash = input.coinTypeHash;
      this.creatorAddress = AptosAddress.create(input.creatorAddress);
      this.decimals = input.decimals;
      this.name = input.name;
      this.supplyAggregatorTableHandle = input.supplyAggregatorTableHandle;
      this.supplyAggregatorTableKey = input.supplyAggregatorTableKey;
      this.symbol = input.symbol;
      this.transactionCreatedTimestamp = input.transactionCreatedTimestamp;
      this.transactionVersionCreated = input.transactionVersionCreated;
    }
    AptosCoinInfoDto2.create = function(input) {
      if (input instanceof AptosCoinInfoDto2) {
        return input;
      }
      return new AptosCoinInfoDto2(input);
    };
    AptosCoinInfoDto2.fromJSON = function(json) {
      var input = {
        coinType: json.coin_type,
        coinTypeHash: json.coin_type_hash,
        creatorAddress: AptosAddress.fromJSON(json.creator_address),
        decimals: json.decimals,
        name: json.name,
        supplyAggregatorTableHandle: json.supply_aggregator_table_handle,
        supplyAggregatorTableKey: json.supply_aggregator_table_key,
        symbol: json.symbol,
        transactionCreatedTimestamp: json.transaction_created_timestamp,
        transactionVersionCreated: json.transaction_version_created
      };
      return AptosCoinInfoDto2.create(input);
    };
    AptosCoinInfoDto2.prototype.toJSON = function() {
      return {
        coin_type: this.coinType,
        coin_type_hash: this.coinTypeHash,
        creator_address: this.creatorAddress.toJSON(),
        decimals: this.decimals,
        name: this.name,
        supply_aggregator_table_handle: this.supplyAggregatorTableHandle,
        supply_aggregator_table_key: this.supplyAggregatorTableKey,
        symbol: this.symbol,
        transaction_created_timestamp: this.transactionCreatedTimestamp,
        transaction_version_created: this.transactionVersionCreated
      };
    };
    return AptosCoinInfoDto2;
  }()
);
var GetCoinInfoByCoinTypeHashesOperation = {
  operationId: "getCoinInfoByCoinTypeHashes",
  groupName: "coins",
  httpMethod: "get",
  routePattern: "/coins",
  parameterNames: ["coin_type_hashes", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return AptosCoinInfoDto.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var coinTypeHashes = request.coinTypeHashes;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      coin_type_hashes: coinTypeHashes,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetLatestCoinsResponse = (
  /** @class */
  function() {
    function AptosGetLatestCoinsResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosCoinInfoDto.create(item);
      });
    }
    AptosGetLatestCoinsResponse2.create = function(input) {
      if (input instanceof AptosGetLatestCoinsResponse2) {
        return input;
      }
      return new AptosGetLatestCoinsResponse2(input);
    };
    AptosGetLatestCoinsResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosCoinInfoDto.fromJSON(item);
        })
      };
      return AptosGetLatestCoinsResponse2.create(input);
    };
    AptosGetLatestCoinsResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetLatestCoinsResponse2;
  }()
);
var GetLatestCoinsOperation = {
  operationId: "getLatestCoins",
  groupName: "coins",
  httpMethod: "get",
  routePattern: "/coins/latest",
  parameterNames: ["limit", "offset", "cursor", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetLatestCoinsResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetCoinsByNameRangeResponse = (
  /** @class */
  function() {
    function AptosGetCoinsByNameRangeResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosCoinInfoDto.create(item);
      });
    }
    AptosGetCoinsByNameRangeResponse2.create = function(input) {
      if (input instanceof AptosGetCoinsByNameRangeResponse2) {
        return input;
      }
      return new AptosGetCoinsByNameRangeResponse2(input);
    };
    AptosGetCoinsByNameRangeResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosCoinInfoDto.fromJSON(item);
        })
      };
      return AptosGetCoinsByNameRangeResponse2.create(input);
    };
    AptosGetCoinsByNameRangeResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetCoinsByNameRangeResponse2;
  }()
);
var GetCoinsByNameRangeOperation = {
  operationId: "getCoinsByNameRange",
  groupName: "coins",
  httpMethod: "get",
  routePattern: "/coins/names",
  parameterNames: ["limit", "offset", "cursor", "from_name", "to_name", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetCoinsByNameRangeResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var fromName = request.fromName;
    var toName = request.toName;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      from_name: fromName,
      to_name: toName,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetCoinsBySymbolRangeResponse = (
  /** @class */
  function() {
    function AptosGetCoinsBySymbolRangeResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosCoinInfoDto.create(item);
      });
    }
    AptosGetCoinsBySymbolRangeResponse2.create = function(input) {
      if (input instanceof AptosGetCoinsBySymbolRangeResponse2) {
        return input;
      }
      return new AptosGetCoinsBySymbolRangeResponse2(input);
    };
    AptosGetCoinsBySymbolRangeResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosCoinInfoDto.fromJSON(item);
        })
      };
      return AptosGetCoinsBySymbolRangeResponse2.create(input);
    };
    AptosGetCoinsBySymbolRangeResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetCoinsBySymbolRangeResponse2;
  }()
);
var GetCoinsBySymbolRangeOperation = {
  operationId: "getCoinsBySymbolRange",
  groupName: "coins",
  httpMethod: "get",
  routePattern: "/coins/symbols",
  parameterNames: ["limit", "offset", "cursor", "from_symbol", "to_symbol", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetCoinsBySymbolRangeResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var fromSymbol = request.fromSymbol;
    var toSymbol = request.toSymbol;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      from_symbol: fromSymbol,
      to_symbol: toSymbol,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetCoinsByCreatorsResponse = (
  /** @class */
  function() {
    function AptosGetCoinsByCreatorsResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosCoinInfoDto.create(item);
      });
    }
    AptosGetCoinsByCreatorsResponse2.create = function(input) {
      if (input instanceof AptosGetCoinsByCreatorsResponse2) {
        return input;
      }
      return new AptosGetCoinsByCreatorsResponse2(input);
    };
    AptosGetCoinsByCreatorsResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosCoinInfoDto.fromJSON(item);
        })
      };
      return AptosGetCoinsByCreatorsResponse2.create(input);
    };
    AptosGetCoinsByCreatorsResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetCoinsByCreatorsResponse2;
  }()
);
var GetCoinsByCreatorsOperation = {
  operationId: "getCoinsByCreators",
  groupName: "coins",
  httpMethod: "get",
  routePattern: "/coins/creators",
  parameterNames: ["limit", "offset", "cursor", "creator_addresses", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetCoinsByCreatorsResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var creatorAddresses = request.creatorAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      creator_addresses: creatorAddresses.map(function(item) {
        return item.toJSON();
      }),
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosCoinTransferDto = (
  /** @class */
  function() {
    function AptosCoinTransferDto2(input) {
      this.activityType = input.activityType;
      this.amount = AptosNative.create(input.amount);
      this.blockHeight = input.blockHeight;
      this.coinType = input.coinType;
      this.entryFunctionIdStr = input.entryFunctionIdStr;
      this.eventAccountAddress = input.eventAccountAddress;
      this.eventCreationNumber = input.eventCreationNumber;
      this.eventSequenceNumber = input.eventSequenceNumber;
      this.isGasFee = input.isGasFee;
      this.isTransactionSuccess = input.isTransactionSuccess;
      this.ownerAddress = AptosAddress.create(input.ownerAddress);
      this.transactionTimestamp = input.transactionTimestamp;
      this.transactionVersion = input.transactionVersion;
    }
    AptosCoinTransferDto2.create = function(input) {
      if (input instanceof AptosCoinTransferDto2) {
        return input;
      }
      return new AptosCoinTransferDto2(input);
    };
    AptosCoinTransferDto2.fromJSON = function(json) {
      var input = {
        activityType: json.activity_type,
        amount: AptosNative.fromJSON(json.amount),
        blockHeight: json.block_height,
        coinType: json.coin_type,
        entryFunctionIdStr: json.entry_function_id_str,
        eventAccountAddress: json.event_account_address,
        eventCreationNumber: json.event_creation_number,
        eventSequenceNumber: json.event_sequence_number,
        isGasFee: json.is_gas_fee,
        isTransactionSuccess: json.is_transaction_success,
        ownerAddress: AptosAddress.fromJSON(json.owner_address),
        transactionTimestamp: json.transaction_timestamp,
        transactionVersion: json.transaction_version
      };
      return AptosCoinTransferDto2.create(input);
    };
    AptosCoinTransferDto2.prototype.toJSON = function() {
      return {
        activity_type: this.activityType,
        amount: this.amount.toJSON(),
        block_height: this.blockHeight,
        coin_type: this.coinType,
        entry_function_id_str: this.entryFunctionIdStr,
        event_account_address: this.eventAccountAddress,
        event_creation_number: this.eventCreationNumber,
        event_sequence_number: this.eventSequenceNumber,
        is_gas_fee: this.isGasFee,
        is_transaction_success: this.isTransactionSuccess,
        owner_address: this.ownerAddress.toJSON(),
        transaction_timestamp: this.transactionTimestamp,
        transaction_version: this.transactionVersion
      };
    };
    return AptosCoinTransferDto2;
  }()
);
var AptosGetCoinTransfersByOwnerAddressesResponse = (
  /** @class */
  function() {
    function AptosGetCoinTransfersByOwnerAddressesResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosCoinTransferDto.create(item);
      });
    }
    AptosGetCoinTransfersByOwnerAddressesResponse2.create = function(input) {
      if (input instanceof AptosGetCoinTransfersByOwnerAddressesResponse2) {
        return input;
      }
      return new AptosGetCoinTransfersByOwnerAddressesResponse2(input);
    };
    AptosGetCoinTransfersByOwnerAddressesResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosCoinTransferDto.fromJSON(item);
        })
      };
      return AptosGetCoinTransfersByOwnerAddressesResponse2.create(input);
    };
    AptosGetCoinTransfersByOwnerAddressesResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetCoinTransfersByOwnerAddressesResponse2;
  }()
);
var GetCoinTransfersByOwnerAddressesOperation = {
  operationId: "getCoinTransfersByOwnerAddresses",
  groupName: "coins",
  httpMethod: "get",
  routePattern: "/coins/transfers/wallets",
  parameterNames: ["limit", "offset", "cursor", "owner_addresses", "from_date", "to_date", "coin_type_blacklist", "coin_type_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetCoinTransfersByOwnerAddressesResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var ownerAddresses = request.ownerAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var fromDate = request.fromDate;
    var toDate = request.toDate;
    var coinTypeBlacklist = request.coinTypeBlacklist;
    var coinTypeWhitelist = request.coinTypeWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      owner_addresses: ownerAddresses.map(function(item) {
        return item.toJSON();
      }),
      from_date: fromDate,
      to_date: toDate,
      coin_type_blacklist: coinTypeBlacklist,
      coin_type_whitelist: coinTypeWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetCoinTransfersByBlockHeightsResponse = (
  /** @class */
  function() {
    function AptosGetCoinTransfersByBlockHeightsResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosCoinTransferDto.create(item);
      });
    }
    AptosGetCoinTransfersByBlockHeightsResponse2.create = function(input) {
      if (input instanceof AptosGetCoinTransfersByBlockHeightsResponse2) {
        return input;
      }
      return new AptosGetCoinTransfersByBlockHeightsResponse2(input);
    };
    AptosGetCoinTransfersByBlockHeightsResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosCoinTransferDto.fromJSON(item);
        })
      };
      return AptosGetCoinTransfersByBlockHeightsResponse2.create(input);
    };
    AptosGetCoinTransfersByBlockHeightsResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetCoinTransfersByBlockHeightsResponse2;
  }()
);
var GetCoinTransfersByBlockHeightsOperation = {
  operationId: "getCoinTransfersByBlockHeights",
  groupName: "coins",
  httpMethod: "get",
  routePattern: "/coins/transfers/blocks",
  parameterNames: ["limit", "offset", "cursor", "block_heights", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetCoinTransfersByBlockHeightsResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var blockHeights = request.blockHeights;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      block_heights: blockHeights,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetCoinTransfersByCoinTypeResponse = (
  /** @class */
  function() {
    function AptosGetCoinTransfersByCoinTypeResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosCoinTransferDto.create(item);
      });
    }
    AptosGetCoinTransfersByCoinTypeResponse2.create = function(input) {
      if (input instanceof AptosGetCoinTransfersByCoinTypeResponse2) {
        return input;
      }
      return new AptosGetCoinTransfersByCoinTypeResponse2(input);
    };
    AptosGetCoinTransfersByCoinTypeResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosCoinTransferDto.fromJSON(item);
        })
      };
      return AptosGetCoinTransfersByCoinTypeResponse2.create(input);
    };
    AptosGetCoinTransfersByCoinTypeResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetCoinTransfersByCoinTypeResponse2;
  }()
);
var GetCoinTransfersByCoinTypeOperation = {
  operationId: "getCoinTransfersByCoinType",
  groupName: "coins",
  httpMethod: "get",
  routePattern: "/coins/transfers/{coin_type}",
  parameterNames: ["coin_type", "limit", "offset", "cursor", "from_date", "to_date", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetCoinTransfersByCoinTypeResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var coinType = request.coinType;
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var fromDate = request.fromDate;
    var toDate = request.toDate;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      coin_type: coinType,
      limit,
      offset,
      cursor,
      from_date: fromDate,
      to_date: toDate,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosCurrentCoinBalanceDto = (
  /** @class */
  function() {
    function AptosCurrentCoinBalanceDto2(input) {
      this.amount = AptosNative.create(input.amount);
      this.coinType = input.coinType;
      this.coinTypeHash = input.coinTypeHash;
      this.lastTransactionTimestamp = input.lastTransactionTimestamp;
      this.lastTransactionVersion = input.lastTransactionVersion;
      this.ownerAddress = AptosAddress.create(input.ownerAddress);
    }
    AptosCurrentCoinBalanceDto2.create = function(input) {
      if (input instanceof AptosCurrentCoinBalanceDto2) {
        return input;
      }
      return new AptosCurrentCoinBalanceDto2(input);
    };
    AptosCurrentCoinBalanceDto2.fromJSON = function(json) {
      var input = {
        amount: AptosNative.fromJSON(json.amount),
        coinType: json.coin_type,
        coinTypeHash: json.coin_type_hash,
        lastTransactionTimestamp: json.last_transaction_timestamp,
        lastTransactionVersion: json.last_transaction_version,
        ownerAddress: AptosAddress.fromJSON(json.owner_address)
      };
      return AptosCurrentCoinBalanceDto2.create(input);
    };
    AptosCurrentCoinBalanceDto2.prototype.toJSON = function() {
      return {
        amount: this.amount.toJSON(),
        coin_type: this.coinType,
        coin_type_hash: this.coinTypeHash,
        last_transaction_timestamp: this.lastTransactionTimestamp,
        last_transaction_version: this.lastTransactionVersion,
        owner_address: this.ownerAddress.toJSON()
      };
    };
    return AptosCurrentCoinBalanceDto2;
  }()
);
var AptosGetTopHoldersByCoinResponse = (
  /** @class */
  function() {
    function AptosGetTopHoldersByCoinResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosCurrentCoinBalanceDto.create(item);
      });
    }
    AptosGetTopHoldersByCoinResponse2.create = function(input) {
      if (input instanceof AptosGetTopHoldersByCoinResponse2) {
        return input;
      }
      return new AptosGetTopHoldersByCoinResponse2(input);
    };
    AptosGetTopHoldersByCoinResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosCurrentCoinBalanceDto.fromJSON(item);
        })
      };
      return AptosGetTopHoldersByCoinResponse2.create(input);
    };
    AptosGetTopHoldersByCoinResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetTopHoldersByCoinResponse2;
  }()
);
var GetTopHoldersByCoinOperation = {
  operationId: "getTopHoldersByCoin",
  groupName: "coins",
  httpMethod: "get",
  routePattern: "/coins/owners/{coin_type_hash}/top-holders",
  parameterNames: ["coin_type_hash", "limit", "offset", "cursor", "min_amount", "min_version", "wallet_blacklist", "wallet_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetTopHoldersByCoinResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var coinTypeHash = request.coinTypeHash;
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var minAmount = request.minAmount ? AptosNative.create(request.minAmount) : void 0;
    var minVersion = request.minVersion;
    var walletBlacklist = request.walletBlacklist;
    var walletWhitelist = request.walletWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      coin_type_hash: coinTypeHash,
      limit,
      offset,
      cursor,
      min_amount: minAmount ? minAmount.toJSON() : void 0,
      min_version: minVersion,
      wallet_blacklist: walletBlacklist,
      wallet_whitelist: walletWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetCoinBalancesByWalletsResponse = (
  /** @class */
  function() {
    function AptosGetCoinBalancesByWalletsResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosCurrentCoinBalanceDto.create(item);
      });
    }
    AptosGetCoinBalancesByWalletsResponse2.create = function(input) {
      if (input instanceof AptosGetCoinBalancesByWalletsResponse2) {
        return input;
      }
      return new AptosGetCoinBalancesByWalletsResponse2(input);
    };
    AptosGetCoinBalancesByWalletsResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosCurrentCoinBalanceDto.fromJSON(item);
        })
      };
      return AptosGetCoinBalancesByWalletsResponse2.create(input);
    };
    AptosGetCoinBalancesByWalletsResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetCoinBalancesByWalletsResponse2;
  }()
);
var GetCoinBalancesByWalletsOperation = {
  operationId: "getCoinBalancesByWallets",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/coins",
  parameterNames: ["limit", "offset", "cursor", "owner_addresses", "coin_type_hash_blacklist", "coin_type_hash_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetCoinBalancesByWalletsResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var ownerAddresses = request.ownerAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var coinTypeHashBlacklist = request.coinTypeHashBlacklist;
    var coinTypeHashWhitelist = request.coinTypeHashWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      owner_addresses: ownerAddresses.map(function(item) {
        return item.toJSON();
      }),
      coin_type_hash_blacklist: coinTypeHashBlacklist,
      coin_type_hash_whitelist: coinTypeHashWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosHistoricalCoinBalanceDto = (
  /** @class */
  function() {
    function AptosHistoricalCoinBalanceDto2(input) {
      this.amount = AptosNative.create(input.amount);
      this.coinType = input.coinType;
      this.coinTypeHash = input.coinTypeHash;
      this.transactionTimestamp = input.transactionTimestamp;
      this.transactionVersion = input.transactionVersion;
      this.ownerAddress = AptosAddress.create(input.ownerAddress);
    }
    AptosHistoricalCoinBalanceDto2.create = function(input) {
      if (input instanceof AptosHistoricalCoinBalanceDto2) {
        return input;
      }
      return new AptosHistoricalCoinBalanceDto2(input);
    };
    AptosHistoricalCoinBalanceDto2.fromJSON = function(json) {
      var input = {
        amount: AptosNative.fromJSON(json.amount),
        coinType: json.coin_type,
        coinTypeHash: json.coin_type_hash,
        transactionTimestamp: json.transaction_timestamp,
        transactionVersion: json.transaction_version,
        ownerAddress: AptosAddress.fromJSON(json.owner_address)
      };
      return AptosHistoricalCoinBalanceDto2.create(input);
    };
    AptosHistoricalCoinBalanceDto2.prototype.toJSON = function() {
      return {
        amount: this.amount.toJSON(),
        coin_type: this.coinType,
        coin_type_hash: this.coinTypeHash,
        transaction_timestamp: this.transactionTimestamp,
        transaction_version: this.transactionVersion,
        owner_address: this.ownerAddress.toJSON()
      };
    };
    return AptosHistoricalCoinBalanceDto2;
  }()
);
var AptosGetHistoricalCoinBalancesByWalletsResponse = (
  /** @class */
  function() {
    function AptosGetHistoricalCoinBalancesByWalletsResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosHistoricalCoinBalanceDto.create(item);
      });
    }
    AptosGetHistoricalCoinBalancesByWalletsResponse2.create = function(input) {
      if (input instanceof AptosGetHistoricalCoinBalancesByWalletsResponse2) {
        return input;
      }
      return new AptosGetHistoricalCoinBalancesByWalletsResponse2(input);
    };
    AptosGetHistoricalCoinBalancesByWalletsResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosHistoricalCoinBalanceDto.fromJSON(item);
        })
      };
      return AptosGetHistoricalCoinBalancesByWalletsResponse2.create(input);
    };
    AptosGetHistoricalCoinBalancesByWalletsResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetHistoricalCoinBalancesByWalletsResponse2;
  }()
);
var GetHistoricalCoinBalancesByWalletsOperation = {
  operationId: "getHistoricalCoinBalancesByWallets",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/coins/history",
  parameterNames: ["limit", "offset", "cursor", "owner_addresses", "coin_type_hash_blacklist", "coin_type_hash_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetHistoricalCoinBalancesByWalletsResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var ownerAddresses = request.ownerAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var coinTypeHashBlacklist = request.coinTypeHashBlacklist;
    var coinTypeHashWhitelist = request.coinTypeHashWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      owner_addresses: ownerAddresses.map(function(item) {
        return item.toJSON();
      }),
      coin_type_hash_blacklist: coinTypeHashBlacklist,
      coin_type_hash_whitelist: coinTypeHashWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var GetCoinTransfersByWalletAddressesOperation = {
  operationId: "getCoinTransfersByWalletAddresses",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/coins/transfers",
  parameterNames: ["limit", "offset", "cursor", "owner_addresses", "from_date", "to_date", "coin_type_blacklist", "coin_type_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetCoinTransfersByOwnerAddressesResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var ownerAddresses = request.ownerAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var fromDate = request.fromDate;
    var toDate = request.toDate;
    var coinTypeBlacklist = request.coinTypeBlacklist;
    var coinTypeWhitelist = request.coinTypeWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      owner_addresses: ownerAddresses.map(function(item) {
        return item.toJSON();
      }),
      from_date: fromDate,
      to_date: toDate,
      coin_type_blacklist: coinTypeBlacklist,
      coin_type_whitelist: coinTypeWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTsByOwnersResponse = (
  /** @class */
  function() {
    function AptosNFTsByOwnersResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTOwnerResponse.create(item);
      });
    }
    AptosNFTsByOwnersResponse2.create = function(input) {
      if (input instanceof AptosNFTsByOwnersResponse2) {
        return input;
      }
      return new AptosNFTsByOwnersResponse2(input);
    };
    AptosNFTsByOwnersResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTOwnerResponse.fromJSON(item);
        })
      };
      return AptosNFTsByOwnersResponse2.create(input);
    };
    AptosNFTsByOwnersResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosNFTsByOwnersResponse2;
  }()
);
var GetNFTByOwnersOperation = {
  operationId: "getNFTByOwners",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/nfts",
  parameterNames: ["limit", "offset", "cursor", "owner_addresses", "collection_blacklist", "collection_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTsByOwnersResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var ownerAddresses = request.ownerAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var collectionBlacklist = request.collectionBlacklist;
    var collectionWhitelist = request.collectionWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      owner_addresses: ownerAddresses.map(function(item) {
        return item.toJSON();
      }),
      collection_blacklist: collectionBlacklist,
      collection_whitelist: collectionWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var GetWalletsNFTTransfersOperation = {
  operationId: "getWalletsNFTTransfers",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/nfts/transfers",
  parameterNames: ["limit", "offset", "cursor", "wallet_addresses", "collection_blacklist", "collection_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTTransfersByWalletsResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var walletAddresses = request.walletAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var collectionBlacklist = request.collectionBlacklist;
    var collectionWhitelist = request.collectionWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      wallet_addresses: walletAddresses.map(function(item) {
        return item.toJSON();
      }),
      collection_blacklist: collectionBlacklist,
      collection_whitelist: collectionWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetAccountResponse = (
  /** @class */
  function() {
    function AptosGetAccountResponse2(input) {
      this.sequenceNumber = input.sequenceNumber;
      this.authenticationKey = input.authenticationKey;
    }
    AptosGetAccountResponse2.create = function(input) {
      if (input instanceof AptosGetAccountResponse2) {
        return input;
      }
      return new AptosGetAccountResponse2(input);
    };
    AptosGetAccountResponse2.fromJSON = function(json) {
      var input = {
        sequenceNumber: json.sequence_number,
        authenticationKey: json.authentication_key
      };
      return AptosGetAccountResponse2.create(input);
    };
    AptosGetAccountResponse2.prototype.toJSON = function() {
      return {
        sequence_number: this.sequenceNumber,
        authentication_key: this.authenticationKey
      };
    };
    return AptosGetAccountResponse2;
  }()
);
var GetAccountOperation = {
  operationId: "getAccount",
  groupName: "accounts",
  httpMethod: "get",
  routePattern: "/accounts/{address}",
  parameterNames: ["address", "ledger_version", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetAccountResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var address = request.address;
    var ledgerVersion = request.ledgerVersion;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      address,
      ledger_version: ledgerVersion,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetAccountResourceResponseData = (
  /** @class */
  function() {
    function AptosGetAccountResourceResponseData2() {
    }
    AptosGetAccountResourceResponseData2.create = function(input) {
      return input;
    };
    AptosGetAccountResourceResponseData2.fromJSON = function(json) {
      return json;
    };
    return AptosGetAccountResourceResponseData2;
  }()
);
var AptosGetAccountResourceResponse = (
  /** @class */
  function() {
    function AptosGetAccountResourceResponse2(input) {
      this.type = input.type;
      this.data = AptosGetAccountResourceResponseData.create(input.data);
    }
    AptosGetAccountResourceResponse2.create = function(input) {
      if (input instanceof AptosGetAccountResourceResponse2) {
        return input;
      }
      return new AptosGetAccountResourceResponse2(input);
    };
    AptosGetAccountResourceResponse2.fromJSON = function(json) {
      var input = {
        type: json.type,
        data: AptosGetAccountResourceResponseData.fromJSON(json.data)
      };
      return AptosGetAccountResourceResponse2.create(input);
    };
    AptosGetAccountResourceResponse2.prototype.toJSON = function() {
      return {
        type: this.type,
        data: this.data
      };
    };
    return AptosGetAccountResourceResponse2;
  }()
);
var GetAccountResourcesOperation = {
  operationId: "getAccountResources",
  groupName: "accounts",
  httpMethod: "get",
  routePattern: "/accounts/{address}/resources",
  parameterNames: ["address", "ledger_version", "limit", "start", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return AptosGetAccountResourceResponse.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var address = request.address;
    var ledgerVersion = request.ledgerVersion;
    var limit = request.limit;
    var start = request.start;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      address,
      ledger_version: ledgerVersion,
      limit,
      start,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGenericTypeParam = (
  /** @class */
  function() {
    function AptosGenericTypeParam2(input) {
      this.constraints = input.constraints;
    }
    AptosGenericTypeParam2.create = function(input) {
      if (input instanceof AptosGenericTypeParam2) {
        return input;
      }
      return new AptosGenericTypeParam2(input);
    };
    AptosGenericTypeParam2.fromJSON = function(json) {
      var input = {
        constraints: json.constraints
      };
      return AptosGenericTypeParam2.create(input);
    };
    AptosGenericTypeParam2.prototype.toJSON = function() {
      return {
        constraints: this.constraints
      };
    };
    return AptosGenericTypeParam2;
  }()
);
var AptosModuleExposedFunction = (
  /** @class */
  function() {
    function AptosModuleExposedFunction2(input) {
      this.name = input.name;
      this.visibility = input.visibility;
      this.isEntry = input.isEntry;
      this.genericTypeParams = input.genericTypeParams.map(function(item) {
        return AptosGenericTypeParam.create(item);
      });
      this.params = input.params;
      this.return = input.return;
    }
    AptosModuleExposedFunction2.create = function(input) {
      if (input instanceof AptosModuleExposedFunction2) {
        return input;
      }
      return new AptosModuleExposedFunction2(input);
    };
    AptosModuleExposedFunction2.fromJSON = function(json) {
      var input = {
        name: json.name,
        visibility: json.visibility,
        isEntry: json.is_entry,
        genericTypeParams: json.generic_type_params.map(function(item) {
          return AptosGenericTypeParam.fromJSON(item);
        }),
        params: json.params,
        return: json.return
      };
      return AptosModuleExposedFunction2.create(input);
    };
    AptosModuleExposedFunction2.prototype.toJSON = function() {
      return {
        name: this.name,
        visibility: this.visibility,
        is_entry: this.isEntry,
        generic_type_params: this.genericTypeParams.map(function(item) {
          return item.toJSON();
        }),
        params: this.params,
        return: this.return
      };
    };
    return AptosModuleExposedFunction2;
  }()
);
var AptosModuleStructField = (
  /** @class */
  function() {
    function AptosModuleStructField2(input) {
      this.name = input.name;
      this.type = input.type;
    }
    AptosModuleStructField2.create = function(input) {
      if (input instanceof AptosModuleStructField2) {
        return input;
      }
      return new AptosModuleStructField2(input);
    };
    AptosModuleStructField2.fromJSON = function(json) {
      var input = {
        name: json.name,
        type: json.type
      };
      return AptosModuleStructField2.create(input);
    };
    AptosModuleStructField2.prototype.toJSON = function() {
      return {
        name: this.name,
        type: this.type
      };
    };
    return AptosModuleStructField2;
  }()
);
var AptosModuleStruct = (
  /** @class */
  function() {
    function AptosModuleStruct2(input) {
      this.name = input.name;
      this.isNative = input.isNative;
      this.abilities = input.abilities;
      this.genericTypeParams = input.genericTypeParams.map(function(item) {
        return AptosGenericTypeParam.create(item);
      });
      this.fields = input.fields.map(function(item) {
        return AptosModuleStructField.create(item);
      });
    }
    AptosModuleStruct2.create = function(input) {
      if (input instanceof AptosModuleStruct2) {
        return input;
      }
      return new AptosModuleStruct2(input);
    };
    AptosModuleStruct2.fromJSON = function(json) {
      var input = {
        name: json.name,
        isNative: json.is_native,
        abilities: json.abilities,
        genericTypeParams: json.generic_type_params.map(function(item) {
          return AptosGenericTypeParam.fromJSON(item);
        }),
        fields: json.fields.map(function(item) {
          return AptosModuleStructField.fromJSON(item);
        })
      };
      return AptosModuleStruct2.create(input);
    };
    AptosModuleStruct2.prototype.toJSON = function() {
      return {
        name: this.name,
        is_native: this.isNative,
        abilities: this.abilities,
        generic_type_params: this.genericTypeParams.map(function(item) {
          return item.toJSON();
        }),
        fields: this.fields.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosModuleStruct2;
  }()
);
var AptosMoveModuleAbi = (
  /** @class */
  function() {
    function AptosMoveModuleAbi2(input) {
      this.address = AptosAddress.create(input.address);
      this.name = input.name;
      this.friends = input.friends;
      this.exposedFunctions = input.exposedFunctions.map(function(item) {
        return AptosModuleExposedFunction.create(item);
      });
      this.structs = input.structs.map(function(item) {
        return AptosModuleStruct.create(item);
      });
    }
    AptosMoveModuleAbi2.create = function(input) {
      if (input instanceof AptosMoveModuleAbi2) {
        return input;
      }
      return new AptosMoveModuleAbi2(input);
    };
    AptosMoveModuleAbi2.fromJSON = function(json) {
      var input = {
        address: AptosAddress.fromJSON(json.address),
        name: json.name,
        friends: json.friends,
        exposedFunctions: json.exposed_functions.map(function(item) {
          return AptosModuleExposedFunction.fromJSON(item);
        }),
        structs: json.structs.map(function(item) {
          return AptosModuleStruct.fromJSON(item);
        })
      };
      return AptosMoveModuleAbi2.create(input);
    };
    AptosMoveModuleAbi2.prototype.toJSON = function() {
      return {
        address: this.address.toJSON(),
        name: this.name,
        friends: this.friends,
        exposed_functions: this.exposedFunctions.map(function(item) {
          return item.toJSON();
        }),
        structs: this.structs.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosMoveModuleAbi2;
  }()
);
var AptosGetAccountModuleResponse = (
  /** @class */
  function() {
    function AptosGetAccountModuleResponse2(input) {
      this.bytecode = input.bytecode;
      this.abi = AptosMoveModuleAbi.create(input.abi);
    }
    AptosGetAccountModuleResponse2.create = function(input) {
      if (input instanceof AptosGetAccountModuleResponse2) {
        return input;
      }
      return new AptosGetAccountModuleResponse2(input);
    };
    AptosGetAccountModuleResponse2.fromJSON = function(json) {
      var input = {
        bytecode: json.bytecode,
        abi: AptosMoveModuleAbi.fromJSON(json.abi)
      };
      return AptosGetAccountModuleResponse2.create(input);
    };
    AptosGetAccountModuleResponse2.prototype.toJSON = function() {
      return {
        bytecode: this.bytecode,
        abi: this.abi.toJSON()
      };
    };
    return AptosGetAccountModuleResponse2;
  }()
);
var GetAccountModulesOperation = {
  operationId: "getAccountModules",
  groupName: "accounts",
  httpMethod: "get",
  routePattern: "/accounts/{address}/modules",
  parameterNames: ["address", "ledger_version", "limit", "start", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return AptosGetAccountModuleResponse.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var address = request.address;
    var ledgerVersion = request.ledgerVersion;
    var limit = request.limit;
    var start = request.start;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      address,
      ledger_version: ledgerVersion,
      limit,
      start,
      network: network ? network.toJSON() : void 0
    };
  }
};
var GetAccountResourceOperation = {
  operationId: "getAccountResource",
  groupName: "accounts",
  httpMethod: "get",
  routePattern: "/accounts/{address}/resource/{resource_type}",
  parameterNames: ["address", "resource_type", "ledger_version", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetAccountResourceResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var address = request.address;
    var resourceType = request.resourceType;
    var ledgerVersion = request.ledgerVersion;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      address,
      resource_type: resourceType,
      ledger_version: ledgerVersion,
      network: network ? network.toJSON() : void 0
    };
  }
};
var GetAccountModuleOperation = {
  operationId: "getAccountModule",
  groupName: "accounts",
  httpMethod: "get",
  routePattern: "/accounts/{address}/resource/{module_name}",
  parameterNames: ["address", "module_name", "ledger_version", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetAccountModuleResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var address = request.address;
    var moduleName = request.moduleName;
    var ledgerVersion = request.ledgerVersion;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      address,
      module_name: moduleName,
      ledger_version: ledgerVersion,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosTransactionEventGuid = (
  /** @class */
  function() {
    function AptosTransactionEventGuid2(input) {
      this.creationNumber = input.creationNumber;
      this.accountAddress = AptosAddress.create(input.accountAddress);
    }
    AptosTransactionEventGuid2.create = function(input) {
      if (input instanceof AptosTransactionEventGuid2) {
        return input;
      }
      return new AptosTransactionEventGuid2(input);
    };
    AptosTransactionEventGuid2.fromJSON = function(json) {
      var input = {
        creationNumber: json.creation_number,
        accountAddress: AptosAddress.fromJSON(json.account_address)
      };
      return AptosTransactionEventGuid2.create(input);
    };
    AptosTransactionEventGuid2.prototype.toJSON = function() {
      return {
        creation_number: this.creationNumber,
        account_address: this.accountAddress.toJSON()
      };
    };
    return AptosTransactionEventGuid2;
  }()
);
var AptosGetEventsByCreationNumberResponseData = (
  /** @class */
  function() {
    function AptosGetEventsByCreationNumberResponseData2() {
    }
    AptosGetEventsByCreationNumberResponseData2.create = function(input) {
      return input;
    };
    AptosGetEventsByCreationNumberResponseData2.fromJSON = function(json) {
      return json;
    };
    return AptosGetEventsByCreationNumberResponseData2;
  }()
);
var AptosGetEventsByCreationNumberResponse = (
  /** @class */
  function() {
    function AptosGetEventsByCreationNumberResponse2(input) {
      this.version = input.version;
      this.guid = AptosTransactionEventGuid.create(input.guid);
      this.sequenceNumber = input.sequenceNumber;
      this.type = input.type;
      this.data = AptosGetEventsByCreationNumberResponseData.create(input.data);
    }
    AptosGetEventsByCreationNumberResponse2.create = function(input) {
      if (input instanceof AptosGetEventsByCreationNumberResponse2) {
        return input;
      }
      return new AptosGetEventsByCreationNumberResponse2(input);
    };
    AptosGetEventsByCreationNumberResponse2.fromJSON = function(json) {
      var input = {
        version: json.version,
        guid: AptosTransactionEventGuid.fromJSON(json.guid),
        sequenceNumber: json.sequence_number,
        type: json.type,
        data: AptosGetEventsByCreationNumberResponseData.fromJSON(json.data)
      };
      return AptosGetEventsByCreationNumberResponse2.create(input);
    };
    AptosGetEventsByCreationNumberResponse2.prototype.toJSON = function() {
      return {
        version: this.version,
        guid: this.guid.toJSON(),
        sequence_number: this.sequenceNumber,
        type: this.type,
        data: this.data
      };
    };
    return AptosGetEventsByCreationNumberResponse2;
  }()
);
var GetEventsByCreationNumberOperation = {
  operationId: "getEventsByCreationNumber",
  groupName: "accounts",
  httpMethod: "get",
  routePattern: "/accounts/{address}/events/{creation_number}",
  parameterNames: ["address", "creation_number", "limit", "start", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return AptosGetEventsByCreationNumberResponse.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var address = request.address;
    var creationNumber = request.creationNumber;
    var limit = request.limit;
    var start = request.start;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      address,
      creation_number: creationNumber,
      limit,
      start,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetEventsByEventHandleResponseData = (
  /** @class */
  function() {
    function AptosGetEventsByEventHandleResponseData2() {
    }
    AptosGetEventsByEventHandleResponseData2.create = function(input) {
      return input;
    };
    AptosGetEventsByEventHandleResponseData2.fromJSON = function(json) {
      return json;
    };
    return AptosGetEventsByEventHandleResponseData2;
  }()
);
var AptosGetEventsByEventHandleResponse = (
  /** @class */
  function() {
    function AptosGetEventsByEventHandleResponse2(input) {
      this.version = input.version;
      this.guid = AptosTransactionEventGuid.create(input.guid);
      this.sequenceNumber = input.sequenceNumber;
      this.type = input.type;
      this.data = AptosGetEventsByEventHandleResponseData.create(input.data);
    }
    AptosGetEventsByEventHandleResponse2.create = function(input) {
      if (input instanceof AptosGetEventsByEventHandleResponse2) {
        return input;
      }
      return new AptosGetEventsByEventHandleResponse2(input);
    };
    AptosGetEventsByEventHandleResponse2.fromJSON = function(json) {
      var input = {
        version: json.version,
        guid: AptosTransactionEventGuid.fromJSON(json.guid),
        sequenceNumber: json.sequence_number,
        type: json.type,
        data: AptosGetEventsByEventHandleResponseData.fromJSON(json.data)
      };
      return AptosGetEventsByEventHandleResponse2.create(input);
    };
    AptosGetEventsByEventHandleResponse2.prototype.toJSON = function() {
      return {
        version: this.version,
        guid: this.guid.toJSON(),
        sequence_number: this.sequenceNumber,
        type: this.type,
        data: this.data
      };
    };
    return AptosGetEventsByEventHandleResponse2;
  }()
);
var GetEventsByEventHandleOperation = {
  operationId: "getEventsByEventHandle",
  groupName: "accounts",
  httpMethod: "get",
  routePattern: "/accounts/{address}/events/{event_handle}/{field_name}",
  parameterNames: ["address", "event_handle", "field_name", "limit", "start", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return AptosGetEventsByEventHandleResponse.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var address = request.address;
    var eventHandle = request.eventHandle;
    var fieldName = request.fieldName;
    var limit = request.limit;
    var start = request.start;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      address,
      event_handle: eventHandle,
      field_name: fieldName,
      limit,
      start,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosEntryFunctionPayloadRequest = (
  /** @class */
  function() {
    function AptosEntryFunctionPayloadRequest2(input) {
      this.type = input.type;
      this.function = input.function;
      this.typeArguments = input.typeArguments;
      this.arguments = input.arguments;
    }
    AptosEntryFunctionPayloadRequest2.create = function(input) {
      if (input instanceof AptosEntryFunctionPayloadRequest2) {
        return input;
      }
      return new AptosEntryFunctionPayloadRequest2(input);
    };
    AptosEntryFunctionPayloadRequest2.fromJSON = function(json) {
      var input = {
        type: json.type,
        function: json.function,
        typeArguments: json.type_arguments,
        arguments: json.arguments
      };
      return AptosEntryFunctionPayloadRequest2.create(input);
    };
    AptosEntryFunctionPayloadRequest2.isInput = function(input) {
      return ["type", "function", "typeArguments", "arguments"].every(function(name) {
        return input[name] !== void 0;
      });
    };
    AptosEntryFunctionPayloadRequest2.isJSON = function(json) {
      return ["type", "function", "type_arguments", "arguments"].every(function(name) {
        return json[name] !== void 0;
      });
    };
    AptosEntryFunctionPayloadRequest2.prototype.toJSON = function() {
      return {
        type: this.type,
        function: this.function,
        type_arguments: this.typeArguments,
        arguments: this.arguments
      };
    };
    return AptosEntryFunctionPayloadRequest2;
  }()
);
var AptosScriptPayloadRequestCode = (
  /** @class */
  function() {
    function AptosScriptPayloadRequestCode2() {
    }
    AptosScriptPayloadRequestCode2.create = function(input) {
      return input;
    };
    AptosScriptPayloadRequestCode2.fromJSON = function(json) {
      return json;
    };
    return AptosScriptPayloadRequestCode2;
  }()
);
var AptosScriptPayloadRequest = (
  /** @class */
  function() {
    function AptosScriptPayloadRequest2(input) {
      this.type = input.type;
      this.code = AptosScriptPayloadRequestCode.create(input.code);
      this.typeArguments = input.typeArguments;
      this.arguments = input.arguments;
    }
    AptosScriptPayloadRequest2.create = function(input) {
      if (input instanceof AptosScriptPayloadRequest2) {
        return input;
      }
      return new AptosScriptPayloadRequest2(input);
    };
    AptosScriptPayloadRequest2.fromJSON = function(json) {
      var input = {
        type: json.type,
        code: AptosScriptPayloadRequestCode.fromJSON(json.code),
        typeArguments: json.type_arguments,
        arguments: json.arguments
      };
      return AptosScriptPayloadRequest2.create(input);
    };
    AptosScriptPayloadRequest2.isInput = function(input) {
      return ["type", "code", "typeArguments", "arguments"].every(function(name) {
        return input[name] !== void 0;
      });
    };
    AptosScriptPayloadRequest2.isJSON = function(json) {
      return ["type", "code", "type_arguments", "arguments"].every(function(name) {
        return json[name] !== void 0;
      });
    };
    AptosScriptPayloadRequest2.prototype.toJSON = function() {
      return {
        type: this.type,
        code: this.code,
        type_arguments: this.typeArguments,
        arguments: this.arguments
      };
    };
    return AptosScriptPayloadRequest2;
  }()
);
var AptosModuleBundlePayloadRequest = (
  /** @class */
  function() {
    function AptosModuleBundlePayloadRequest2(input) {
      this.type = input.type;
      this.modules = input.modules;
    }
    AptosModuleBundlePayloadRequest2.create = function(input) {
      if (input instanceof AptosModuleBundlePayloadRequest2) {
        return input;
      }
      return new AptosModuleBundlePayloadRequest2(input);
    };
    AptosModuleBundlePayloadRequest2.fromJSON = function(json) {
      var input = {
        type: json.type,
        modules: json.modules
      };
      return AptosModuleBundlePayloadRequest2.create(input);
    };
    AptosModuleBundlePayloadRequest2.isInput = function(input) {
      return ["type", "modules"].every(function(name) {
        return input[name] !== void 0;
      });
    };
    AptosModuleBundlePayloadRequest2.isJSON = function(json) {
      return ["type", "modules"].every(function(name) {
        return json[name] !== void 0;
      });
    };
    AptosModuleBundlePayloadRequest2.prototype.toJSON = function() {
      return {
        type: this.type,
        modules: this.modules
      };
    };
    return AptosModuleBundlePayloadRequest2;
  }()
);
var AptosPendingTransactionPayload = (
  /** @class */
  function() {
    function AptosPendingTransactionPayload2() {
    }
    AptosPendingTransactionPayload2.create = function(input) {
      if (AptosEntryFunctionPayloadRequest.isInput(input)) {
        return AptosEntryFunctionPayloadRequest.create(input);
      }
      if (AptosScriptPayloadRequest.isInput(input)) {
        return AptosScriptPayloadRequest.create(input);
      }
      if (AptosModuleBundlePayloadRequest.isInput(input)) {
        return AptosModuleBundlePayloadRequest.create(input);
      }
      throw new Error("Cannot resolve union from AptosPendingTransactionPayloadInput");
    };
    AptosPendingTransactionPayload2.fromJSON = function(json) {
      if (AptosEntryFunctionPayloadRequest.isJSON(json)) {
        return AptosEntryFunctionPayloadRequest.fromJSON(json);
      }
      if (AptosScriptPayloadRequest.isJSON(json)) {
        return AptosScriptPayloadRequest.fromJSON(json);
      }
      if (AptosModuleBundlePayloadRequest.isJSON(json)) {
        return AptosModuleBundlePayloadRequest.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosPendingTransactionPayloadJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosPendingTransactionPayload2.toJSON = function(value) {
      if (value instanceof AptosEntryFunctionPayloadRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosScriptPayloadRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosModuleBundlePayloadRequest) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosPendingTransactionPayloadValue");
    };
    return AptosPendingTransactionPayload2;
  }()
);
var AptosEd25519SignatureRequest = (
  /** @class */
  function() {
    function AptosEd25519SignatureRequest2(input) {
      this.type = input.type;
      this.signature = input.signature;
      this.publicKey = input.publicKey;
    }
    AptosEd25519SignatureRequest2.create = function(input) {
      if (input instanceof AptosEd25519SignatureRequest2) {
        return input;
      }
      return new AptosEd25519SignatureRequest2(input);
    };
    AptosEd25519SignatureRequest2.fromJSON = function(json) {
      var input = {
        type: json.type,
        signature: json.signature,
        publicKey: json.public_key
      };
      return AptosEd25519SignatureRequest2.create(input);
    };
    AptosEd25519SignatureRequest2.isInput = function(input) {
      return ["type", "signature", "publicKey"].every(function(name) {
        return input[name] !== void 0;
      });
    };
    AptosEd25519SignatureRequest2.isJSON = function(json) {
      return ["type", "signature", "public_key"].every(function(name) {
        return json[name] !== void 0;
      });
    };
    AptosEd25519SignatureRequest2.prototype.toJSON = function() {
      return {
        type: this.type,
        signature: this.signature,
        public_key: this.publicKey
      };
    };
    return AptosEd25519SignatureRequest2;
  }()
);
var AptosMultiEd25519SignatureRequest = (
  /** @class */
  function() {
    function AptosMultiEd25519SignatureRequest2(input) {
      this.type = input.type;
      this.publicKeys = input.publicKeys;
      this.signatures = input.signatures;
      this.threshold = input.threshold;
      this.bitmap = input.bitmap;
    }
    AptosMultiEd25519SignatureRequest2.create = function(input) {
      if (input instanceof AptosMultiEd25519SignatureRequest2) {
        return input;
      }
      return new AptosMultiEd25519SignatureRequest2(input);
    };
    AptosMultiEd25519SignatureRequest2.fromJSON = function(json) {
      var input = {
        type: json.type,
        publicKeys: json.public_keys,
        signatures: json.signatures,
        threshold: json.threshold,
        bitmap: json.bitmap
      };
      return AptosMultiEd25519SignatureRequest2.create(input);
    };
    AptosMultiEd25519SignatureRequest2.isInput = function(input) {
      return ["type", "publicKeys", "signatures", "threshold", "bitmap"].every(function(name) {
        return input[name] !== void 0;
      });
    };
    AptosMultiEd25519SignatureRequest2.isJSON = function(json) {
      return ["type", "public_keys", "signatures", "threshold", "bitmap"].every(function(name) {
        return json[name] !== void 0;
      });
    };
    AptosMultiEd25519SignatureRequest2.prototype.toJSON = function() {
      return {
        type: this.type,
        public_keys: this.publicKeys,
        signatures: this.signatures,
        threshold: this.threshold,
        bitmap: this.bitmap
      };
    };
    return AptosMultiEd25519SignatureRequest2;
  }()
);
var AptosMultiAgentSignatureRequestSecondarySigners = (
  /** @class */
  function() {
    function AptosMultiAgentSignatureRequestSecondarySigners2() {
    }
    AptosMultiAgentSignatureRequestSecondarySigners2.create = function(input) {
      if (AptosEd25519SignatureRequest.isInput(input)) {
        return AptosEd25519SignatureRequest.create(input);
      }
      if (AptosMultiEd25519SignatureRequest.isInput(input)) {
        return AptosMultiEd25519SignatureRequest.create(input);
      }
      throw new Error("Cannot resolve union from AptosMultiAgentSignatureRequestSecondarySignersInput");
    };
    AptosMultiAgentSignatureRequestSecondarySigners2.fromJSON = function(json) {
      if (AptosEd25519SignatureRequest.isJSON(json)) {
        return AptosEd25519SignatureRequest.fromJSON(json);
      }
      if (AptosMultiEd25519SignatureRequest.isJSON(json)) {
        return AptosMultiEd25519SignatureRequest.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosMultiAgentSignatureRequestSecondarySignersJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosMultiAgentSignatureRequestSecondarySigners2.toJSON = function(value) {
      if (value instanceof AptosEd25519SignatureRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosMultiEd25519SignatureRequest) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosMultiAgentSignatureRequestSecondarySignersValue");
    };
    return AptosMultiAgentSignatureRequestSecondarySigners2;
  }()
);
var AptosMultiAgentSignatureRequest = (
  /** @class */
  function() {
    function AptosMultiAgentSignatureRequest2(input) {
      this.type = input.type;
      this.sender = AptosAddress.create(input.sender);
      this.secondarySignerAddresses = input.secondarySignerAddresses;
      this.secondarySigners = AptosMultiAgentSignatureRequestSecondarySigners.create(input.secondarySigners);
    }
    AptosMultiAgentSignatureRequest2.create = function(input) {
      if (input instanceof AptosMultiAgentSignatureRequest2) {
        return input;
      }
      return new AptosMultiAgentSignatureRequest2(input);
    };
    AptosMultiAgentSignatureRequest2.fromJSON = function(json) {
      var input = {
        type: json.type,
        sender: AptosAddress.fromJSON(json.sender),
        secondarySignerAddresses: json.secondary_signer_addresses,
        secondarySigners: AptosMultiAgentSignatureRequestSecondarySigners.fromJSON(json.secondary_signers)
      };
      return AptosMultiAgentSignatureRequest2.create(input);
    };
    AptosMultiAgentSignatureRequest2.isInput = function(input) {
      return ["type", "sender", "secondarySignerAddresses", "secondarySigners"].every(function(name) {
        return input[name] !== void 0;
      });
    };
    AptosMultiAgentSignatureRequest2.isJSON = function(json) {
      return ["type", "sender", "secondary_signer_addresses", "secondary_signers"].every(function(name) {
        return json[name] !== void 0;
      });
    };
    AptosMultiAgentSignatureRequest2.prototype.toJSON = function() {
      return {
        type: this.type,
        sender: this.sender.toJSON(),
        secondary_signer_addresses: this.secondarySignerAddresses,
        secondary_signers: AptosMultiAgentSignatureRequestSecondarySigners.toJSON(this.secondarySigners)
      };
    };
    return AptosMultiAgentSignatureRequest2;
  }()
);
var AptosPendingTransactionSignature = (
  /** @class */
  function() {
    function AptosPendingTransactionSignature2() {
    }
    AptosPendingTransactionSignature2.create = function(input) {
      if (AptosEd25519SignatureRequest.isInput(input)) {
        return AptosEd25519SignatureRequest.create(input);
      }
      if (AptosMultiEd25519SignatureRequest.isInput(input)) {
        return AptosMultiEd25519SignatureRequest.create(input);
      }
      if (AptosMultiAgentSignatureRequest.isInput(input)) {
        return AptosMultiAgentSignatureRequest.create(input);
      }
      throw new Error("Cannot resolve union from AptosPendingTransactionSignatureInput");
    };
    AptosPendingTransactionSignature2.fromJSON = function(json) {
      if (AptosEd25519SignatureRequest.isJSON(json)) {
        return AptosEd25519SignatureRequest.fromJSON(json);
      }
      if (AptosMultiEd25519SignatureRequest.isJSON(json)) {
        return AptosMultiEd25519SignatureRequest.fromJSON(json);
      }
      if (AptosMultiAgentSignatureRequest.isJSON(json)) {
        return AptosMultiAgentSignatureRequest.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosPendingTransactionSignatureJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosPendingTransactionSignature2.toJSON = function(value) {
      if (value instanceof AptosEd25519SignatureRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosMultiEd25519SignatureRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosMultiAgentSignatureRequest) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosPendingTransactionSignatureValue");
    };
    return AptosPendingTransactionSignature2;
  }()
);
var AptosPendingTransaction = (
  /** @class */
  function() {
    function AptosPendingTransaction2(input) {
      this.hash = input.hash;
      this.sender = AptosAddress.create(input.sender);
      this.sequenceNumber = input.sequenceNumber;
      this.maxGasAmount = input.maxGasAmount;
      this.gasUnitPrice = input.gasUnitPrice;
      this.expirationTimestampSecs = input.expirationTimestampSecs;
      this.payload = AptosPendingTransactionPayload.create(input.payload);
      this.signature = AptosPendingTransactionSignature.create(input.signature);
    }
    AptosPendingTransaction2.create = function(input) {
      if (input instanceof AptosPendingTransaction2) {
        return input;
      }
      return new AptosPendingTransaction2(input);
    };
    AptosPendingTransaction2.fromJSON = function(json) {
      var input = {
        hash: json.hash,
        sender: AptosAddress.fromJSON(json.sender),
        sequenceNumber: json.sequence_number,
        maxGasAmount: json.max_gas_amount,
        gasUnitPrice: json.gas_unit_price,
        expirationTimestampSecs: json.expiration_timestamp_secs,
        payload: AptosPendingTransactionPayload.fromJSON(json.payload),
        signature: AptosPendingTransactionSignature.fromJSON(json.signature)
      };
      return AptosPendingTransaction2.create(input);
    };
    AptosPendingTransaction2.isInput = function(input) {
      return input.type === "pending_transaction";
    };
    AptosPendingTransaction2.isJSON = function(json) {
      return json.type === "pending_transaction";
    };
    AptosPendingTransaction2.prototype.toJSON = function() {
      return {
        hash: this.hash,
        sender: this.sender.toJSON(),
        sequence_number: this.sequenceNumber,
        max_gas_amount: this.maxGasAmount,
        gas_unit_price: this.gasUnitPrice,
        expiration_timestamp_secs: this.expirationTimestampSecs,
        payload: AptosPendingTransactionPayload.toJSON(this.payload),
        signature: AptosPendingTransactionSignature.toJSON(this.signature)
      };
    };
    return AptosPendingTransaction2;
  }()
);
var AptosDeleteModuleChangeModule = (
  /** @class */
  function() {
    function AptosDeleteModuleChangeModule2() {
    }
    AptosDeleteModuleChangeModule2.create = function(input) {
      return input;
    };
    AptosDeleteModuleChangeModule2.fromJSON = function(json) {
      return json;
    };
    return AptosDeleteModuleChangeModule2;
  }()
);
var AptosDeleteModuleChange = (
  /** @class */
  function() {
    function AptosDeleteModuleChange2(input) {
      this.type = input.type;
      this.address = AptosAddress.create(input.address);
      this.stateKeyHash = input.stateKeyHash;
      this.module = AptosDeleteModuleChangeModule.create(input.module);
    }
    AptosDeleteModuleChange2.create = function(input) {
      if (input instanceof AptosDeleteModuleChange2) {
        return input;
      }
      return new AptosDeleteModuleChange2(input);
    };
    AptosDeleteModuleChange2.fromJSON = function(json) {
      var input = {
        type: json.type,
        address: AptosAddress.fromJSON(json.address),
        stateKeyHash: json.state_key_hash,
        module: AptosDeleteModuleChangeModule.fromJSON(json.module)
      };
      return AptosDeleteModuleChange2.create(input);
    };
    AptosDeleteModuleChange2.isInput = function(input) {
      return input.type === "delete_module";
    };
    AptosDeleteModuleChange2.isJSON = function(json) {
      return json.type === "delete_module";
    };
    AptosDeleteModuleChange2.prototype.toJSON = function() {
      return {
        type: this.type,
        address: this.address.toJSON(),
        state_key_hash: this.stateKeyHash,
        module: this.module
      };
    };
    return AptosDeleteModuleChange2;
  }()
);
var AptosDeleteResourceChangeResource = (
  /** @class */
  function() {
    function AptosDeleteResourceChangeResource2() {
    }
    AptosDeleteResourceChangeResource2.create = function(input) {
      return input;
    };
    AptosDeleteResourceChangeResource2.fromJSON = function(json) {
      return json;
    };
    return AptosDeleteResourceChangeResource2;
  }()
);
var AptosDeleteResourceChange = (
  /** @class */
  function() {
    function AptosDeleteResourceChange2(input) {
      this.type = input.type;
      this.address = AptosAddress.create(input.address);
      this.stateKeyHash = input.stateKeyHash;
      this.resource = AptosDeleteResourceChangeResource.create(input.resource);
    }
    AptosDeleteResourceChange2.create = function(input) {
      if (input instanceof AptosDeleteResourceChange2) {
        return input;
      }
      return new AptosDeleteResourceChange2(input);
    };
    AptosDeleteResourceChange2.fromJSON = function(json) {
      var input = {
        type: json.type,
        address: AptosAddress.fromJSON(json.address),
        stateKeyHash: json.state_key_hash,
        resource: AptosDeleteResourceChangeResource.fromJSON(json.resource)
      };
      return AptosDeleteResourceChange2.create(input);
    };
    AptosDeleteResourceChange2.isInput = function(input) {
      return input.type === "delete_resource";
    };
    AptosDeleteResourceChange2.isJSON = function(json) {
      return json.type === "delete_resource";
    };
    AptosDeleteResourceChange2.prototype.toJSON = function() {
      return {
        type: this.type,
        address: this.address.toJSON(),
        state_key_hash: this.stateKeyHash,
        resource: this.resource
      };
    };
    return AptosDeleteResourceChange2;
  }()
);
var AptosDeleteTableItemChangeHandle = (
  /** @class */
  function() {
    function AptosDeleteTableItemChangeHandle2() {
    }
    AptosDeleteTableItemChangeHandle2.create = function(input) {
      return input;
    };
    AptosDeleteTableItemChangeHandle2.fromJSON = function(json) {
      return json;
    };
    return AptosDeleteTableItemChangeHandle2;
  }()
);
var AptosDeleteTableItemChangeKey = (
  /** @class */
  function() {
    function AptosDeleteTableItemChangeKey2() {
    }
    AptosDeleteTableItemChangeKey2.create = function(input) {
      return input;
    };
    AptosDeleteTableItemChangeKey2.fromJSON = function(json) {
      return json;
    };
    return AptosDeleteTableItemChangeKey2;
  }()
);
var AptosDeletedTableData = (
  /** @class */
  function() {
    function AptosDeletedTableData2(input) {
      this.key = input.key;
      this.keyType = input.keyType;
    }
    AptosDeletedTableData2.create = function(input) {
      if (input instanceof AptosDeletedTableData2) {
        return input;
      }
      return new AptosDeletedTableData2(input);
    };
    AptosDeletedTableData2.fromJSON = function(json) {
      var input = {
        key: json.key,
        keyType: json.key_type
      };
      return AptosDeletedTableData2.create(input);
    };
    AptosDeletedTableData2.prototype.toJSON = function() {
      return {
        key: this.key,
        key_type: this.keyType
      };
    };
    return AptosDeletedTableData2;
  }()
);
var AptosDeleteTableItemChange = (
  /** @class */
  function() {
    function AptosDeleteTableItemChange2(input) {
      this.type = input.type;
      this.stateKeyHash = input.stateKeyHash;
      this.handle = AptosDeleteTableItemChangeHandle.create(input.handle);
      this.key = AptosDeleteTableItemChangeKey.create(input.key);
      this.data = AptosDeletedTableData.create(input.data);
    }
    AptosDeleteTableItemChange2.create = function(input) {
      if (input instanceof AptosDeleteTableItemChange2) {
        return input;
      }
      return new AptosDeleteTableItemChange2(input);
    };
    AptosDeleteTableItemChange2.fromJSON = function(json) {
      var input = {
        type: json.type,
        stateKeyHash: json.state_key_hash,
        handle: AptosDeleteTableItemChangeHandle.fromJSON(json.handle),
        key: AptosDeleteTableItemChangeKey.fromJSON(json.key),
        data: AptosDeletedTableData.fromJSON(json.data)
      };
      return AptosDeleteTableItemChange2.create(input);
    };
    AptosDeleteTableItemChange2.isInput = function(input) {
      return input.type === "delete_table_item";
    };
    AptosDeleteTableItemChange2.isJSON = function(json) {
      return json.type === "delete_table_item";
    };
    AptosDeleteTableItemChange2.prototype.toJSON = function() {
      return {
        type: this.type,
        state_key_hash: this.stateKeyHash,
        handle: this.handle,
        key: this.key,
        data: this.data.toJSON()
      };
    };
    return AptosDeleteTableItemChange2;
  }()
);
var AptosWriteModuleData = (
  /** @class */
  function() {
    function AptosWriteModuleData2(input) {
      this.bytecode = input.bytecode;
      this.abi = AptosMoveModuleAbi.create(input.abi);
    }
    AptosWriteModuleData2.create = function(input) {
      if (input instanceof AptosWriteModuleData2) {
        return input;
      }
      return new AptosWriteModuleData2(input);
    };
    AptosWriteModuleData2.fromJSON = function(json) {
      var input = {
        bytecode: json.bytecode,
        abi: AptosMoveModuleAbi.fromJSON(json.abi)
      };
      return AptosWriteModuleData2.create(input);
    };
    AptosWriteModuleData2.prototype.toJSON = function() {
      return {
        bytecode: this.bytecode,
        abi: this.abi.toJSON()
      };
    };
    return AptosWriteModuleData2;
  }()
);
var AptosWriteOrUpdateModuleChange = (
  /** @class */
  function() {
    function AptosWriteOrUpdateModuleChange2(input) {
      this.type = input.type;
      this.address = AptosAddress.create(input.address);
      this.stateKeyHash = input.stateKeyHash;
      this.data = AptosWriteModuleData.create(input.data);
    }
    AptosWriteOrUpdateModuleChange2.create = function(input) {
      if (input instanceof AptosWriteOrUpdateModuleChange2) {
        return input;
      }
      return new AptosWriteOrUpdateModuleChange2(input);
    };
    AptosWriteOrUpdateModuleChange2.fromJSON = function(json) {
      var input = {
        type: json.type,
        address: AptosAddress.fromJSON(json.address),
        stateKeyHash: json.state_key_hash,
        data: AptosWriteModuleData.fromJSON(json.data)
      };
      return AptosWriteOrUpdateModuleChange2.create(input);
    };
    AptosWriteOrUpdateModuleChange2.isInput = function(input) {
      return input.type === "write_module";
    };
    AptosWriteOrUpdateModuleChange2.isJSON = function(json) {
      return json.type === "write_module";
    };
    AptosWriteOrUpdateModuleChange2.prototype.toJSON = function() {
      return {
        type: this.type,
        address: this.address.toJSON(),
        state_key_hash: this.stateKeyHash,
        data: this.data.toJSON()
      };
    };
    return AptosWriteOrUpdateModuleChange2;
  }()
);
var AptosWriteResourceDataData = (
  /** @class */
  function() {
    function AptosWriteResourceDataData2() {
    }
    AptosWriteResourceDataData2.create = function(input) {
      return input;
    };
    AptosWriteResourceDataData2.fromJSON = function(json) {
      return json;
    };
    return AptosWriteResourceDataData2;
  }()
);
var AptosWriteResourceData = (
  /** @class */
  function() {
    function AptosWriteResourceData2(input) {
      this.type = input.type;
      this.data = AptosWriteResourceDataData.create(input.data);
    }
    AptosWriteResourceData2.create = function(input) {
      if (input instanceof AptosWriteResourceData2) {
        return input;
      }
      return new AptosWriteResourceData2(input);
    };
    AptosWriteResourceData2.fromJSON = function(json) {
      var input = {
        type: json.type,
        data: AptosWriteResourceDataData.fromJSON(json.data)
      };
      return AptosWriteResourceData2.create(input);
    };
    AptosWriteResourceData2.prototype.toJSON = function() {
      return {
        type: this.type,
        data: this.data
      };
    };
    return AptosWriteResourceData2;
  }()
);
var AptosWriteResourceChange = (
  /** @class */
  function() {
    function AptosWriteResourceChange2(input) {
      this.type = input.type;
      this.address = AptosAddress.create(input.address);
      this.stateKeyHash = input.stateKeyHash;
      this.data = AptosWriteResourceData.create(input.data);
    }
    AptosWriteResourceChange2.create = function(input) {
      if (input instanceof AptosWriteResourceChange2) {
        return input;
      }
      return new AptosWriteResourceChange2(input);
    };
    AptosWriteResourceChange2.fromJSON = function(json) {
      var input = {
        type: json.type,
        address: AptosAddress.fromJSON(json.address),
        stateKeyHash: json.state_key_hash,
        data: AptosWriteResourceData.fromJSON(json.data)
      };
      return AptosWriteResourceChange2.create(input);
    };
    AptosWriteResourceChange2.isInput = function(input) {
      return input.type === "write_resource";
    };
    AptosWriteResourceChange2.isJSON = function(json) {
      return json.type === "write_resource";
    };
    AptosWriteResourceChange2.prototype.toJSON = function() {
      return {
        type: this.type,
        address: this.address.toJSON(),
        state_key_hash: this.stateKeyHash,
        data: this.data.toJSON()
      };
    };
    return AptosWriteResourceChange2;
  }()
);
var AptosDecodedTableData = (
  /** @class */
  function() {
    function AptosDecodedTableData2(input) {
      this.key = input.key;
      this.keyType = input.keyType;
      this.value = input.value;
      this.valueType = input.valueType;
    }
    AptosDecodedTableData2.create = function(input) {
      if (input instanceof AptosDecodedTableData2) {
        return input;
      }
      return new AptosDecodedTableData2(input);
    };
    AptosDecodedTableData2.fromJSON = function(json) {
      var input = {
        key: json.key,
        keyType: json.key_type,
        value: json.value,
        valueType: json.value_type
      };
      return AptosDecodedTableData2.create(input);
    };
    AptosDecodedTableData2.prototype.toJSON = function() {
      return {
        key: this.key,
        key_type: this.keyType,
        value: this.value,
        value_type: this.valueType
      };
    };
    return AptosDecodedTableData2;
  }()
);
var AptosWriteTableChangeSetChange = (
  /** @class */
  function() {
    function AptosWriteTableChangeSetChange2(input) {
      this.type = input.type;
      this.stateKeyHash = input.stateKeyHash;
      this.handle = input.handle;
      this.key = input.key;
      this.value = input.value;
      this.data = AptosDecodedTableData.create(input.data);
    }
    AptosWriteTableChangeSetChange2.create = function(input) {
      if (input instanceof AptosWriteTableChangeSetChange2) {
        return input;
      }
      return new AptosWriteTableChangeSetChange2(input);
    };
    AptosWriteTableChangeSetChange2.fromJSON = function(json) {
      var input = {
        type: json.type,
        stateKeyHash: json.state_key_hash,
        handle: json.handle,
        key: json.key,
        value: json.value,
        data: AptosDecodedTableData.fromJSON(json.data)
      };
      return AptosWriteTableChangeSetChange2.create(input);
    };
    AptosWriteTableChangeSetChange2.isInput = function(input) {
      return input.type === "write_table_item";
    };
    AptosWriteTableChangeSetChange2.isJSON = function(json) {
      return json.type === "write_table_item";
    };
    AptosWriteTableChangeSetChange2.prototype.toJSON = function() {
      return {
        type: this.type,
        state_key_hash: this.stateKeyHash,
        handle: this.handle,
        key: this.key,
        value: this.value,
        data: this.data.toJSON()
      };
    };
    return AptosWriteTableChangeSetChange2;
  }()
);
var AptosUserTransactionChangesItem = (
  /** @class */
  function() {
    function AptosUserTransactionChangesItem2() {
    }
    AptosUserTransactionChangesItem2.create = function(input) {
      if (AptosDeleteModuleChange.isInput(input)) {
        return AptosDeleteModuleChange.create(input);
      }
      if (AptosDeleteResourceChange.isInput(input)) {
        return AptosDeleteResourceChange.create(input);
      }
      if (AptosDeleteTableItemChange.isInput(input)) {
        return AptosDeleteTableItemChange.create(input);
      }
      if (AptosWriteOrUpdateModuleChange.isInput(input)) {
        return AptosWriteOrUpdateModuleChange.create(input);
      }
      if (AptosWriteResourceChange.isInput(input)) {
        return AptosWriteResourceChange.create(input);
      }
      if (AptosWriteTableChangeSetChange.isInput(input)) {
        return AptosWriteTableChangeSetChange.create(input);
      }
      throw new Error("Cannot resolve union from AptosUserTransactionChangesItemInput");
    };
    AptosUserTransactionChangesItem2.fromJSON = function(json) {
      if (AptosDeleteModuleChange.isJSON(json)) {
        return AptosDeleteModuleChange.fromJSON(json);
      }
      if (AptosDeleteResourceChange.isJSON(json)) {
        return AptosDeleteResourceChange.fromJSON(json);
      }
      if (AptosDeleteTableItemChange.isJSON(json)) {
        return AptosDeleteTableItemChange.fromJSON(json);
      }
      if (AptosWriteOrUpdateModuleChange.isJSON(json)) {
        return AptosWriteOrUpdateModuleChange.fromJSON(json);
      }
      if (AptosWriteResourceChange.isJSON(json)) {
        return AptosWriteResourceChange.fromJSON(json);
      }
      if (AptosWriteTableChangeSetChange.isJSON(json)) {
        return AptosWriteTableChangeSetChange.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosUserTransactionChangesItemJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosUserTransactionChangesItem2.toJSON = function(value) {
      if (value instanceof AptosDeleteModuleChange) {
        return value.toJSON();
      }
      if (value instanceof AptosDeleteResourceChange) {
        return value.toJSON();
      }
      if (value instanceof AptosDeleteTableItemChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteOrUpdateModuleChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteResourceChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteTableChangeSetChange) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosUserTransactionChangesItemValue");
    };
    return AptosUserTransactionChangesItem2;
  }()
);
var AptosUserTransactionPayload = (
  /** @class */
  function() {
    function AptosUserTransactionPayload2() {
    }
    AptosUserTransactionPayload2.create = function(input) {
      if (AptosEntryFunctionPayloadRequest.isInput(input)) {
        return AptosEntryFunctionPayloadRequest.create(input);
      }
      if (AptosScriptPayloadRequest.isInput(input)) {
        return AptosScriptPayloadRequest.create(input);
      }
      if (AptosModuleBundlePayloadRequest.isInput(input)) {
        return AptosModuleBundlePayloadRequest.create(input);
      }
      throw new Error("Cannot resolve union from AptosUserTransactionPayloadInput");
    };
    AptosUserTransactionPayload2.fromJSON = function(json) {
      if (AptosEntryFunctionPayloadRequest.isJSON(json)) {
        return AptosEntryFunctionPayloadRequest.fromJSON(json);
      }
      if (AptosScriptPayloadRequest.isJSON(json)) {
        return AptosScriptPayloadRequest.fromJSON(json);
      }
      if (AptosModuleBundlePayloadRequest.isJSON(json)) {
        return AptosModuleBundlePayloadRequest.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosUserTransactionPayloadJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosUserTransactionPayload2.toJSON = function(value) {
      if (value instanceof AptosEntryFunctionPayloadRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosScriptPayloadRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosModuleBundlePayloadRequest) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosUserTransactionPayloadValue");
    };
    return AptosUserTransactionPayload2;
  }()
);
var AptosUserTransactionSignature = (
  /** @class */
  function() {
    function AptosUserTransactionSignature2() {
    }
    AptosUserTransactionSignature2.create = function(input) {
      if (AptosEd25519SignatureRequest.isInput(input)) {
        return AptosEd25519SignatureRequest.create(input);
      }
      if (AptosMultiEd25519SignatureRequest.isInput(input)) {
        return AptosMultiEd25519SignatureRequest.create(input);
      }
      if (AptosMultiAgentSignatureRequest.isInput(input)) {
        return AptosMultiAgentSignatureRequest.create(input);
      }
      throw new Error("Cannot resolve union from AptosUserTransactionSignatureInput");
    };
    AptosUserTransactionSignature2.fromJSON = function(json) {
      if (AptosEd25519SignatureRequest.isJSON(json)) {
        return AptosEd25519SignatureRequest.fromJSON(json);
      }
      if (AptosMultiEd25519SignatureRequest.isJSON(json)) {
        return AptosMultiEd25519SignatureRequest.fromJSON(json);
      }
      if (AptosMultiAgentSignatureRequest.isJSON(json)) {
        return AptosMultiAgentSignatureRequest.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosUserTransactionSignatureJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosUserTransactionSignature2.toJSON = function(value) {
      if (value instanceof AptosEd25519SignatureRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosMultiEd25519SignatureRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosMultiAgentSignatureRequest) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosUserTransactionSignatureValue");
    };
    return AptosUserTransactionSignature2;
  }()
);
var AptosTransactionEventData = (
  /** @class */
  function() {
    function AptosTransactionEventData2() {
    }
    AptosTransactionEventData2.create = function(input) {
      return input;
    };
    AptosTransactionEventData2.fromJSON = function(json) {
      return json;
    };
    return AptosTransactionEventData2;
  }()
);
var AptosTransactionEvent = (
  /** @class */
  function() {
    function AptosTransactionEvent2(input) {
      this.guid = AptosTransactionEventGuid.create(input.guid);
      this.sequenceNumber = input.sequenceNumber;
      this.type = input.type;
      this.data = AptosTransactionEventData.create(input.data);
    }
    AptosTransactionEvent2.create = function(input) {
      if (input instanceof AptosTransactionEvent2) {
        return input;
      }
      return new AptosTransactionEvent2(input);
    };
    AptosTransactionEvent2.fromJSON = function(json) {
      var input = {
        guid: AptosTransactionEventGuid.fromJSON(json.guid),
        sequenceNumber: json.sequence_number,
        type: json.type,
        data: AptosTransactionEventData.fromJSON(json.data)
      };
      return AptosTransactionEvent2.create(input);
    };
    AptosTransactionEvent2.prototype.toJSON = function() {
      return {
        guid: this.guid.toJSON(),
        sequence_number: this.sequenceNumber,
        type: this.type,
        data: this.data
      };
    };
    return AptosTransactionEvent2;
  }()
);
var AptosUserTransaction = (
  /** @class */
  function() {
    function AptosUserTransaction2(input) {
      this.type = input.type;
      this.version = input.version;
      this.hash = input.hash;
      this.stateChangeHash = input.stateChangeHash;
      this.eventRootHash = input.eventRootHash;
      this.stateCheckpointHash = input.stateCheckpointHash;
      this.gasUsed = input.gasUsed;
      this.success = input.success;
      this.vmStatus = input.vmStatus;
      this.accumulatorRootHash = input.accumulatorRootHash;
      this.changes = input.changes.map(function(item) {
        return AptosUserTransactionChangesItem.create(item);
      });
      this.sender = AptosAddress.create(input.sender);
      this.sequenceNumber = input.sequenceNumber;
      this.maxGasAmount = input.maxGasAmount;
      this.gasUnitPrice = input.gasUnitPrice;
      this.expirationTimestampSecs = input.expirationTimestampSecs;
      this.payload = AptosUserTransactionPayload.create(input.payload);
      this.signature = AptosUserTransactionSignature.create(input.signature);
      this.events = input.events.map(function(item) {
        return AptosTransactionEvent.create(item);
      });
      this.timestamp = input.timestamp;
    }
    AptosUserTransaction2.create = function(input) {
      if (input instanceof AptosUserTransaction2) {
        return input;
      }
      return new AptosUserTransaction2(input);
    };
    AptosUserTransaction2.fromJSON = function(json) {
      var input = {
        type: json.type,
        version: json.version,
        hash: json.hash,
        stateChangeHash: json.state_change_hash,
        eventRootHash: json.event_root_hash,
        stateCheckpointHash: json.state_checkpoint_hash,
        gasUsed: json.gas_used,
        success: json.success,
        vmStatus: json.vm_status,
        accumulatorRootHash: json.accumulator_root_hash,
        changes: json.changes.map(function(item) {
          return AptosUserTransactionChangesItem.fromJSON(item);
        }),
        sender: AptosAddress.fromJSON(json.sender),
        sequenceNumber: json.sequence_number,
        maxGasAmount: json.max_gas_amount,
        gasUnitPrice: json.gas_unit_price,
        expirationTimestampSecs: json.expiration_timestamp_secs,
        payload: AptosUserTransactionPayload.fromJSON(json.payload),
        signature: AptosUserTransactionSignature.fromJSON(json.signature),
        events: json.events.map(function(item) {
          return AptosTransactionEvent.fromJSON(item);
        }),
        timestamp: json.timestamp
      };
      return AptosUserTransaction2.create(input);
    };
    AptosUserTransaction2.isInput = function(input) {
      return input.type === "user_transaction";
    };
    AptosUserTransaction2.isJSON = function(json) {
      return json.type === "user_transaction";
    };
    AptosUserTransaction2.prototype.toJSON = function() {
      return {
        type: this.type,
        version: this.version,
        hash: this.hash,
        state_change_hash: this.stateChangeHash,
        event_root_hash: this.eventRootHash,
        state_checkpoint_hash: this.stateCheckpointHash,
        gas_used: this.gasUsed,
        success: this.success,
        vm_status: this.vmStatus,
        accumulator_root_hash: this.accumulatorRootHash,
        changes: this.changes.map(function(item) {
          return AptosUserTransactionChangesItem.toJSON(item);
        }),
        sender: this.sender.toJSON(),
        sequence_number: this.sequenceNumber,
        max_gas_amount: this.maxGasAmount,
        gas_unit_price: this.gasUnitPrice,
        expiration_timestamp_secs: this.expirationTimestampSecs,
        payload: AptosUserTransactionPayload.toJSON(this.payload),
        signature: AptosUserTransactionSignature.toJSON(this.signature),
        events: this.events.map(function(item) {
          return item.toJSON();
        }),
        timestamp: this.timestamp
      };
    };
    return AptosUserTransaction2;
  }()
);
var AptosGenesisTransactionChangesItem = (
  /** @class */
  function() {
    function AptosGenesisTransactionChangesItem2() {
    }
    AptosGenesisTransactionChangesItem2.create = function(input) {
      if (AptosDeleteModuleChange.isInput(input)) {
        return AptosDeleteModuleChange.create(input);
      }
      if (AptosDeleteResourceChange.isInput(input)) {
        return AptosDeleteResourceChange.create(input);
      }
      if (AptosDeleteTableItemChange.isInput(input)) {
        return AptosDeleteTableItemChange.create(input);
      }
      if (AptosWriteOrUpdateModuleChange.isInput(input)) {
        return AptosWriteOrUpdateModuleChange.create(input);
      }
      if (AptosWriteResourceChange.isInput(input)) {
        return AptosWriteResourceChange.create(input);
      }
      if (AptosWriteTableChangeSetChange.isInput(input)) {
        return AptosWriteTableChangeSetChange.create(input);
      }
      throw new Error("Cannot resolve union from AptosGenesisTransactionChangesItemInput");
    };
    AptosGenesisTransactionChangesItem2.fromJSON = function(json) {
      if (AptosDeleteModuleChange.isJSON(json)) {
        return AptosDeleteModuleChange.fromJSON(json);
      }
      if (AptosDeleteResourceChange.isJSON(json)) {
        return AptosDeleteResourceChange.fromJSON(json);
      }
      if (AptosDeleteTableItemChange.isJSON(json)) {
        return AptosDeleteTableItemChange.fromJSON(json);
      }
      if (AptosWriteOrUpdateModuleChange.isJSON(json)) {
        return AptosWriteOrUpdateModuleChange.fromJSON(json);
      }
      if (AptosWriteResourceChange.isJSON(json)) {
        return AptosWriteResourceChange.fromJSON(json);
      }
      if (AptosWriteTableChangeSetChange.isJSON(json)) {
        return AptosWriteTableChangeSetChange.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosGenesisTransactionChangesItemJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosGenesisTransactionChangesItem2.toJSON = function(value) {
      if (value instanceof AptosDeleteModuleChange) {
        return value.toJSON();
      }
      if (value instanceof AptosDeleteResourceChange) {
        return value.toJSON();
      }
      if (value instanceof AptosDeleteTableItemChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteOrUpdateModuleChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteResourceChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteTableChangeSetChange) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosGenesisTransactionChangesItemValue");
    };
    return AptosGenesisTransactionChangesItem2;
  }()
);
var AptosScriptWriteSet = (
  /** @class */
  function() {
    function AptosScriptWriteSet2(input) {
      this.type = input.type;
      this.executeAs = input.executeAs;
      this.script = AptosScriptPayloadRequest.create(input.script);
    }
    AptosScriptWriteSet2.create = function(input) {
      if (input instanceof AptosScriptWriteSet2) {
        return input;
      }
      return new AptosScriptWriteSet2(input);
    };
    AptosScriptWriteSet2.fromJSON = function(json) {
      var input = {
        type: json.type,
        executeAs: json.execute_as,
        script: AptosScriptPayloadRequest.fromJSON(json.script)
      };
      return AptosScriptWriteSet2.create(input);
    };
    AptosScriptWriteSet2.isInput = function(input) {
      return input.type === "script_write_set";
    };
    AptosScriptWriteSet2.isJSON = function(json) {
      return json.type === "script_write_set";
    };
    AptosScriptWriteSet2.prototype.toJSON = function() {
      return {
        type: this.type,
        execute_as: this.executeAs,
        script: this.script.toJSON()
      };
    };
    return AptosScriptWriteSet2;
  }()
);
var AptosDirectWriteSet = (
  /** @class */
  function() {
    function AptosDirectWriteSet2(input) {
      this.type = input.type;
      this.changes = input.changes;
      this.events = input.events.map(function(item) {
        return AptosTransactionEvent.create(item);
      });
    }
    AptosDirectWriteSet2.create = function(input) {
      if (input instanceof AptosDirectWriteSet2) {
        return input;
      }
      return new AptosDirectWriteSet2(input);
    };
    AptosDirectWriteSet2.fromJSON = function(json) {
      var input = {
        type: json.type,
        changes: json.changes,
        events: json.events.map(function(item) {
          return AptosTransactionEvent.fromJSON(item);
        })
      };
      return AptosDirectWriteSet2.create(input);
    };
    AptosDirectWriteSet2.isInput = function(input) {
      return input.type === "direct_write_set";
    };
    AptosDirectWriteSet2.isJSON = function(json) {
      return json.type === "direct_write_set";
    };
    AptosDirectWriteSet2.prototype.toJSON = function() {
      return {
        type: this.type,
        changes: this.changes,
        events: this.events.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosDirectWriteSet2;
  }()
);
var AptosWriteSetPayloadWriteSet = (
  /** @class */
  function() {
    function AptosWriteSetPayloadWriteSet2() {
    }
    AptosWriteSetPayloadWriteSet2.create = function(input) {
      if (AptosScriptWriteSet.isInput(input)) {
        return AptosScriptWriteSet.create(input);
      }
      if (AptosDirectWriteSet.isInput(input)) {
        return AptosDirectWriteSet.create(input);
      }
      throw new Error("Cannot resolve union from AptosWriteSetPayloadWriteSetInput");
    };
    AptosWriteSetPayloadWriteSet2.fromJSON = function(json) {
      if (AptosScriptWriteSet.isJSON(json)) {
        return AptosScriptWriteSet.fromJSON(json);
      }
      if (AptosDirectWriteSet.isJSON(json)) {
        return AptosDirectWriteSet.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosWriteSetPayloadWriteSetJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosWriteSetPayloadWriteSet2.toJSON = function(value) {
      if (value instanceof AptosScriptWriteSet) {
        return value.toJSON();
      }
      if (value instanceof AptosDirectWriteSet) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosWriteSetPayloadWriteSetValue");
    };
    return AptosWriteSetPayloadWriteSet2;
  }()
);
var AptosWriteSetPayload = (
  /** @class */
  function() {
    function AptosWriteSetPayload2(input) {
      this.type = input.type;
      this.writeSet = AptosWriteSetPayloadWriteSet.create(input.writeSet);
    }
    AptosWriteSetPayload2.create = function(input) {
      if (input instanceof AptosWriteSetPayload2) {
        return input;
      }
      return new AptosWriteSetPayload2(input);
    };
    AptosWriteSetPayload2.fromJSON = function(json) {
      var input = {
        type: json.type,
        writeSet: AptosWriteSetPayloadWriteSet.fromJSON(json.write_set)
      };
      return AptosWriteSetPayload2.create(input);
    };
    AptosWriteSetPayload2.prototype.toJSON = function() {
      return {
        type: this.type,
        write_set: AptosWriteSetPayloadWriteSet.toJSON(this.writeSet)
      };
    };
    return AptosWriteSetPayload2;
  }()
);
var AptosGenesisTransaction = (
  /** @class */
  function() {
    function AptosGenesisTransaction2(input) {
      this.type = input.type;
      this.version = input.version;
      this.hash = input.hash;
      this.stateChangeHash = input.stateChangeHash;
      this.eventRootHash = input.eventRootHash;
      this.stateCheckpointHash = input.stateCheckpointHash;
      this.gasUsed = input.gasUsed;
      this.success = input.success;
      this.vmStatus = input.vmStatus;
      this.accumulatorRootHash = input.accumulatorRootHash;
      this.changes = input.changes.map(function(item) {
        return AptosGenesisTransactionChangesItem.create(item);
      });
      this.payload = AptosWriteSetPayload.create(input.payload);
      this.events = input.events.map(function(item) {
        return AptosTransactionEvent.create(item);
      });
    }
    AptosGenesisTransaction2.create = function(input) {
      if (input instanceof AptosGenesisTransaction2) {
        return input;
      }
      return new AptosGenesisTransaction2(input);
    };
    AptosGenesisTransaction2.fromJSON = function(json) {
      var input = {
        type: json.type,
        version: json.version,
        hash: json.hash,
        stateChangeHash: json.state_change_hash,
        eventRootHash: json.event_root_hash,
        stateCheckpointHash: json.state_checkpoint_hash,
        gasUsed: json.gas_used,
        success: json.success,
        vmStatus: json.vm_status,
        accumulatorRootHash: json.accumulator_root_hash,
        changes: json.changes.map(function(item) {
          return AptosGenesisTransactionChangesItem.fromJSON(item);
        }),
        payload: AptosWriteSetPayload.fromJSON(json.payload),
        events: json.events.map(function(item) {
          return AptosTransactionEvent.fromJSON(item);
        })
      };
      return AptosGenesisTransaction2.create(input);
    };
    AptosGenesisTransaction2.isInput = function(input) {
      return input.type === "genesis_transaction";
    };
    AptosGenesisTransaction2.isJSON = function(json) {
      return json.type === "genesis_transaction";
    };
    AptosGenesisTransaction2.prototype.toJSON = function() {
      return {
        type: this.type,
        version: this.version,
        hash: this.hash,
        state_change_hash: this.stateChangeHash,
        event_root_hash: this.eventRootHash,
        state_checkpoint_hash: this.stateCheckpointHash,
        gas_used: this.gasUsed,
        success: this.success,
        vm_status: this.vmStatus,
        accumulator_root_hash: this.accumulatorRootHash,
        changes: this.changes.map(function(item) {
          return AptosGenesisTransactionChangesItem.toJSON(item);
        }),
        payload: this.payload.toJSON(),
        events: this.events.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGenesisTransaction2;
  }()
);
var AptosBlockMetadataTransactionChangesItem = (
  /** @class */
  function() {
    function AptosBlockMetadataTransactionChangesItem2() {
    }
    AptosBlockMetadataTransactionChangesItem2.create = function(input) {
      if (AptosDeleteModuleChange.isInput(input)) {
        return AptosDeleteModuleChange.create(input);
      }
      if (AptosDeleteResourceChange.isInput(input)) {
        return AptosDeleteResourceChange.create(input);
      }
      if (AptosDeleteTableItemChange.isInput(input)) {
        return AptosDeleteTableItemChange.create(input);
      }
      if (AptosWriteOrUpdateModuleChange.isInput(input)) {
        return AptosWriteOrUpdateModuleChange.create(input);
      }
      if (AptosWriteResourceChange.isInput(input)) {
        return AptosWriteResourceChange.create(input);
      }
      if (AptosWriteTableChangeSetChange.isInput(input)) {
        return AptosWriteTableChangeSetChange.create(input);
      }
      throw new Error("Cannot resolve union from AptosBlockMetadataTransactionChangesItemInput");
    };
    AptosBlockMetadataTransactionChangesItem2.fromJSON = function(json) {
      if (AptosDeleteModuleChange.isJSON(json)) {
        return AptosDeleteModuleChange.fromJSON(json);
      }
      if (AptosDeleteResourceChange.isJSON(json)) {
        return AptosDeleteResourceChange.fromJSON(json);
      }
      if (AptosDeleteTableItemChange.isJSON(json)) {
        return AptosDeleteTableItemChange.fromJSON(json);
      }
      if (AptosWriteOrUpdateModuleChange.isJSON(json)) {
        return AptosWriteOrUpdateModuleChange.fromJSON(json);
      }
      if (AptosWriteResourceChange.isJSON(json)) {
        return AptosWriteResourceChange.fromJSON(json);
      }
      if (AptosWriteTableChangeSetChange.isJSON(json)) {
        return AptosWriteTableChangeSetChange.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosBlockMetadataTransactionChangesItemJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosBlockMetadataTransactionChangesItem2.toJSON = function(value) {
      if (value instanceof AptosDeleteModuleChange) {
        return value.toJSON();
      }
      if (value instanceof AptosDeleteResourceChange) {
        return value.toJSON();
      }
      if (value instanceof AptosDeleteTableItemChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteOrUpdateModuleChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteResourceChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteTableChangeSetChange) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosBlockMetadataTransactionChangesItemValue");
    };
    return AptosBlockMetadataTransactionChangesItem2;
  }()
);
var AptosBlockMetadataTransaction = (
  /** @class */
  function() {
    function AptosBlockMetadataTransaction2(input) {
      this.type = input.type;
      this.version = input.version;
      this.hash = input.hash;
      this.stateChangeHash = input.stateChangeHash;
      this.eventRootHash = input.eventRootHash;
      this.stateCheckpointHash = input.stateCheckpointHash;
      this.gasUsed = input.gasUsed;
      this.success = input.success;
      this.vmStatus = input.vmStatus;
      this.accumulatorRootHash = input.accumulatorRootHash;
      this.changes = input.changes.map(function(item) {
        return AptosBlockMetadataTransactionChangesItem.create(item);
      });
      this.id = input.id;
      this.epoch = input.epoch;
      this.round = input.round;
      this.events = input.events.map(function(item) {
        return AptosTransactionEvent.create(item);
      });
      this.previousBlockVotesBitvec = input.previousBlockVotesBitvec;
      this.proposer = AptosAddress.create(input.proposer);
      this.failedProposerIndices = input.failedProposerIndices;
      this.timestamp = input.timestamp;
    }
    AptosBlockMetadataTransaction2.create = function(input) {
      if (input instanceof AptosBlockMetadataTransaction2) {
        return input;
      }
      return new AptosBlockMetadataTransaction2(input);
    };
    AptosBlockMetadataTransaction2.fromJSON = function(json) {
      var input = {
        type: json.type,
        version: json.version,
        hash: json.hash,
        stateChangeHash: json.state_change_hash,
        eventRootHash: json.event_root_hash,
        stateCheckpointHash: json.state_checkpoint_hash,
        gasUsed: json.gas_used,
        success: json.success,
        vmStatus: json.vm_status,
        accumulatorRootHash: json.accumulator_root_hash,
        changes: json.changes.map(function(item) {
          return AptosBlockMetadataTransactionChangesItem.fromJSON(item);
        }),
        id: json.id,
        epoch: json.epoch,
        round: json.round,
        events: json.events.map(function(item) {
          return AptosTransactionEvent.fromJSON(item);
        }),
        previousBlockVotesBitvec: json.previous_block_votes_bitvec,
        proposer: AptosAddress.fromJSON(json.proposer),
        failedProposerIndices: json.failed_proposer_indices,
        timestamp: json.timestamp
      };
      return AptosBlockMetadataTransaction2.create(input);
    };
    AptosBlockMetadataTransaction2.isInput = function(input) {
      return input.type === "block_metadata_transaction";
    };
    AptosBlockMetadataTransaction2.isJSON = function(json) {
      return json.type === "block_metadata_transaction";
    };
    AptosBlockMetadataTransaction2.prototype.toJSON = function() {
      return {
        type: this.type,
        version: this.version,
        hash: this.hash,
        state_change_hash: this.stateChangeHash,
        event_root_hash: this.eventRootHash,
        state_checkpoint_hash: this.stateCheckpointHash,
        gas_used: this.gasUsed,
        success: this.success,
        vm_status: this.vmStatus,
        accumulator_root_hash: this.accumulatorRootHash,
        changes: this.changes.map(function(item) {
          return AptosBlockMetadataTransactionChangesItem.toJSON(item);
        }),
        id: this.id,
        epoch: this.epoch,
        round: this.round,
        events: this.events.map(function(item) {
          return item.toJSON();
        }),
        previous_block_votes_bitvec: this.previousBlockVotesBitvec,
        proposer: this.proposer.toJSON(),
        failed_proposer_indices: this.failedProposerIndices,
        timestamp: this.timestamp
      };
    };
    return AptosBlockMetadataTransaction2;
  }()
);
var AptosStateCheckpointTransactionChangesItem = (
  /** @class */
  function() {
    function AptosStateCheckpointTransactionChangesItem2() {
    }
    AptosStateCheckpointTransactionChangesItem2.create = function(input) {
      if (AptosDeleteModuleChange.isInput(input)) {
        return AptosDeleteModuleChange.create(input);
      }
      if (AptosDeleteResourceChange.isInput(input)) {
        return AptosDeleteResourceChange.create(input);
      }
      if (AptosDeleteTableItemChange.isInput(input)) {
        return AptosDeleteTableItemChange.create(input);
      }
      if (AptosWriteOrUpdateModuleChange.isInput(input)) {
        return AptosWriteOrUpdateModuleChange.create(input);
      }
      if (AptosWriteResourceChange.isInput(input)) {
        return AptosWriteResourceChange.create(input);
      }
      if (AptosWriteTableChangeSetChange.isInput(input)) {
        return AptosWriteTableChangeSetChange.create(input);
      }
      throw new Error("Cannot resolve union from AptosStateCheckpointTransactionChangesItemInput");
    };
    AptosStateCheckpointTransactionChangesItem2.fromJSON = function(json) {
      if (AptosDeleteModuleChange.isJSON(json)) {
        return AptosDeleteModuleChange.fromJSON(json);
      }
      if (AptosDeleteResourceChange.isJSON(json)) {
        return AptosDeleteResourceChange.fromJSON(json);
      }
      if (AptosDeleteTableItemChange.isJSON(json)) {
        return AptosDeleteTableItemChange.fromJSON(json);
      }
      if (AptosWriteOrUpdateModuleChange.isJSON(json)) {
        return AptosWriteOrUpdateModuleChange.fromJSON(json);
      }
      if (AptosWriteResourceChange.isJSON(json)) {
        return AptosWriteResourceChange.fromJSON(json);
      }
      if (AptosWriteTableChangeSetChange.isJSON(json)) {
        return AptosWriteTableChangeSetChange.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosStateCheckpointTransactionChangesItemJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosStateCheckpointTransactionChangesItem2.toJSON = function(value) {
      if (value instanceof AptosDeleteModuleChange) {
        return value.toJSON();
      }
      if (value instanceof AptosDeleteResourceChange) {
        return value.toJSON();
      }
      if (value instanceof AptosDeleteTableItemChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteOrUpdateModuleChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteResourceChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteTableChangeSetChange) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosStateCheckpointTransactionChangesItemValue");
    };
    return AptosStateCheckpointTransactionChangesItem2;
  }()
);
var AptosStateCheckpointTransaction = (
  /** @class */
  function() {
    function AptosStateCheckpointTransaction2(input) {
      this.type = input.type;
      this.version = input.version;
      this.hash = input.hash;
      this.stateChangeHash = input.stateChangeHash;
      this.eventRootHash = input.eventRootHash;
      this.stateCheckpointHash = input.stateCheckpointHash;
      this.gasUsed = input.gasUsed;
      this.success = input.success;
      this.vmStatus = input.vmStatus;
      this.accumulatorRootHash = input.accumulatorRootHash;
      this.changes = input.changes.map(function(item) {
        return AptosStateCheckpointTransactionChangesItem.create(item);
      });
      this.timestamp = input.timestamp;
    }
    AptosStateCheckpointTransaction2.create = function(input) {
      if (input instanceof AptosStateCheckpointTransaction2) {
        return input;
      }
      return new AptosStateCheckpointTransaction2(input);
    };
    AptosStateCheckpointTransaction2.fromJSON = function(json) {
      var input = {
        type: json.type,
        version: json.version,
        hash: json.hash,
        stateChangeHash: json.state_change_hash,
        eventRootHash: json.event_root_hash,
        stateCheckpointHash: json.state_checkpoint_hash,
        gasUsed: json.gas_used,
        success: json.success,
        vmStatus: json.vm_status,
        accumulatorRootHash: json.accumulator_root_hash,
        changes: json.changes.map(function(item) {
          return AptosStateCheckpointTransactionChangesItem.fromJSON(item);
        }),
        timestamp: json.timestamp
      };
      return AptosStateCheckpointTransaction2.create(input);
    };
    AptosStateCheckpointTransaction2.isInput = function(input) {
      return input.type === "state_checkpoint_transaction";
    };
    AptosStateCheckpointTransaction2.isJSON = function(json) {
      return json.type === "state_checkpoint_transaction";
    };
    AptosStateCheckpointTransaction2.prototype.toJSON = function() {
      return {
        type: this.type,
        version: this.version,
        hash: this.hash,
        state_change_hash: this.stateChangeHash,
        event_root_hash: this.eventRootHash,
        state_checkpoint_hash: this.stateCheckpointHash,
        gas_used: this.gasUsed,
        success: this.success,
        vm_status: this.vmStatus,
        accumulator_root_hash: this.accumulatorRootHash,
        changes: this.changes.map(function(item) {
          return AptosStateCheckpointTransactionChangesItem.toJSON(item);
        }),
        timestamp: this.timestamp
      };
    };
    return AptosStateCheckpointTransaction2;
  }()
);
var AptosGetTransactionsItem = (
  /** @class */
  function() {
    function AptosGetTransactionsItem2() {
    }
    AptosGetTransactionsItem2.create = function(input) {
      if (AptosPendingTransaction.isInput(input)) {
        return AptosPendingTransaction.create(input);
      }
      if (AptosUserTransaction.isInput(input)) {
        return AptosUserTransaction.create(input);
      }
      if (AptosGenesisTransaction.isInput(input)) {
        return AptosGenesisTransaction.create(input);
      }
      if (AptosBlockMetadataTransaction.isInput(input)) {
        return AptosBlockMetadataTransaction.create(input);
      }
      if (AptosStateCheckpointTransaction.isInput(input)) {
        return AptosStateCheckpointTransaction.create(input);
      }
      throw new Error("Cannot resolve union from AptosGetTransactionsItemInput");
    };
    AptosGetTransactionsItem2.fromJSON = function(json) {
      if (AptosPendingTransaction.isJSON(json)) {
        return AptosPendingTransaction.fromJSON(json);
      }
      if (AptosUserTransaction.isJSON(json)) {
        return AptosUserTransaction.fromJSON(json);
      }
      if (AptosGenesisTransaction.isJSON(json)) {
        return AptosGenesisTransaction.fromJSON(json);
      }
      if (AptosBlockMetadataTransaction.isJSON(json)) {
        return AptosBlockMetadataTransaction.fromJSON(json);
      }
      if (AptosStateCheckpointTransaction.isJSON(json)) {
        return AptosStateCheckpointTransaction.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosGetTransactionsItemJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosGetTransactionsItem2.toJSON = function(value) {
      if (value instanceof AptosPendingTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosUserTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosGenesisTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosBlockMetadataTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosStateCheckpointTransaction) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosGetTransactionsItemValue");
    };
    return AptosGetTransactionsItem2;
  }()
);
var GetTransactionsOperation = {
  operationId: "getTransactions",
  groupName: "transactions",
  httpMethod: "get",
  routePattern: "/transactions",
  parameterNames: ["limit", "start", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return AptosGetTransactionsItem.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var start = request.start;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      start,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosSubmitTransactionRequestPayload = (
  /** @class */
  function() {
    function AptosSubmitTransactionRequestPayload2() {
    }
    AptosSubmitTransactionRequestPayload2.create = function(input) {
      if (AptosEntryFunctionPayloadRequest.isInput(input)) {
        return AptosEntryFunctionPayloadRequest.create(input);
      }
      if (AptosScriptPayloadRequest.isInput(input)) {
        return AptosScriptPayloadRequest.create(input);
      }
      if (AptosModuleBundlePayloadRequest.isInput(input)) {
        return AptosModuleBundlePayloadRequest.create(input);
      }
      throw new Error("Cannot resolve union from AptosSubmitTransactionRequestPayloadInput");
    };
    AptosSubmitTransactionRequestPayload2.fromJSON = function(json) {
      if (AptosEntryFunctionPayloadRequest.isJSON(json)) {
        return AptosEntryFunctionPayloadRequest.fromJSON(json);
      }
      if (AptosScriptPayloadRequest.isJSON(json)) {
        return AptosScriptPayloadRequest.fromJSON(json);
      }
      if (AptosModuleBundlePayloadRequest.isJSON(json)) {
        return AptosModuleBundlePayloadRequest.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosSubmitTransactionRequestPayloadJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosSubmitTransactionRequestPayload2.toJSON = function(value) {
      if (value instanceof AptosEntryFunctionPayloadRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosScriptPayloadRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosModuleBundlePayloadRequest) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosSubmitTransactionRequestPayloadValue");
    };
    return AptosSubmitTransactionRequestPayload2;
  }()
);
var AptosSubmitTransactionRequestSignature = (
  /** @class */
  function() {
    function AptosSubmitTransactionRequestSignature2() {
    }
    AptosSubmitTransactionRequestSignature2.create = function(input) {
      if (AptosEd25519SignatureRequest.isInput(input)) {
        return AptosEd25519SignatureRequest.create(input);
      }
      if (AptosMultiEd25519SignatureRequest.isInput(input)) {
        return AptosMultiEd25519SignatureRequest.create(input);
      }
      if (AptosMultiAgentSignatureRequest.isInput(input)) {
        return AptosMultiAgentSignatureRequest.create(input);
      }
      throw new Error("Cannot resolve union from AptosSubmitTransactionRequestSignatureInput");
    };
    AptosSubmitTransactionRequestSignature2.fromJSON = function(json) {
      if (AptosEd25519SignatureRequest.isJSON(json)) {
        return AptosEd25519SignatureRequest.fromJSON(json);
      }
      if (AptosMultiEd25519SignatureRequest.isJSON(json)) {
        return AptosMultiEd25519SignatureRequest.fromJSON(json);
      }
      if (AptosMultiAgentSignatureRequest.isJSON(json)) {
        return AptosMultiAgentSignatureRequest.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosSubmitTransactionRequestSignatureJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosSubmitTransactionRequestSignature2.toJSON = function(value) {
      if (value instanceof AptosEd25519SignatureRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosMultiEd25519SignatureRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosMultiAgentSignatureRequest) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosSubmitTransactionRequestSignatureValue");
    };
    return AptosSubmitTransactionRequestSignature2;
  }()
);
var AptosSubmitTransactionRequest = (
  /** @class */
  function() {
    function AptosSubmitTransactionRequest2(input) {
      this.sender = AptosAddress.create(input.sender);
      this.sequenceNumber = input.sequenceNumber;
      this.maxGasAmount = input.maxGasAmount;
      this.gasUnitPrice = input.gasUnitPrice;
      this.expirationTimestampSecs = input.expirationTimestampSecs;
      this.payload = AptosSubmitTransactionRequestPayload.create(input.payload);
      this.signature = AptosSubmitTransactionRequestSignature.create(input.signature);
    }
    AptosSubmitTransactionRequest2.create = function(input) {
      if (input instanceof AptosSubmitTransactionRequest2) {
        return input;
      }
      return new AptosSubmitTransactionRequest2(input);
    };
    AptosSubmitTransactionRequest2.fromJSON = function(json) {
      var input = {
        sender: AptosAddress.fromJSON(json.sender),
        sequenceNumber: json.sequence_number,
        maxGasAmount: json.max_gas_amount,
        gasUnitPrice: json.gas_unit_price,
        expirationTimestampSecs: json.expiration_timestamp_secs,
        payload: AptosSubmitTransactionRequestPayload.fromJSON(json.payload),
        signature: AptosSubmitTransactionRequestSignature.fromJSON(json.signature)
      };
      return AptosSubmitTransactionRequest2.create(input);
    };
    AptosSubmitTransactionRequest2.prototype.toJSON = function() {
      return {
        sender: this.sender.toJSON(),
        sequence_number: this.sequenceNumber,
        max_gas_amount: this.maxGasAmount,
        gas_unit_price: this.gasUnitPrice,
        expiration_timestamp_secs: this.expirationTimestampSecs,
        payload: AptosSubmitTransactionRequestPayload.toJSON(this.payload),
        signature: AptosSubmitTransactionRequestSignature.toJSON(this.signature)
      };
    };
    return AptosSubmitTransactionRequest2;
  }()
);
var SubmitTransactionOperation = {
  operationId: "submitTransaction",
  groupName: "transactions",
  httpMethod: "post",
  routePattern: "/transactions",
  parameterNames: ["network"],
  hasResponse: true,
  hasBody: true,
  parseResponse: function(json) {
    return AptosPendingTransaction.fromJSON(json);
  },
  serializeRequest: function(request) {
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      network: network ? network.toJSON() : void 0
    };
  },
  serializeBody: function(body) {
    var value = AptosSubmitTransactionRequest.create(body);
    return value.toJSON();
  }
};
var AptosGetTransactionByHash = (
  /** @class */
  function() {
    function AptosGetTransactionByHash2() {
    }
    AptosGetTransactionByHash2.create = function(input) {
      if (AptosPendingTransaction.isInput(input)) {
        return AptosPendingTransaction.create(input);
      }
      if (AptosUserTransaction.isInput(input)) {
        return AptosUserTransaction.create(input);
      }
      if (AptosGenesisTransaction.isInput(input)) {
        return AptosGenesisTransaction.create(input);
      }
      if (AptosBlockMetadataTransaction.isInput(input)) {
        return AptosBlockMetadataTransaction.create(input);
      }
      if (AptosStateCheckpointTransaction.isInput(input)) {
        return AptosStateCheckpointTransaction.create(input);
      }
      throw new Error("Cannot resolve union from AptosGetTransactionByHashInput");
    };
    AptosGetTransactionByHash2.fromJSON = function(json) {
      if (AptosPendingTransaction.isJSON(json)) {
        return AptosPendingTransaction.fromJSON(json);
      }
      if (AptosUserTransaction.isJSON(json)) {
        return AptosUserTransaction.fromJSON(json);
      }
      if (AptosGenesisTransaction.isJSON(json)) {
        return AptosGenesisTransaction.fromJSON(json);
      }
      if (AptosBlockMetadataTransaction.isJSON(json)) {
        return AptosBlockMetadataTransaction.fromJSON(json);
      }
      if (AptosStateCheckpointTransaction.isJSON(json)) {
        return AptosStateCheckpointTransaction.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosGetTransactionByHashJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosGetTransactionByHash2.toJSON = function(value) {
      if (value instanceof AptosPendingTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosUserTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosGenesisTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosBlockMetadataTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosStateCheckpointTransaction) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosGetTransactionByHashValue");
    };
    return AptosGetTransactionByHash2;
  }()
);
var GetTransactionByHashOperation = {
  operationId: "getTransactionByHash",
  groupName: "transactions",
  httpMethod: "get",
  routePattern: "/transactions/by_hash/{txn_hash}",
  parameterNames: ["txn_hash", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetTransactionByHash.fromJSON(json);
  },
  serializeRequest: function(request) {
    var txnHash = request.txnHash;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      txn_hash: txnHash,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetTransactionByVersion = (
  /** @class */
  function() {
    function AptosGetTransactionByVersion2() {
    }
    AptosGetTransactionByVersion2.create = function(input) {
      if (AptosPendingTransaction.isInput(input)) {
        return AptosPendingTransaction.create(input);
      }
      if (AptosUserTransaction.isInput(input)) {
        return AptosUserTransaction.create(input);
      }
      if (AptosGenesisTransaction.isInput(input)) {
        return AptosGenesisTransaction.create(input);
      }
      if (AptosBlockMetadataTransaction.isInput(input)) {
        return AptosBlockMetadataTransaction.create(input);
      }
      if (AptosStateCheckpointTransaction.isInput(input)) {
        return AptosStateCheckpointTransaction.create(input);
      }
      throw new Error("Cannot resolve union from AptosGetTransactionByVersionInput");
    };
    AptosGetTransactionByVersion2.fromJSON = function(json) {
      if (AptosPendingTransaction.isJSON(json)) {
        return AptosPendingTransaction.fromJSON(json);
      }
      if (AptosUserTransaction.isJSON(json)) {
        return AptosUserTransaction.fromJSON(json);
      }
      if (AptosGenesisTransaction.isJSON(json)) {
        return AptosGenesisTransaction.fromJSON(json);
      }
      if (AptosBlockMetadataTransaction.isJSON(json)) {
        return AptosBlockMetadataTransaction.fromJSON(json);
      }
      if (AptosStateCheckpointTransaction.isJSON(json)) {
        return AptosStateCheckpointTransaction.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosGetTransactionByVersionJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosGetTransactionByVersion2.toJSON = function(value) {
      if (value instanceof AptosPendingTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosUserTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosGenesisTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosBlockMetadataTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosStateCheckpointTransaction) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosGetTransactionByVersionValue");
    };
    return AptosGetTransactionByVersion2;
  }()
);
var GetTransactionByVersionOperation = {
  operationId: "getTransactionByVersion",
  groupName: "transactions",
  httpMethod: "get",
  routePattern: "/transactions/by_version/{txn_version}",
  parameterNames: ["txn_version", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetTransactionByVersion.fromJSON(json);
  },
  serializeRequest: function(request) {
    var txnVersion = request.txnVersion;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      txn_version: txnVersion,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetAccountTransactionsItem = (
  /** @class */
  function() {
    function AptosGetAccountTransactionsItem2() {
    }
    AptosGetAccountTransactionsItem2.create = function(input) {
      if (AptosPendingTransaction.isInput(input)) {
        return AptosPendingTransaction.create(input);
      }
      if (AptosUserTransaction.isInput(input)) {
        return AptosUserTransaction.create(input);
      }
      if (AptosGenesisTransaction.isInput(input)) {
        return AptosGenesisTransaction.create(input);
      }
      if (AptosBlockMetadataTransaction.isInput(input)) {
        return AptosBlockMetadataTransaction.create(input);
      }
      if (AptosStateCheckpointTransaction.isInput(input)) {
        return AptosStateCheckpointTransaction.create(input);
      }
      throw new Error("Cannot resolve union from AptosGetAccountTransactionsItemInput");
    };
    AptosGetAccountTransactionsItem2.fromJSON = function(json) {
      if (AptosPendingTransaction.isJSON(json)) {
        return AptosPendingTransaction.fromJSON(json);
      }
      if (AptosUserTransaction.isJSON(json)) {
        return AptosUserTransaction.fromJSON(json);
      }
      if (AptosGenesisTransaction.isJSON(json)) {
        return AptosGenesisTransaction.fromJSON(json);
      }
      if (AptosBlockMetadataTransaction.isJSON(json)) {
        return AptosBlockMetadataTransaction.fromJSON(json);
      }
      if (AptosStateCheckpointTransaction.isJSON(json)) {
        return AptosStateCheckpointTransaction.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosGetAccountTransactionsItemJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosGetAccountTransactionsItem2.toJSON = function(value) {
      if (value instanceof AptosPendingTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosUserTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosGenesisTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosBlockMetadataTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosStateCheckpointTransaction) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosGetAccountTransactionsItemValue");
    };
    return AptosGetAccountTransactionsItem2;
  }()
);
var GetAccountTransactionsOperation = {
  operationId: "getAccountTransactions",
  groupName: "transactions",
  httpMethod: "get",
  routePattern: "/accounts/{address}/transactions",
  parameterNames: ["address", "limit", "start", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return AptosGetAccountTransactionsItem.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var address = request.address;
    var limit = request.limit;
    var start = request.start;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      address,
      limit,
      start,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosSubmitBatchTransactionResult = (
  /** @class */
  function() {
    function AptosSubmitBatchTransactionResult2(input) {
      this.transactionFailures = input.transactionFailures;
    }
    AptosSubmitBatchTransactionResult2.create = function(input) {
      if (input instanceof AptosSubmitBatchTransactionResult2) {
        return input;
      }
      return new AptosSubmitBatchTransactionResult2(input);
    };
    AptosSubmitBatchTransactionResult2.fromJSON = function(json) {
      var input = {
        transactionFailures: json.transaction_failures
      };
      return AptosSubmitBatchTransactionResult2.create(input);
    };
    AptosSubmitBatchTransactionResult2.prototype.toJSON = function() {
      return {
        transaction_failures: this.transactionFailures
      };
    };
    return AptosSubmitBatchTransactionResult2;
  }()
);
var SubmitBatchTransactionsOperation = {
  operationId: "submitBatchTransactions",
  groupName: "transactions",
  httpMethod: "post",
  routePattern: "/transactions/batch",
  parameterNames: ["network"],
  hasResponse: true,
  hasBody: true,
  parseResponse: function(json) {
    return AptosSubmitBatchTransactionResult.fromJSON(json);
  },
  serializeRequest: function(request) {
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      network: network ? network.toJSON() : void 0
    };
  },
  serializeBody: function(body) {
    var value = body.map(function(item) {
      return AptosSubmitTransactionRequest.create(item);
    });
    return value.map(function(item) {
      return item.toJSON();
    });
  }
};
var AptosSimulateTransaction = (
  /** @class */
  function() {
    function AptosSimulateTransaction2() {
    }
    AptosSimulateTransaction2.create = function(input) {
      if (AptosPendingTransaction.isInput(input)) {
        return AptosPendingTransaction.create(input);
      }
      if (AptosUserTransaction.isInput(input)) {
        return AptosUserTransaction.create(input);
      }
      if (AptosGenesisTransaction.isInput(input)) {
        return AptosGenesisTransaction.create(input);
      }
      if (AptosBlockMetadataTransaction.isInput(input)) {
        return AptosBlockMetadataTransaction.create(input);
      }
      if (AptosStateCheckpointTransaction.isInput(input)) {
        return AptosStateCheckpointTransaction.create(input);
      }
      throw new Error("Cannot resolve union from AptosSimulateTransactionInput");
    };
    AptosSimulateTransaction2.fromJSON = function(json) {
      if (AptosPendingTransaction.isJSON(json)) {
        return AptosPendingTransaction.fromJSON(json);
      }
      if (AptosUserTransaction.isJSON(json)) {
        return AptosUserTransaction.fromJSON(json);
      }
      if (AptosGenesisTransaction.isJSON(json)) {
        return AptosGenesisTransaction.fromJSON(json);
      }
      if (AptosBlockMetadataTransaction.isJSON(json)) {
        return AptosBlockMetadataTransaction.fromJSON(json);
      }
      if (AptosStateCheckpointTransaction.isJSON(json)) {
        return AptosStateCheckpointTransaction.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosSimulateTransactionJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosSimulateTransaction2.toJSON = function(value) {
      if (value instanceof AptosPendingTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosUserTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosGenesisTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosBlockMetadataTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosStateCheckpointTransaction) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosSimulateTransactionValue");
    };
    return AptosSimulateTransaction2;
  }()
);
var SimulateTransactionOperation = {
  operationId: "simulateTransaction",
  groupName: "transactions",
  httpMethod: "post",
  routePattern: "/transactions/simulate",
  parameterNames: ["network"],
  hasResponse: true,
  hasBody: true,
  parseResponse: function(json) {
    return AptosSimulateTransaction.fromJSON(json);
  },
  serializeRequest: function(request) {
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      network: network ? network.toJSON() : void 0
    };
  },
  serializeBody: function(body) {
    var value = AptosSubmitTransactionRequest.create(body);
    return value.toJSON();
  }
};
var AptosEncodeSubmissionRequestPayload = (
  /** @class */
  function() {
    function AptosEncodeSubmissionRequestPayload2() {
    }
    AptosEncodeSubmissionRequestPayload2.create = function(input) {
      if (AptosEntryFunctionPayloadRequest.isInput(input)) {
        return AptosEntryFunctionPayloadRequest.create(input);
      }
      if (AptosScriptPayloadRequest.isInput(input)) {
        return AptosScriptPayloadRequest.create(input);
      }
      if (AptosModuleBundlePayloadRequest.isInput(input)) {
        return AptosModuleBundlePayloadRequest.create(input);
      }
      throw new Error("Cannot resolve union from AptosEncodeSubmissionRequestPayloadInput");
    };
    AptosEncodeSubmissionRequestPayload2.fromJSON = function(json) {
      if (AptosEntryFunctionPayloadRequest.isJSON(json)) {
        return AptosEntryFunctionPayloadRequest.fromJSON(json);
      }
      if (AptosScriptPayloadRequest.isJSON(json)) {
        return AptosScriptPayloadRequest.fromJSON(json);
      }
      if (AptosModuleBundlePayloadRequest.isJSON(json)) {
        return AptosModuleBundlePayloadRequest.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosEncodeSubmissionRequestPayloadJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosEncodeSubmissionRequestPayload2.toJSON = function(value) {
      if (value instanceof AptosEntryFunctionPayloadRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosScriptPayloadRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosModuleBundlePayloadRequest) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosEncodeSubmissionRequestPayloadValue");
    };
    return AptosEncodeSubmissionRequestPayload2;
  }()
);
var AptosEncodeSubmissionRequest = (
  /** @class */
  function() {
    function AptosEncodeSubmissionRequest2(input) {
      this.sender = AptosAddress.create(input.sender);
      this.sequenceNumber = input.sequenceNumber;
      this.maxGasAmount = input.maxGasAmount;
      this.gasUnitPrice = input.gasUnitPrice;
      this.expirationTimestampSecs = input.expirationTimestampSecs;
      this.payload = AptosEncodeSubmissionRequestPayload.create(input.payload);
      this.secondarySigners = input.secondarySigners;
    }
    AptosEncodeSubmissionRequest2.create = function(input) {
      if (input instanceof AptosEncodeSubmissionRequest2) {
        return input;
      }
      return new AptosEncodeSubmissionRequest2(input);
    };
    AptosEncodeSubmissionRequest2.fromJSON = function(json) {
      var input = {
        sender: AptosAddress.fromJSON(json.sender),
        sequenceNumber: json.sequence_number,
        maxGasAmount: json.max_gas_amount,
        gasUnitPrice: json.gas_unit_price,
        expirationTimestampSecs: json.expiration_timestamp_secs,
        payload: AptosEncodeSubmissionRequestPayload.fromJSON(json.payload),
        secondarySigners: json.secondary_signers
      };
      return AptosEncodeSubmissionRequest2.create(input);
    };
    AptosEncodeSubmissionRequest2.prototype.toJSON = function() {
      return {
        sender: this.sender.toJSON(),
        sequence_number: this.sequenceNumber,
        max_gas_amount: this.maxGasAmount,
        gas_unit_price: this.gasUnitPrice,
        expiration_timestamp_secs: this.expirationTimestampSecs,
        payload: AptosEncodeSubmissionRequestPayload.toJSON(this.payload),
        secondary_signers: this.secondarySigners
      };
    };
    return AptosEncodeSubmissionRequest2;
  }()
);
var EncodeSubmissionOperation = {
  operationId: "encodeSubmission",
  groupName: "transactions",
  httpMethod: "post",
  routePattern: "/transactions/encode_submission",
  parameterNames: ["network"],
  hasResponse: true,
  hasBody: true,
  parseResponse: function(json) {
    return json;
  },
  serializeRequest: function(request) {
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      network: network ? network.toJSON() : void 0
    };
  },
  serializeBody: function(body) {
    var value = AptosEncodeSubmissionRequest.create(body);
    return value.toJSON();
  }
};
var AptosEstimateGasPriceResult = (
  /** @class */
  function() {
    function AptosEstimateGasPriceResult2(input) {
      this.deprioritizedGasEstimate = input.deprioritizedGasEstimate;
      this.gasEstimate = input.gasEstimate;
      this.prioritizedGasEstimate = input.prioritizedGasEstimate;
    }
    AptosEstimateGasPriceResult2.create = function(input) {
      if (input instanceof AptosEstimateGasPriceResult2) {
        return input;
      }
      return new AptosEstimateGasPriceResult2(input);
    };
    AptosEstimateGasPriceResult2.fromJSON = function(json) {
      var input = {
        deprioritizedGasEstimate: json.deprioritized_gas_estimate,
        gasEstimate: json.gas_estimate,
        prioritizedGasEstimate: json.prioritized_gas_estimate
      };
      return AptosEstimateGasPriceResult2.create(input);
    };
    AptosEstimateGasPriceResult2.prototype.toJSON = function() {
      return {
        deprioritized_gas_estimate: this.deprioritizedGasEstimate,
        gas_estimate: this.gasEstimate,
        prioritized_gas_estimate: this.prioritizedGasEstimate
      };
    };
    return AptosEstimateGasPriceResult2;
  }()
);
var EstimateGasPriceOperation = {
  operationId: "estimateGasPrice",
  groupName: "transactions",
  httpMethod: "get",
  routePattern: "/transactions/estimate_gas_price",
  parameterNames: ["network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosEstimateGasPriceResult.fromJSON(json);
  },
  serializeRequest: function(request) {
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosBlockTransactionsItem = (
  /** @class */
  function() {
    function AptosBlockTransactionsItem2() {
    }
    AptosBlockTransactionsItem2.create = function(input) {
      if (AptosPendingTransaction.isInput(input)) {
        return AptosPendingTransaction.create(input);
      }
      if (AptosUserTransaction.isInput(input)) {
        return AptosUserTransaction.create(input);
      }
      if (AptosGenesisTransaction.isInput(input)) {
        return AptosGenesisTransaction.create(input);
      }
      if (AptosBlockMetadataTransaction.isInput(input)) {
        return AptosBlockMetadataTransaction.create(input);
      }
      if (AptosStateCheckpointTransaction.isInput(input)) {
        return AptosStateCheckpointTransaction.create(input);
      }
      throw new Error("Cannot resolve union from AptosBlockTransactionsItemInput");
    };
    AptosBlockTransactionsItem2.fromJSON = function(json) {
      if (AptosPendingTransaction.isJSON(json)) {
        return AptosPendingTransaction.fromJSON(json);
      }
      if (AptosUserTransaction.isJSON(json)) {
        return AptosUserTransaction.fromJSON(json);
      }
      if (AptosGenesisTransaction.isJSON(json)) {
        return AptosGenesisTransaction.fromJSON(json);
      }
      if (AptosBlockMetadataTransaction.isJSON(json)) {
        return AptosBlockMetadataTransaction.fromJSON(json);
      }
      if (AptosStateCheckpointTransaction.isJSON(json)) {
        return AptosStateCheckpointTransaction.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosBlockTransactionsItemJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosBlockTransactionsItem2.toJSON = function(value) {
      if (value instanceof AptosPendingTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosUserTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosGenesisTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosBlockMetadataTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosStateCheckpointTransaction) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosBlockTransactionsItemValue");
    };
    return AptosBlockTransactionsItem2;
  }()
);
var AptosBlock = (
  /** @class */
  function() {
    function AptosBlock2(input) {
      this.blockHeight = input.blockHeight;
      this.blockHash = input.blockHash;
      this.blockTimestamp = input.blockTimestamp;
      this.firstVersion = input.firstVersion;
      this.lastVersion = input.lastVersion;
      this.transactions = input.transactions ? input.transactions.map(function(item) {
        return AptosBlockTransactionsItem.create(item);
      }) : void 0;
    }
    AptosBlock2.create = function(input) {
      if (input instanceof AptosBlock2) {
        return input;
      }
      return new AptosBlock2(input);
    };
    AptosBlock2.fromJSON = function(json) {
      var input = {
        blockHeight: json.block_height,
        blockHash: json.block_hash,
        blockTimestamp: json.block_timestamp,
        firstVersion: json.first_version,
        lastVersion: json.last_version,
        transactions: json.transactions ? json.transactions.map(function(item) {
          return AptosBlockTransactionsItem.fromJSON(item);
        }) : void 0
      };
      return AptosBlock2.create(input);
    };
    AptosBlock2.prototype.toJSON = function() {
      return {
        block_height: this.blockHeight,
        block_hash: this.blockHash,
        block_timestamp: this.blockTimestamp,
        first_version: this.firstVersion,
        last_version: this.lastVersion,
        transactions: this.transactions ? this.transactions.map(function(item) {
          return AptosBlockTransactionsItem.toJSON(item);
        }) : void 0
      };
    };
    return AptosBlock2;
  }()
);
var GetBlockByHeightOperation = {
  operationId: "getBlockByHeight",
  groupName: "blocks",
  httpMethod: "get",
  routePattern: "/blocks/{block_height}",
  parameterNames: ["block_height", "with_transactions", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosBlock.fromJSON(json);
  },
  serializeRequest: function(request) {
    var blockHeight = request.blockHeight;
    var withTransactions = request.withTransactions;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      block_height: blockHeight,
      with_transactions: withTransactions,
      network: network ? network.toJSON() : void 0
    };
  }
};
var GetBlockByVersionOperation = {
  operationId: "getBlockByVersion",
  groupName: "blocks",
  httpMethod: "get",
  routePattern: "/blocks/by_version/{version}",
  parameterNames: ["version", "with_transactions", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosBlock.fromJSON(json);
  },
  serializeRequest: function(request) {
    var version = request.version;
    var withTransactions = request.withTransactions;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      version,
      with_transactions: withTransactions,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AbstractClient = (
  /** @class */
  /* @__PURE__ */ function() {
    function AbstractClient2() {
      this.accounts = {
        /**
         * @description Get account
         * @param request Request with parameters.
         * @param {String} request.address Address of account with or without a 0x prefix
         * @param {String} [request.ledgerVersion] Ledger version to get state of account.
         * If not provided, it will be the latest version (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getAccount: this.createEndpoint(GetAccountOperation),
        /**
         * @description Get account resources
         * @param request Request with parameters.
         * @param {String} request.address Address of account with or without a 0x prefix
         * @param {String} [request.ledgerVersion] Ledger version to get state of account.
         * If not provided, it will be the latest version (optional)
         * @param {Number} [request.limit] Max number of account resources to retrieve.
         * If not provided, defaults to default page size. (optional)
         * @param {String} [request.start] Cursor specifying where to start for pagination
         * This cursor cannot be derived manually client-side. Instead, you must call this endpoint once without this query parameter specified, and then use the cursor returned in the X-Aptos-Cursor header in the response. (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object[]} Response for the request.
         */
        getAccountResources: this.createEndpoint(GetAccountResourcesOperation),
        /**
         * @description Get account modules
         * @param request Request with parameters.
         * @param {String} request.address Address of account with or without a 0x prefix
         * @param {String} [request.ledgerVersion] Ledger version to get state of account.
         * If not provided, it will be the latest version (optional)
         * @param {Number} [request.limit] Max number of account resources to retrieve.
         * If not provided, defaults to default page size. (optional)
         * @param {String} [request.start] Cursor specifying where to start for pagination
         * This cursor cannot be derived manually client-side. Instead, you must call this endpoint once without this query parameter specified, and then use the cursor returned in the X-Aptos-Cursor header in the response. (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object[]} Response for the request.
         */
        getAccountModules: this.createEndpoint(GetAccountModulesOperation),
        /**
         * @description Get account resource
         * @param request Request with parameters.
         * @param {String} request.address Address of account with or without a 0x prefix
         * @param {String} request.resourceType Name of struct to retrieve e.g. 0x1::account::Account
         * @param {String} [request.ledgerVersion] Ledger version to get state of account.
         * If not provided, it will be the latest version (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getAccountResource: this.createEndpoint(GetAccountResourceOperation),
        /**
         * @description Get account module
         * @param request Request with parameters.
         * @param {String} request.address Address of account with or without a 0x prefix
         * @param {String} request.moduleName Name of module to retrieve
         * @param {String} [request.ledgerVersion] Ledger version to get state of account.
         * If not provided, it will be the latest version (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getAccountModule: this.createEndpoint(GetAccountModuleOperation),
        /**
         * @description Get events by creation number
         * @param request Request with parameters.
         * @param {String} request.address Address of account with or without a 0x prefix
         * @param {String} request.creationNumber Creation number corresponding to the event stream originating from the given account.
         * @param {Number} [request.limit] Max number of account resources to retrieve.
         * If not provided, defaults to default page size. (optional)
         * @param {String} [request.start] Starting sequence number of events.
         * If unspecified, by default will retrieve the most recent events (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object[]} Response for the request.
         */
        getEventsByCreationNumber: this.createEndpoint(GetEventsByCreationNumberOperation),
        /**
         * @description Get events by event handle
         * @param request Request with parameters.
         * @param {String} request.address Hex-encoded 32 byte Aptos account, with or without a 0x prefix, for which events are queried. This refers to the account that events were emitted to, not the account hosting the move module that emits that event type.
         * @param {String} request.eventHandle Name of struct to lookup event handle.
         * @param {String} request.fieldName Name of field to lookup event handle.
         * @param {Number} [request.limit] Max number of account resources to retrieve.
         * If not provided, defaults to default page size. (optional)
         * @param {String} [request.start] Starting sequence number of events.
         * If unspecified, by default will retrieve the most recent events (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object[]} Response for the request.
         */
        getEventsByEventHandle: this.createEndpoint(GetEventsByEventHandleOperation)
      };
      this.blocks = {
        /**
         * @description Get block by height
         * @param request Request with parameters.
         * @param {Number} request.blockHeight Block height to lookup. Starts at 0
         * @param {Boolean} [request.withTransactions] If set to true, include all transactions in the block (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getBlockByHeight: this.createEndpoint(GetBlockByHeightOperation),
        /**
         * @description Get block by version
         * @param request Request with parameters.
         * @param {Number} request.version Ledger version to lookup block information for.
         * @param {Boolean} [request.withTransactions] If set to true, include all transactions in the block (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getBlockByVersion: this.createEndpoint(GetBlockByVersionOperation)
      };
      this.coins = {
        /**
         * @description Get Coin Metadata by Coin Type Hashes
         * @param request Request with parameters.
         * @param {String[]} request.coinTypeHashes The coin type hashes to fetch info about
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object[]} Response for the request.
         */
        getCoinInfoByCoinTypeHashes: this.createEndpoint(GetCoinInfoByCoinTypeHashesOperation),
        /**
         * @description Get latest deployed coins
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getLatestCoins: this.createEndpoint(GetLatestCoinsOperation),
        /**
         * @description Get Coin Metadata by name range
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String} [request.fromName] The name of the coin to start from (inclusive and case sensitive) (optional)
         * @param {String} [request.toName] The name of the coin to end at (inclusive and case sensitive) (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getCoinsByNameRange: this.createEndpoint(GetCoinsByNameRangeOperation),
        /**
         * @description Get Coin Metadata by symbol range
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String} [request.fromSymbol] The name of the coin to start from (inclusive and case sensitive) (optional)
         * @param {String} [request.toSymbol] The name of the coin to end at (inclusive and case sensitive) (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getCoinsBySymbolRange: this.createEndpoint(GetCoinsBySymbolRangeOperation),
        /**
         * @description Get Coin Metadata by creator addresses
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Object[]} request.creatorAddresses The addresses of the creators
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getCoinsByCreators: this.createEndpoint(GetCoinsByCreatorsOperation),
        /**
         * @description Get Coin Transfers by wallet addresses
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Object[]} request.ownerAddresses The addresses of the owners to get tokens for
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String} [request.fromDate] The date from which to fetch coin transfers (optional)
         * @param {String} [request.toDate] The date to which to fetch coin transfers (optional)
         * @param {String[]} [request.coinTypeBlacklist] The coin types of the coins to whitelist (optional)
         * @param {String[]} [request.coinTypeWhitelist] The coin types of the coins to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getCoinTransfersByOwnerAddresses: this.createEndpoint(GetCoinTransfersByOwnerAddressesOperation),
        /**
         * @description Get Coin Transfers by block heights
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {String[]} request.blockHeights The coin types to fetch info about
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getCoinTransfersByBlockHeights: this.createEndpoint(GetCoinTransfersByBlockHeightsOperation),
        /**
         * @description Get Coin Transfers by Coin Type
         * @param request Request with parameters.
         * @param {String} request.coinType The coin type to fetch info about
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String} [request.fromDate] The date from which to fetch coin transfers (optional)
         * @param {String} [request.toDate] The date to which to fetch coin transfers (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getCoinTransfersByCoinType: this.createEndpoint(GetCoinTransfersByCoinTypeOperation),
        /**
         * @description Get top Holders of Coin
         * @param request Request with parameters.
         * @param {String} request.coinTypeHash The coin type hash to fetch info about
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {Object} [request.minAmount] The minimum amount of coins required for a wallet to be included in the results (optional)
         * @param {Number} [request.minVersion] The minimum version on when the balance was last updated (optional)
         * @param {String[]} [request.walletBlacklist] The addresses of the wallets to blacklist (optional)
         * @param {String[]} [request.walletWhitelist] The addresses of the wallets to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getTopHoldersByCoin: this.createEndpoint(GetTopHoldersByCoinOperation)
      };
      this.collections = {
        /**
         * @description Get NFT Collections
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String} [request.fromName] The name of the collection to start from (inclusive and case sensitive) (optional)
         * @param {String} [request.toName] The name of the collection to end at (inclusive and case sensitive) (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTCollections: this.createEndpoint(GetNFTCollectionsOperation),
        /**
         * @description Get NFT Collections by ids
         * @param request Request with parameters.
         * @param {String[]} request.ids The identifiers of the collections to get
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object[]} Response for the request.
         */
        getNFTCollectionsByIds: this.createEndpoint(GetNFTCollectionsByIdsOperation),
        /**
         * @description Get NFT Collections by creator
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Object} request.creatorAddress The address of the creator
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTCollectionsByCreator: this.createEndpoint(GetNFTCollectionsByCreatorOperation)
      };
      this.nfts = {
        /**
         * @description Get NFTs by ids
         * @param request Request with parameters.
         * @param {String[]} request.tokenIds The identifiers of the tokens to get
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object[]} Response for the request.
         */
        getNFTsByIds: this.createEndpoint(GetNFTsByIdsOperation),
        /**
         * @description Get NFTs by Collection
         * @param request Request with parameters.
         * @param {String} request.collectionDataIdHash The collection data id hash of the collection
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTsByCollection: this.createEndpoint(GetNFTsByCollectionOperation),
        /**
         * @description Get NFTs by creators
         * @param request Request with parameters.
         * @param {Number} request.limit The number of tokens to return
         * @param {Object[]} request.creatorAddresses The addresses of the creators
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTsByCreators: this.createEndpoint(GetNFTsByCreatorsOperation),
        /**
         * @description Get NFT Owners by tokens
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {String[]} request.tokenIds The identifiers of the tokens to get owners for
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTOwnersByTokens: this.createEndpoint(GetNFTOwnersByTokensOperation),
        /**
         * @description Get NFT Owners by Collection
         * @param request Request with parameters.
         * @param {String} request.collectionDataIdHash The id of the token
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String[]} [request.walletBlacklist] The addresses of the wallets to blacklist (optional)
         * @param {String[]} [request.walletWhitelist] The addresses of the wallets to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTOwnersByCollection: this.createEndpoint(GetNFTOwnersByCollectionOperation),
        /**
         * @description Get NFT Owners of Collection
         * @param request Request with parameters.
         * @param {String} request.collectionDataIdHash The id of the token
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTOwnersOfCollection: this.createEndpoint(GetNFTOwnersOfCollectionOperation),
        /**
         * @description Get NFT Transfers by Token ids
         * @param request Request with parameters.
         * @param {Number} request.limit The number of tokens to return
         * @param {String[]} request.tokenIds The identifiers of the tokens to get
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String[]} [request.walletBlacklist] The addresses of the wallets to blacklist (optional)
         * @param {String[]} [request.walletWhitelist] The addresses of the wallets to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTTransfersByIds: this.createEndpoint(GetNFTTransfersByIdsOperation),
        /**
         * @description Get NFT Transfers by Collection
         * @param request Request with parameters.
         * @param {String} request.collectionDataIdHash The collection data id hash of the token
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String[]} [request.walletWhitelist] The addresses of the wallets to whitelist (optional)
         * @param {String[]} [request.walletBlacklist] The addresses of the wallets to blacklist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTTransfersByCollection: this.createEndpoint(GetNFTTransfersByCollectionOperation),
        /**
         * @description Get NFT Transfers by creators
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Object[]} request.creatorAddresses The addresses of the creators
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String[]} [request.collectionBlacklist] The ids of the collections to whitelist (optional)
         * @param {String[]} [request.collectionWhitelist] The ids of the collections to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTTransfersByCreators: this.createEndpoint(GetNFTTransfersByCreatorsOperation),
        /**
         * @description Get NFT Transfers by wallets
         * @param request Request with parameters.
         * @param {Number} request.limit The number of tokens to return
         * @param {Object[]} request.walletAddresses The addresses of the wallets to get transfers for
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String[]} [request.collectionBlacklist] The ids of the collections to whitelist (optional)
         * @param {String[]} [request.collectionWhitelist] The ids of the collections to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTTransfersByWallets: this.createEndpoint(GetNFTTransfersByWalletsOperation)
      };
      this.transactions = {
        /**
         * @description Get transactions
         * @param request Request with parameters.
         * @param {Number} [request.limit] Max number of transactions to retrieve.
         * If not provided, defaults to default page size (optional)
         * @param {String} [request.start] Account sequence number to start list of transactions.
         * If not provided, defaults to showing the latest transactions (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object[]} Response for the request.
         */
        getTransactions: this.createEndpoint(GetTransactionsOperation),
        /**
         * @description Submit transaction
         * @param request Request with parameters.
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @param body Request body.
         * @param {Object} body.sender A hex encoded 32 byte Aptos account address.
         * @param {String} body.sequenceNumber A string containing a 64-bit unsigned integer.
         * @param {String} body.maxGasAmount A string containing a 64-bit unsigned integer.
         * @param {String} body.gasUnitPrice A string containing a 64-bit unsigned integer.
         * @param {String} body.expirationTimestampSecs A string containing a 64-bit unsigned integer.
         * @param {Object} body.payload An enum of the possible transaction payloads
         * @param {Object} body.signature
         * @returns {Object} Response for the request.
         */
        submitTransaction: this.createEndpointWithBody(SubmitTransactionOperation),
        /**
         * @description Get transaction by hash
         * @param request Request with parameters.
         * @param {String} request.txnHash Hash of transaction to retrieve
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getTransactionByHash: this.createEndpoint(GetTransactionByHashOperation),
        /**
         * @description Get transaction by version
         * @param request Request with parameters.
         * @param {String} request.txnVersion Version of transaction to retrieve
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getTransactionByVersion: this.createEndpoint(GetTransactionByVersionOperation),
        /**
         * @description Get account transactions
         * @param request Request with parameters.
         * @param {String} request.address Address of account with or without a 0x prefix
         * @param {Number} [request.limit] Max number of transactions to retrieve.
         * If not provided, defaults to default page size (optional)
         * @param {String} [request.start] Account sequence number to start list of transactions.
         * If not provided, defaults to showing the latest transactions (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object[]} Response for the request.
         */
        getAccountTransactions: this.createEndpoint(GetAccountTransactionsOperation),
        /**
         * @description Submit batch transactions
         * @param request Request with parameters.
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @param body Request body.
         * @param {Object} body.sender A hex encoded 32 byte Aptos account address.
         * @param {String} body.sequenceNumber A string containing a 64-bit unsigned integer.
         * @param {String} body.maxGasAmount A string containing a 64-bit unsigned integer.
         * @param {String} body.gasUnitPrice A string containing a 64-bit unsigned integer.
         * @param {String} body.expirationTimestampSecs A string containing a 64-bit unsigned integer.
         * @param {Object} body.payload An enum of the possible transaction payloads
         * @param {Object} body.signature
         * @returns {Object} Response for the request.
         */
        submitBatchTransactions: this.createEndpointWithBody(SubmitBatchTransactionsOperation),
        /**
         * @description Simulate transaction
         * @param request Request with parameters.
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @param body Request body.
         * @param {Object} body.sender A hex encoded 32 byte Aptos account address.
         * @param {String} body.sequenceNumber A string containing a 64-bit unsigned integer.
         * @param {String} body.maxGasAmount A string containing a 64-bit unsigned integer.
         * @param {String} body.gasUnitPrice A string containing a 64-bit unsigned integer.
         * @param {String} body.expirationTimestampSecs A string containing a 64-bit unsigned integer.
         * @param {Object} body.payload An enum of the possible transaction payloads
         * @param {Object} body.signature
         * @returns {Object} Response for the request.
         */
        simulateTransaction: this.createEndpointWithBody(SimulateTransactionOperation),
        /**
         * @description Encode submission
         * @param request Request with parameters.
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @param body Request body.
         * @param {Object} body.sender A hex encoded 32 byte Aptos account address.
         * @param {String} body.sequenceNumber A string containing a 64-bit unsigned integer.
         * @param {String} body.maxGasAmount A string containing a 64-bit unsigned integer.
         * @param {String} body.gasUnitPrice A string containing a 64-bit unsigned integer.
         * @param {String} body.expirationTimestampSecs A string containing a 64-bit unsigned integer.
         * @param {Object} body.payload An enum of the possible transaction payloads
         * @param {String[]} body.secondarySigners Secondary signer accounts of the request for Multi-agent
         * @returns {String} Response for the request.
         */
        encodeSubmission: this.createEndpointWithBody(EncodeSubmissionOperation),
        /**
         * @description Estimate gas price
         * @param request Request with parameters.
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        estimateGasPrice: this.createEndpoint(EstimateGasPriceOperation)
      };
      this.wallets = {
        /**
         * @description Get Coin Balances by wallet addresses
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Object[]} request.ownerAddresses The addresses of the owners to get coin balances for
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String[]} [request.coinTypeHashBlacklist] The coin type hashes of the coins to whitelist (optional)
         * @param {String[]} [request.coinTypeHashWhitelist] The coin type hashes of the coins to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getCoinBalancesByWallets: this.createEndpoint(GetCoinBalancesByWalletsOperation),
        /**
         * @description Get Historical Coin Balances by wallet addresses
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Object[]} request.ownerAddresses The addresses of the owner addresses to get historical balances for
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String[]} [request.coinTypeHashBlacklist] The coin type hash of the coins to whitelist (optional)
         * @param {String[]} [request.coinTypeHashWhitelist] The coin type hash of the coins to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getHistoricalCoinBalancesByWallets: this.createEndpoint(GetHistoricalCoinBalancesByWalletsOperation),
        /**
         * @description Get Coin Transfers by wallet addresses
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Object[]} request.ownerAddresses The addresses of the owners to get tokens for
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String} [request.fromDate] The date from which to fetch coin transfers (optional)
         * @param {String} [request.toDate] The date to which to fetch coin transfers (optional)
         * @param {String[]} [request.coinTypeBlacklist] The coin types of the coins to whitelist (optional)
         * @param {String[]} [request.coinTypeWhitelist] The coin types of the coins to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getCoinTransfersByWalletAddresses: this.createEndpoint(GetCoinTransfersByWalletAddressesOperation),
        /**
         * @description Get NFTs by wallet addresses
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Object[]} request.ownerAddresses The addresses of the owners to get tokens for
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String[]} [request.collectionBlacklist] The collection data id hashes of the collections to whitelist (optional)
         * @param {String[]} [request.collectionWhitelist] The collection data id hashes of the collections to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTByOwners: this.createEndpoint(GetNFTByOwnersOperation),
        /**
         * @description Get NFT Transfers by wallets
         * @param request Request with parameters.
         * @param {Number} request.limit The number of tokens to return
         * @param {Object[]} request.walletAddresses The addresses of the wallets to get transfers for
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String[]} [request.collectionBlacklist] The ids of the collections to whitelist (optional)
         * @param {String[]} [request.collectionWhitelist] The ids of the collections to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getWalletsNFTTransfers: this.createEndpoint(GetWalletsNFTTransfersOperation)
      };
    }
    return AbstractClient2;
  }()
);
var AptosMultiAgentSignatureRequestSender = (
  /** @class */
  function() {
    function AptosMultiAgentSignatureRequestSender2() {
    }
    AptosMultiAgentSignatureRequestSender2.create = function(input) {
      if (AptosEd25519SignatureRequest.isInput(input)) {
        return AptosEd25519SignatureRequest.create(input);
      }
      if (AptosMultiEd25519SignatureRequest.isInput(input)) {
        return AptosMultiEd25519SignatureRequest.create(input);
      }
      throw new Error("Cannot resolve union from AptosMultiAgentSignatureRequestSenderInput");
    };
    AptosMultiAgentSignatureRequestSender2.fromJSON = function(json) {
      if (AptosEd25519SignatureRequest.isJSON(json)) {
        return AptosEd25519SignatureRequest.fromJSON(json);
      }
      if (AptosMultiEd25519SignatureRequest.isJSON(json)) {
        return AptosMultiEd25519SignatureRequest.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosMultiAgentSignatureRequestSenderJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosMultiAgentSignatureRequestSender2.toJSON = function(value) {
      if (value instanceof AptosEd25519SignatureRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosMultiEd25519SignatureRequest) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosMultiAgentSignatureRequestSenderValue");
    };
    return AptosMultiAgentSignatureRequestSender2;
  }()
);

// node_modules/@moralisweb3/common-streams-utils/lib/esm/index.js
init_lib3();
var __assign2 = function() {
  __assign2 = Object.assign || function __assign5(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
var AptosStream = (
  /** @class */
  function() {
    function AptosStream2(data) {
      this._data = AptosStream2.parse(data);
    }
    AptosStream2.create = function(data) {
      if (data instanceof AptosStream2) {
        return data;
      }
      return new AptosStream2(data);
    };
    AptosStream2.equals = function(valueA, valueB) {
      var aptosStreamA = AptosStream2.create(valueA);
      var aptosStreamB = AptosStream2.create(valueB);
      if (aptosStreamA.id !== aptosStreamB.id) {
        return false;
      }
      return true;
    };
    AptosStream2.prototype.equals = function(value) {
      return AptosStream2.equals(this, value);
    };
    AptosStream2.prototype.toJSON = function() {
      return __assign2(__assign2({}, this._data), { network: this.network.map(function(network) {
        return network.toJSON();
      }) });
    };
    AptosStream2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(AptosStream2.prototype, "network", {
      get: function() {
        return this._data.network;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "webhookUrl", {
      get: function() {
        return this._data.webhookUrl;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "description", {
      get: function() {
        return this._data.description;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "tag", {
      get: function() {
        return this._data.tag;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "allAddresses", {
      get: function() {
        return this._data.allAddresses;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "id", {
      get: function() {
        return this._data.id;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "status", {
      get: function() {
        return this._data.status;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "statusMessage", {
      get: function() {
        return this._data.statusMessage;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "demo", {
      get: function() {
        return this._data.demo;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "includeChanges", {
      get: function() {
        return this._data.includeChanges;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "includeEvents", {
      get: function() {
        return this._data.includeEvents;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "includePayload", {
      get: function() {
        return this._data.includePayload;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "isErrorSince", {
      get: function() {
        return this._data.isErrorSince;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "events", {
      get: function() {
        return this._data.events;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "functions", {
      get: function() {
        return this._data.functions;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "amountOfAddresses", {
      get: function() {
        return this._data.amountOfAddresses;
      },
      enumerable: false,
      configurable: true
    });
    AptosStream2.parse = function(data) {
      return __assign2(__assign2({}, data), { network: data.network.map(function(network) {
        return AptosNetwork.create(network);
      }) });
    };
    return AptosStream2;
  }()
);
var StreamSelector = (
  /** @class */
  function() {
    function StreamSelector2(data) {
      this._value = StreamSelector2.parse(data);
    }
    StreamSelector2.isSelectorString = function(selector) {
      if (selector instanceof StreamSelector2) {
        return true;
      }
      return selector.startsWith("$");
    };
    StreamSelector2.create = function(streamSelector) {
      if (streamSelector instanceof StreamSelector2) {
        return streamSelector;
      }
      return new StreamSelector2(streamSelector);
    };
    StreamSelector2.parse = function(streamSelector) {
      if (!StreamSelector2.isSelectorString(streamSelector)) {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Invalid selector string provided"
        });
      }
      return streamSelector;
    };
    StreamSelector2.equals = function(valueA, valueB) {
      var streamSelectorA = StreamSelector2.create(valueA);
      var streamSelectorB = StreamSelector2.create(valueB);
      return streamSelectorA.value === streamSelectorB.value;
    };
    StreamSelector2.prototype.equals = function(streamSelector) {
      return StreamSelector2.equals(this, streamSelector);
    };
    StreamSelector2.prototype.format = function() {
      return this.value;
    };
    Object.defineProperty(StreamSelector2.prototype, "value", {
      /**
       * @returns the selector path
       * @example '$from'
       */
      get: function() {
        return this._value;
      },
      enumerable: false,
      configurable: true
    });
    StreamSelector2.prototype.toJSON = function() {
      return this.value;
    };
    return StreamSelector2;
  }()
);
var StreamTrigger = (
  /** @class */
  function() {
    function StreamTrigger2(data) {
      this._data = StreamTrigger2.parse(data);
    }
    StreamTrigger2.create = function(data) {
      if (data instanceof StreamTrigger2) {
        return data;
      }
      return new StreamTrigger2(data);
    };
    StreamTrigger2.parseSelectorOrAddress = function(input) {
      var result;
      if (!(input instanceof EvmAddress) && StreamSelector.isSelectorString(input)) {
        result = StreamSelector.create(input);
      } else {
        result = EvmAddress.create(input);
      }
      return result;
    };
    StreamTrigger2.equals = function(valueA, valueB) {
      var _a2, _b;
      var streamTriggerA = StreamTrigger2.create(valueA);
      var streamTriggerB = StreamTrigger2.create(valueB);
      if (streamTriggerA.type !== streamTriggerB.type) {
        return false;
      }
      if (streamTriggerA.contractAddress.toJSON() !== streamTriggerB.contractAddress.toJSON()) {
        return false;
      }
      if (streamTriggerA.functionAbi !== streamTriggerB.functionAbi) {
        return false;
      }
      if (((_a2 = streamTriggerA.inputs) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = streamTriggerB.inputs) === null || _b === void 0 ? void 0 : _b.length)) {
        return false;
      }
      var triggerInputsA = streamTriggerA.inputs || [];
      var triggerInputsB = streamTriggerB.inputs || [];
      for (var i = 0; i < (triggerInputsA === null || triggerInputsA === void 0 ? void 0 : triggerInputsA.length); i++) {
        if (triggerInputsA[i] !== triggerInputsB[i]) {
          return false;
        }
      }
      if (streamTriggerA.topic0 !== streamTriggerB.topic0) {
        return false;
      }
      if (streamTriggerA.callFrom !== streamTriggerB.callFrom) {
        return false;
      }
      return true;
    };
    StreamTrigger2.arrayEquals = function(valueA, valueB) {
      if (valueA.length !== valueB.length) {
        return false;
      }
      var triggersA = valueA.map(function(trigger) {
        return StreamTrigger2.create(trigger);
      });
      var triggersB = valueB.map(function(trigger) {
        return StreamTrigger2.create(trigger);
      });
      var seenTriggersB = Array(triggersB.length).fill(false);
      var _loop_1 = function(i2) {
        var indexB = triggersB.findIndex(function(triggerB) {
          return triggerB.equals(triggersA[i2]);
        });
        if (indexB < 0) {
          return { value: false };
        }
        seenTriggersB[indexB] = true;
      };
      for (var i = 0; i < triggersA.length; i++) {
        var state_1 = _loop_1(i);
        if (typeof state_1 === "object")
          return state_1.value;
      }
      if (seenTriggersB.some(function(seen) {
        return !seen;
      })) {
        return false;
      }
      return true;
    };
    StreamTrigger2.prototype.equals = function(value) {
      return StreamTrigger2.equals(this, value);
    };
    StreamTrigger2.prototype.toJSON = function() {
      var _a2 = this._data, contractAddress = _a2.contractAddress, callFrom = _a2.callFrom, data = __rest(_a2, ["contractAddress", "callFrom"]);
      return __assign2(__assign2({}, data), { contractAddress: contractAddress.toJSON(), callFrom: callFrom === null || callFrom === void 0 ? void 0 : callFrom.toJSON() });
    };
    StreamTrigger2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamTrigger2.prototype, "type", {
      get: function() {
        return this._data.type;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamTrigger2.prototype, "contractAddress", {
      get: function() {
        return this._data.contractAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamTrigger2.prototype, "functionAbi", {
      get: function() {
        return this._data.functionAbi;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamTrigger2.prototype, "inputs", {
      get: function() {
        return this._data.inputs;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamTrigger2.prototype, "topic0", {
      get: function() {
        return this._data.topic0;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamTrigger2.prototype, "callFrom", {
      get: function() {
        return this._data.callFrom;
      },
      enumerable: false,
      configurable: true
    });
    StreamTrigger2.parse = function(data) {
      var contractAddressInput = data.contractAddress, callFromInput = data.callFrom, input = __rest(data, ["contractAddress", "callFrom"]);
      var contractAddress = StreamTrigger2.parseSelectorOrAddress(contractAddressInput);
      var callFrom = maybe(callFromInput, function(value) {
        return StreamTrigger2.parseSelectorOrAddress(value);
      });
      return __assign2(__assign2({}, input), { contractAddress, callFrom });
    };
    return StreamTrigger2;
  }()
);
var EvmStream = (
  /** @class */
  function() {
    function EvmStream2(data) {
      this._data = EvmStream2.parse(data);
    }
    EvmStream2.create = function(data) {
      if (data instanceof EvmStream2) {
        return data;
      }
      return new EvmStream2(data);
    };
    EvmStream2.equals = function(valueA, valueB) {
      var _a2, _b;
      var evmStreamA = EvmStream2.create(valueA);
      var evmStreamB = EvmStream2.create(valueB);
      if (evmStreamA.id !== evmStreamB.id) {
        return false;
      }
      if (((_a2 = evmStreamA.triggers) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = evmStreamB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTrigger.arrayEquals(evmStreamA.triggers || [], evmStreamB.triggers || [])) {
        return false;
      }
      return true;
    };
    EvmStream2.prototype.equals = function(value) {
      return EvmStream2.equals(this, value);
    };
    EvmStream2.prototype.toJSON = function() {
      var _a2 = this._data, chains = _a2.chains, triggers = _a2.triggers, data = __rest(_a2, ["chains", "triggers"]);
      return __assign2(__assign2({}, data), { chainIds: chains.map(function(chain) {
        return chain.toJSON();
      }), triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function(trigger) {
        return trigger.format();
      }) });
    };
    EvmStream2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmStream2.prototype, "chains", {
      get: function() {
        return this._data.chains;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "chainIds", {
      get: function() {
        return this._data.chains.map(function(chain) {
          return chain.hex;
        });
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "webhookUrl", {
      get: function() {
        return this._data.webhookUrl;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "description", {
      get: function() {
        return this._data.description;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "tag", {
      get: function() {
        return this._data.tag;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "topic0", {
      get: function() {
        return this._data.topic0;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "allAddresses", {
      get: function() {
        return this._data.allAddresses;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "includeNativeTxs", {
      get: function() {
        return this._data.includeNativeTxs;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "includeContractLogs", {
      get: function() {
        return this._data.includeContractLogs;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "includeInternalTxs", {
      get: function() {
        return this._data.includeInternalTxs;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "includeAllTxLogs", {
      get: function() {
        return this._data.includeAllTxLogs;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "abi", {
      get: function() {
        return this._data.abi;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "advancedOptions", {
      get: function() {
        return this._data.advancedOptions;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "id", {
      get: function() {
        return this._data.id;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "status", {
      get: function() {
        return this._data.status;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "statusMessage", {
      get: function() {
        return this._data.statusMessage;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "triggers", {
      get: function() {
        return this._data.triggers;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "getNativeBalances", {
      get: function() {
        return this._data.getNativeBalances;
      },
      enumerable: false,
      configurable: true
    });
    EvmStream2.parse = function(data) {
      var _a2, _b, _c, _d, _e;
      return __assign2(__assign2({}, data), { chains: data.chainIds.map(function(chainId) {
        return EvmChain.create(chainId);
      }), topic0: maybe(data.topic0), allAddresses: (_a2 = data.allAddresses) !== null && _a2 !== void 0 ? _a2 : false, includeContractLogs: (_b = data.includeContractLogs) !== null && _b !== void 0 ? _b : false, includeInternalTxs: (_c = data.includeInternalTxs) !== null && _c !== void 0 ? _c : false, includeAllTxLogs: (_d = data.includeAllTxLogs) !== null && _d !== void 0 ? _d : false, includeNativeTxs: (_e = data.includeNativeTxs) !== null && _e !== void 0 ? _e : false, advancedOptions: maybe(data.advancedOptions), abi: maybe(data.abi), triggers: maybe(data.triggers, function(triggers) {
        return triggers.map(function(trigger) {
          return StreamTrigger.create(trigger);
        });
      }), getNativeBalances: maybe(data.getNativeBalances) });
    };
    return EvmStream2;
  }()
);
var EvmStreamResultFormatter = (
  /** @class */
  function() {
    function EvmStreamResultFormatter2() {
    }
    EvmStreamResultFormatter2.toJSON = function(data) {
      return __assign2(__assign2({}, data), { erc20Transfers: data.erc20Transfers.map(function(value) {
        return value.toJSON();
      }), erc20Approvals: data.erc20Approvals.map(function(value) {
        return value.toJSON();
      }), nftTransfers: data.nftTransfers.map(function(value) {
        return value.toJSON();
      }), nftApprovals: {
        ERC721: data.nftApprovals.ERC721.map(function(value) {
          return value.toJSON();
        }),
        ERC1155: data.nftApprovals.ERC1155.map(function(value) {
          return value.toJSON();
        })
      }, ntfTokenApprovals: data.ntfTokenApprovals.map(function(value) {
        return value.toJSON();
      }), chain: data.chain.toJSON(), block: data.block.toJSON(), logs: data.logs.map(function(value) {
        return value.toJSON();
      }), txs: data.txs.map(function(value) {
        return value.toJSON();
      }), txsInternal: data.txsInternal.map(function(value) {
        return value.toJSON();
      }), abi: data.abi, nativeBalances: data.nativeBalances.map(function(nativeBalance) {
        return nativeBalance.toJSON();
      }) });
    };
    return EvmStreamResultFormatter2;
  }()
);
var StreamTriggerOutput = (
  /** @class */
  function() {
    function StreamTriggerOutput2(data) {
      this._data = StreamTriggerOutput2.parse(data);
    }
    StreamTriggerOutput2.create = function(data) {
      if (data instanceof StreamTriggerOutput2) {
        return data;
      }
      return new StreamTriggerOutput2(data);
    };
    StreamTriggerOutput2.equals = function(valueA, valueB) {
      var streamTriggerOutputA = StreamTriggerOutput2.create(valueA);
      var streamTriggerOutputB = StreamTriggerOutput2.create(valueB);
      return streamTriggerOutputA.name === streamTriggerOutputB.name && streamTriggerOutputA.value === streamTriggerOutputB.value;
    };
    StreamTriggerOutput2.arrayEquals = function(valueA, valueB) {
      if (valueA.length !== valueB.length) {
        return false;
      }
      var triggerOutputsA = valueA.map(function(triggerOutput) {
        return StreamTriggerOutput2.create(triggerOutput);
      });
      var triggerOutputsB = valueB.map(function(triggerOutput) {
        return StreamTriggerOutput2.create(triggerOutput);
      });
      triggerOutputsA.sort(function(a, b) {
        return b.name > a.name ? 1 : -1;
      });
      triggerOutputsB.sort(function(a, b) {
        return b.name > a.name ? 1 : -1;
      });
      for (var i = 0; i < (triggerOutputsA === null || triggerOutputsA === void 0 ? void 0 : triggerOutputsA.length); i++) {
        if (!triggerOutputsA[i].equals(triggerOutputsB[i])) {
          return false;
        }
      }
      return true;
    };
    StreamTriggerOutput2.prototype.equals = function(value) {
      return StreamTriggerOutput2.equals(this, value);
    };
    StreamTriggerOutput2.prototype.toJSON = function() {
      var data = __rest(this._data, []);
      return __assign2({}, data);
    };
    StreamTriggerOutput2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamTriggerOutput2.prototype, "name", {
      get: function() {
        return this._data.name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamTriggerOutput2.prototype, "value", {
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    StreamTriggerOutput2.parse = function(data) {
      return __assign2({}, data);
    };
    return StreamTriggerOutput2;
  }()
);
var StreamErc1155Approval = (
  /** @class */
  function() {
    function StreamErc1155Approval2(data) {
      this._data = StreamErc1155Approval2.parse(data);
    }
    StreamErc1155Approval2.create = function(data) {
      if (data instanceof StreamErc1155Approval2) {
        return data;
      }
      return new StreamErc1155Approval2(data);
    };
    StreamErc1155Approval2.equals = function(valueA, valueB) {
      var _a2, _b;
      var evmNftApprovalA = StreamErc1155Approval2.create(valueA);
      var evmNftApprovalB = StreamErc1155Approval2.create(valueB);
      if (!evmNftApprovalA.chain.equals(evmNftApprovalB.chain)) {
        return false;
      }
      if (evmNftApprovalA.transactionHash !== evmNftApprovalB.transactionHash) {
        return false;
      }
      if (!evmNftApprovalA.account.equals(evmNftApprovalB.account)) {
        return false;
      }
      if (!evmNftApprovalA.contract.equals(evmNftApprovalB.contract)) {
        return false;
      }
      if (!evmNftApprovalA.operator.equals(evmNftApprovalB.operator)) {
        return false;
      }
      if (evmNftApprovalA.approved !== evmNftApprovalB.approved) {
        return false;
      }
      if (((_a2 = evmNftApprovalA.triggers) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = evmNftApprovalB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput.arrayEquals(evmNftApprovalA.triggers || [], evmNftApprovalB.triggers || [])) {
        return false;
      }
      return true;
    };
    StreamErc1155Approval2.prototype.equals = function(value) {
      return StreamErc1155Approval2.equals(this, value);
    };
    StreamErc1155Approval2.prototype.toJSON = function() {
      var _a2;
      var data = this._data;
      return __assign2(__assign2({}, data), { chain: data.chain.toJSON(), contract: data.contract.toJSON(), account: data.account.toJSON(), operator: data.operator.toJSON(), triggers: (_a2 = data.triggers) === null || _a2 === void 0 ? void 0 : _a2.map(function(trigger) {
        return trigger.format();
      }) });
    };
    StreamErc1155Approval2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamErc1155Approval2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "approved", {
      get: function() {
        return this._data.approved;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "transactionHash", {
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "contract", {
      get: function() {
        return this._data.contract;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "logIndex", {
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "account", {
      get: function() {
        return this._data.account;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "operator", {
      get: function() {
        return this._data.operator;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "tokenContractType", {
      get: function() {
        return this._data.tokenContractType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "tokenName", {
      get: function() {
        return this._data.tokenName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "tokenSymbol", {
      get: function() {
        return this._data.tokenSymbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "triggers", {
      get: function() {
        return this._data.triggers;
      },
      enumerable: false,
      configurable: true
    });
    StreamErc1155Approval2.parse = function(data) {
      var chain = EvmChain.create(data.chain);
      return __assign2(__assign2({}, data), { chain, logIndex: +data.logIndex, account: EvmAddress.create(data.account), operator: EvmAddress.create(data.operator), contract: EvmAddress.create(data.contract), tokenContractType: data.tokenContractType, triggers: maybe(data.triggers, function(triggers) {
        return triggers.map(function(trigger) {
          return StreamTriggerOutput.create(trigger);
        });
      }) });
    };
    return StreamErc1155Approval2;
  }()
);
var StreamErc20Approval = (
  /** @class */
  function() {
    function StreamErc20Approval2(data) {
      this._data = StreamErc20Approval2.parse(data);
    }
    StreamErc20Approval2.create = function(data) {
      if (data instanceof StreamErc20Approval2) {
        return data;
      }
      return new StreamErc20Approval2(data);
    };
    StreamErc20Approval2.equals = function(valueA, valueB) {
      var _a2, _b;
      var erc20ApprovalA = StreamErc20Approval2.create(valueA);
      var erc20ApprovalB = StreamErc20Approval2.create(valueB);
      if (!erc20ApprovalA.chain.equals(erc20ApprovalB.chain)) {
        return false;
      }
      if (erc20ApprovalA.transactionHash !== erc20ApprovalB.transactionHash) {
        return false;
      }
      if (erc20ApprovalA.logIndex !== erc20ApprovalB.logIndex) {
        return false;
      }
      if (((_a2 = erc20ApprovalA.triggers) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = erc20ApprovalB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput.arrayEquals(erc20ApprovalA.triggers || [], erc20ApprovalB.triggers || [])) {
        return false;
      }
      return true;
    };
    StreamErc20Approval2.prototype.equals = function(value) {
      return StreamErc20Approval2.equals(this, value);
    };
    StreamErc20Approval2.prototype.toJSON = function() {
      var _a2 = this._data, chain = _a2.chain, owner = _a2.owner, spender = _a2.spender, contract = _a2.contract, value = _a2.value, triggers = _a2.triggers, data = __rest(_a2, ["chain", "owner", "spender", "contract", "value", "triggers"]);
      return __assign2(__assign2({}, data), { chain: chain.toJSON(), owner: owner.toJSON(), spender: spender.toJSON(), contract: contract.toJSON(), value: value.toString(), triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function(trigger) {
        return trigger.format();
      }) });
    };
    StreamErc20Approval2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamErc20Approval2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "transactionHash", {
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "logIndex", {
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "owner", {
      get: function() {
        return this._data.owner;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "spender", {
      get: function() {
        return this._data.spender;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "value", {
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "contract", {
      get: function() {
        return this._data.contract;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "tokenName", {
      get: function() {
        return this._data.tokenName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "tokenSymbol", {
      get: function() {
        return this._data.tokenSymbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "tokenDecimals", {
      get: function() {
        return this._data.tokenDecimals;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "valueWithDecimals", {
      get: function() {
        return this._data.valueWithDecimals;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "triggers", {
      get: function() {
        return this._data.triggers;
      },
      enumerable: false,
      configurable: true
    });
    StreamErc20Approval2.parse = function(data) {
      var chain = EvmChain.create(data.chain);
      return __assign2(__assign2({}, data), { chain, spender: EvmAddress.create(data.spender), owner: EvmAddress.create(data.owner), logIndex: +data.logIndex, contract: EvmAddress.create(data.contract), value: BigNumber.create(data.value), valueWithDecimals: maybe(data.valueWithDecimals), tokenDecimals: data.tokenDecimals === "" ? void 0 : +data.tokenDecimals, triggers: maybe(data.triggers, function(triggers) {
        return triggers.map(function(trigger) {
          return StreamTriggerOutput.create(trigger);
        });
      }) });
    };
    return StreamErc20Approval2;
  }()
);
var StreamErc20Transfer = (
  /** @class */
  function() {
    function StreamErc20Transfer2(data) {
      this._data = StreamErc20Transfer2.parse(data);
    }
    StreamErc20Transfer2.create = function(data) {
      if (data instanceof StreamErc20Transfer2) {
        return data;
      }
      return new StreamErc20Transfer2(data);
    };
    StreamErc20Transfer2.equals = function(valueA, valueB) {
      var _a2, _b;
      var erc20TransferA = StreamErc20Transfer2.create(valueA);
      var erc20TransferB = StreamErc20Transfer2.create(valueB);
      if (!erc20TransferA.chain.equals(erc20TransferB.chain)) {
        return false;
      }
      if (erc20TransferA.transactionHash !== erc20TransferB.transactionHash) {
        return false;
      }
      if (erc20TransferA.logIndex !== erc20TransferB.logIndex) {
        return false;
      }
      if (((_a2 = erc20TransferA.triggers) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = erc20TransferB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput.arrayEquals(erc20TransferA.triggers || [], erc20TransferB.triggers || [])) {
        return false;
      }
      return true;
    };
    StreamErc20Transfer2.prototype.equals = function(value) {
      return StreamErc20Transfer2.equals(this, value);
    };
    StreamErc20Transfer2.prototype.toJSON = function() {
      var _a2 = this._data, chain = _a2.chain, from = _a2.from, to = _a2.to, contract = _a2.contract, value = _a2.value, triggers = _a2.triggers, data = __rest(_a2, ["chain", "from", "to", "contract", "value", "triggers"]);
      return __assign2(__assign2({}, data), { chain: chain.toJSON(), from: from.toJSON(), to: to.toJSON(), contract: contract.toJSON(), value: value.toString(), triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function(trigger) {
        return trigger.format();
      }) });
    };
    StreamErc20Transfer2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamErc20Transfer2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "transactionHash", {
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "logIndex", {
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "from", {
      get: function() {
        return this._data.from;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "to", {
      get: function() {
        return this._data.to;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "value", {
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "contract", {
      get: function() {
        return this._data.contract;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "tokenName", {
      get: function() {
        return this._data.tokenName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "tokenSymbol", {
      get: function() {
        return this._data.tokenSymbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "tokenDecimals", {
      get: function() {
        return this._data.tokenDecimals;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "valueWithDecimals", {
      get: function() {
        return this._data.valueWithDecimals;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "triggers", {
      get: function() {
        return this._data.triggers;
      },
      enumerable: false,
      configurable: true
    });
    StreamErc20Transfer2.parse = function(data) {
      var chain = EvmChain.create(data.chain);
      return __assign2(__assign2({}, data), { chain, from: EvmAddress.create(data.from), to: EvmAddress.create(data.to), logIndex: +data.logIndex, contract: EvmAddress.create(data.contract), value: BigNumber.create(data.value), valueWithDecimals: maybe(data.valueWithDecimals), tokenDecimals: data.tokenDecimals === "" ? void 0 : +data.tokenDecimals, triggers: maybe(data.triggers, function(triggers) {
        return triggers.map(function(trigger) {
          return StreamTriggerOutput.create(trigger);
        });
      }) });
    };
    return StreamErc20Transfer2;
  }()
);
var StreamErc721Approval = (
  /** @class */
  function() {
    function StreamErc721Approval2(data) {
      this._data = StreamErc721Approval2.parse(data);
    }
    StreamErc721Approval2.create = function(data) {
      if (data instanceof StreamErc721Approval2) {
        return data;
      }
      return new StreamErc721Approval2(data);
    };
    StreamErc721Approval2.equals = function(valueA, valueB) {
      var _a2, _b;
      var evmNftApprovalA = StreamErc721Approval2.create(valueA);
      var evmNftApprovalB = StreamErc721Approval2.create(valueB);
      if (!evmNftApprovalA.chain.equals(evmNftApprovalB.chain)) {
        return false;
      }
      if (evmNftApprovalA.transactionHash !== evmNftApprovalB.transactionHash) {
        return false;
      }
      if (!evmNftApprovalA.owner.equals(evmNftApprovalB.owner)) {
        return false;
      }
      if (!evmNftApprovalA.contract.equals(evmNftApprovalB.contract)) {
        return false;
      }
      if (evmNftApprovalA.tokenId !== evmNftApprovalB.tokenId) {
        return false;
      }
      if (!evmNftApprovalA.approved.equals(evmNftApprovalB.approved)) {
        return false;
      }
      if (((_a2 = evmNftApprovalA.triggers) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = evmNftApprovalB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput.arrayEquals(evmNftApprovalA.triggers || [], evmNftApprovalB.triggers || [])) {
        return false;
      }
      return true;
    };
    StreamErc721Approval2.prototype.equals = function(value) {
      return StreamErc721Approval2.equals(this, value);
    };
    StreamErc721Approval2.prototype.toJSON = function() {
      var _a2;
      var data = this._data;
      return __assign2(__assign2({}, data), { chain: data.chain.toJSON(), contract: data.contract.toJSON(), owner: data.owner.toJSON(), approved: data.approved.toJSON(), triggers: (_a2 = data.triggers) === null || _a2 === void 0 ? void 0 : _a2.map(function(trigger) {
        return trigger.format();
      }) });
    };
    StreamErc721Approval2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamErc721Approval2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "approved", {
      get: function() {
        return this._data.approved;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "owner", {
      get: function() {
        return this._data.owner;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "transactionHash", {
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "contract", {
      get: function() {
        return this._data.contract;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "logIndex", {
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "tokenId", {
      get: function() {
        return this._data.tokenId;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "tokenContractType", {
      get: function() {
        return this._data.tokenContractType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "tokenName", {
      get: function() {
        return this._data.tokenName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "tokenSymbol", {
      get: function() {
        return this._data.tokenSymbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "triggers", {
      get: function() {
        return this._data.triggers;
      },
      enumerable: false,
      configurable: true
    });
    StreamErc721Approval2.parse = function(data) {
      var chain = EvmChain.create(data.chain);
      return __assign2(__assign2({}, data), { chain, logIndex: +data.logIndex, owner: EvmAddress.create(data.owner), contract: EvmAddress.create(data.contract), tokenContractType: data.tokenContractType, approved: EvmAddress.create(data.approved), triggers: maybe(data.triggers, function(triggers) {
        return triggers.map(function(trigger) {
          return StreamTriggerOutput.create(trigger);
        });
      }) });
    };
    return StreamErc721Approval2;
  }()
);
var StreamEvmInternalTransaction = (
  /** @class */
  function() {
    function StreamEvmInternalTransaction2(data) {
      this._data = StreamEvmInternalTransaction2.parse(data);
    }
    StreamEvmInternalTransaction2.create = function(data) {
      if (data instanceof StreamEvmInternalTransaction2) {
        return data;
      }
      return new StreamEvmInternalTransaction2(data);
    };
    StreamEvmInternalTransaction2.equals = function(valueA, valueB) {
      var _a2, _b;
      var evmInternalTransactionA = StreamEvmInternalTransaction2.create(valueA);
      var evmInternalTransactionB = StreamEvmInternalTransaction2.create(valueB);
      if (!evmInternalTransactionA.chain.equals(evmInternalTransactionB.chain)) {
        return false;
      }
      if (evmInternalTransactionA.transactionHash !== evmInternalTransactionB.transactionHash) {
        return false;
      }
      if (((_a2 = evmInternalTransactionA.triggers) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = evmInternalTransactionB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput.arrayEquals(evmInternalTransactionA.triggers || [], evmInternalTransactionB.triggers || [])) {
        return false;
      }
      return true;
    };
    StreamEvmInternalTransaction2.prototype.equals = function(value) {
      return StreamEvmInternalTransaction2.equals(this, value);
    };
    StreamEvmInternalTransaction2.prototype.toJSON = function() {
      var _a2, _b, _c, _d, _e;
      var data = this._data;
      return __assign2(__assign2({}, data), { chain: data.chain.toJSON(), from: (_a2 = data.from) === null || _a2 === void 0 ? void 0 : _a2.toJSON(), to: (_b = data.to) === null || _b === void 0 ? void 0 : _b.toJSON(), value: (_c = data.value) === null || _c === void 0 ? void 0 : _c.toString(), gas: (_d = data.gas) === null || _d === void 0 ? void 0 : _d.toString(), triggers: (_e = data.triggers) === null || _e === void 0 ? void 0 : _e.map(function(trigger) {
        return trigger.format();
      }) });
    };
    StreamEvmInternalTransaction2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamEvmInternalTransaction2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmInternalTransaction2.prototype, "from", {
      get: function() {
        return this._data.from;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmInternalTransaction2.prototype, "to", {
      get: function() {
        return this._data.to;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmInternalTransaction2.prototype, "value", {
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmInternalTransaction2.prototype, "transactionHash", {
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmInternalTransaction2.prototype, "gas", {
      get: function() {
        return this._data.gas;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmInternalTransaction2.prototype, "triggers", {
      get: function() {
        return this._data.triggers;
      },
      enumerable: false,
      configurable: true
    });
    StreamEvmInternalTransaction2.parse = function(data) {
      return __assign2(__assign2({}, data), { chain: EvmChain.create(data.chain), from: maybe(data.from, function(value) {
        return EvmAddress.create(value);
      }), to: maybe(data.to, function(value) {
        return EvmAddress.create(value);
      }), value: maybe(data.value, function(value) {
        return BigNumber.create(value);
      }), gas: maybe(data.gas, function(value) {
        return BigNumber.create(value);
      }), triggers: maybe(data.triggers, function(triggers) {
        return triggers.map(function(trigger) {
          return StreamTriggerOutput.create(trigger);
        });
      }) });
    };
    return StreamEvmInternalTransaction2;
  }()
);
var StreamEvmNftTransfer = (
  /** @class */
  function() {
    function StreamEvmNftTransfer2(data) {
      this._data = StreamEvmNftTransfer2.parse(data);
    }
    StreamEvmNftTransfer2.create = function(data) {
      if (data instanceof StreamEvmNftTransfer2) {
        return data;
      }
      return new StreamEvmNftTransfer2(data);
    };
    StreamEvmNftTransfer2.parse = function(data) {
      return __assign2(__assign2({}, data), { chain: EvmChain.create(data.chain), to: EvmAddress.create(data.to), contract: EvmAddress.create(data.contract), from: EvmAddress.create(data.from), logIndex: +data.logIndex, operator: maybe(data.operator, function(operator) {
        return EvmAddress.create(operator);
      }), tokenId: data.tokenId, transactionHash: data.transactionHash, amount: +data.amount, tokenName: data.tokenName, triggers: maybe(data.triggers, function(triggers) {
        return triggers.map(function(trigger) {
          return StreamTriggerOutput.create(trigger);
        });
      }) });
    };
    StreamEvmNftTransfer2.equals = function(valueA, valueB) {
      var _a2, _b;
      var transferA = StreamEvmNftTransfer2.create(valueA);
      var transferB = StreamEvmNftTransfer2.create(valueB);
      if (!transferA.chain.equals(transferB.chain)) {
        return false;
      }
      if (transferA.transactionHash !== transferB.transactionHash) {
        return false;
      }
      if (transferA.logIndex !== transferB.logIndex) {
        return false;
      }
      if (!transferA.contract.equals(transferB.contract)) {
        return false;
      }
      if (transferA.tokenId !== transferB.tokenId) {
        return false;
      }
      if (((_a2 = transferA.triggers) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = transferB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput.arrayEquals(transferA.triggers || [], transferB.triggers || [])) {
        return false;
      }
      return true;
    };
    StreamEvmNftTransfer2.prototype.equals = function(value) {
      return StreamEvmNftTransfer2.equals(this, value);
    };
    StreamEvmNftTransfer2.prototype.toJSON = function() {
      var _a2, _b;
      var data = this._data;
      return __assign2(__assign2({}, data), { chain: data.chain.toJSON(), from: data.from.toJSON(), to: data.to.toJSON(), contract: data.contract.toJSON(), operator: (_a2 = data.operator) === null || _a2 === void 0 ? void 0 : _a2.toJSON(), triggers: (_b = data.triggers) === null || _b === void 0 ? void 0 : _b.map(function(trigger) {
        return trigger.format();
      }) });
    };
    StreamEvmNftTransfer2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "transactionHash", {
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "from", {
      get: function() {
        return this._data.from;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "to", {
      get: function() {
        return this._data.to;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "contract", {
      get: function() {
        return this._data.contract;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "logIndex", {
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "tokenId", {
      get: function() {
        return this._data.tokenId;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "amount", {
      get: function() {
        return this._data.amount;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "tokenContractType", {
      get: function() {
        return this._data.tokenContractType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "tokenName", {
      get: function() {
        return this._data.tokenName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "tokenSymbol", {
      get: function() {
        return this._data.tokenSymbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "operator", {
      get: function() {
        return this._data.operator;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "triggers", {
      get: function() {
        return this._data.triggers;
      },
      enumerable: false,
      configurable: true
    });
    return StreamEvmNftTransfer2;
  }()
);
var StreamEvmTransaction = (
  /** @class */
  function() {
    function StreamEvmTransaction2(_a2) {
      var data = __rest(_a2, []);
      this._data = StreamEvmTransaction2.parse(data);
    }
    StreamEvmTransaction2.create = function(data) {
      if (data instanceof StreamEvmTransaction2) {
        return data;
      }
      return new StreamEvmTransaction2(data);
    };
    StreamEvmTransaction2.parse = function(data) {
      var signature = data.r != null && data.s != null && data.v != null ? EvmSignature.create({ r: data.r, s: data.s, v: data.v }) : void 0;
      return __assign2(__assign2({}, data), { chain: EvmChain.create(data.chain), gas: maybe(data.gas, BigNumber.create), gasPrice: maybe(data.gasPrice, BigNumber.create), nonce: maybe(data.nonce, BigNumber.create), input: maybe(data.input), fromAddress: EvmAddress.create(data.fromAddress), toAddress: maybe(data.toAddress, function(address) {
        return EvmAddress.create(address);
      }), value: maybe(data.value, BigNumber.create), type: maybe(data.type, function(type) {
        return +type;
      }), receiptCumulativeGasUsed: maybe(data.receiptCumulativeGasUsed, BigNumber.create), receiptGasUsed: maybe(data.receiptGasUsed, BigNumber.create), receiptContractAddress: maybe(data.receiptContractAddress, function(address) {
        return EvmAddress.create(address);
      }), receiptRoot: maybe(data.receiptRoot), receiptStatus: maybe(data.receiptStatus, function(status) {
        return +status;
      }), signature, transactionIndex: +data.transactionIndex, triggers: maybe(data.triggers, function(triggers) {
        return triggers.map(function(trigger) {
          return StreamTriggerOutput.create(trigger);
        });
      }) });
    };
    StreamEvmTransaction2.equals = function(valueA, valueB) {
      var _a2, _b;
      var transactionA = StreamEvmTransaction2.create(valueA);
      var transactionB = StreamEvmTransaction2.create(valueB);
      if (!transactionA.chain.equals(transactionB.chain)) {
        return false;
      }
      if (transactionA.hash !== transactionB.hash) {
        return false;
      }
      if (((_a2 = transactionA.triggers) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = transactionB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput.arrayEquals(transactionA.triggers || [], transactionB.triggers || [])) {
        return false;
      }
      return true;
    };
    StreamEvmTransaction2.prototype.equals = function(value) {
      return StreamEvmTransaction2.equals(this, value);
    };
    StreamEvmTransaction2.prototype.toJSON = function() {
      var _a2 = this._data, chain = _a2.chain, gas = _a2.gas, gasPrice = _a2.gasPrice, nonce = _a2.nonce, fromAddress = _a2.fromAddress, toAddress = _a2.toAddress, value = _a2.value, receiptContractAddress = _a2.receiptContractAddress, receiptCumulativeGasUsed = _a2.receiptCumulativeGasUsed, receiptGasUsed = _a2.receiptGasUsed, signature = _a2.signature, triggers = _a2.triggers, data = __rest(_a2, ["chain", "gas", "gasPrice", "nonce", "fromAddress", "toAddress", "value", "receiptContractAddress", "receiptCumulativeGasUsed", "receiptGasUsed", "signature", "triggers"]);
      return __assign2(__assign2({}, data), { chain: chain.toJSON(), gas: gas === null || gas === void 0 ? void 0 : gas.toString(), gasPrice: gasPrice === null || gasPrice === void 0 ? void 0 : gasPrice.toString(), nonce: nonce === null || nonce === void 0 ? void 0 : nonce.toString(), fromAddress: fromAddress.toJSON(), toAddress: toAddress === null || toAddress === void 0 ? void 0 : toAddress.toJSON(), value: value === null || value === void 0 ? void 0 : value.toString(), receiptCumulativeGasUsed: receiptCumulativeGasUsed === null || receiptCumulativeGasUsed === void 0 ? void 0 : receiptCumulativeGasUsed.toString(), receiptGasUsed: receiptGasUsed === null || receiptGasUsed === void 0 ? void 0 : receiptGasUsed.toString(), receiptContractAddress: receiptContractAddress === null || receiptContractAddress === void 0 ? void 0 : receiptContractAddress.toJSON(), r: signature === null || signature === void 0 ? void 0 : signature.r, s: signature === null || signature === void 0 ? void 0 : signature.s, v: signature === null || signature === void 0 ? void 0 : signature.v, triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function(trigger) {
        return trigger.format();
      }) });
    };
    StreamEvmTransaction2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamEvmTransaction2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "input", {
      get: function() {
        return this._data.input;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "transactionIndex", {
      get: function() {
        return this._data.transactionIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "fromAddress", {
      get: function() {
        return this._data.fromAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "toAddress", {
      get: function() {
        return this._data.toAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "receiptGasUsed", {
      get: function() {
        return this._data.receiptGasUsed;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "receiptCumulativeGasUsed", {
      get: function() {
        return this._data.receiptCumulativeGasUsed;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "receiptContractAddress", {
      get: function() {
        return this._data.receiptContractAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "signature", {
      get: function() {
        return this._data.signature;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "r", {
      get: function() {
        var _a2;
        return (_a2 = this.signature) === null || _a2 === void 0 ? void 0 : _a2.r;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "s", {
      get: function() {
        var _a2;
        return (_a2 = this.signature) === null || _a2 === void 0 ? void 0 : _a2.s;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "v", {
      get: function() {
        var _a2;
        return (_a2 = this.signature) === null || _a2 === void 0 ? void 0 : _a2.v;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "hash", {
      get: function() {
        return this._data.hash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "gas", {
      get: function() {
        return this._data.gas;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "gasPrice", {
      get: function() {
        return this._data.gasPrice;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "nonce", {
      get: function() {
        return this._data.nonce;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "value", {
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "type", {
      get: function() {
        return this._data.type;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "receiptRoot", {
      get: function() {
        return this._data.receiptRoot;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "receiptStatus", {
      get: function() {
        return this._data.receiptStatus;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "triggers", {
      get: function() {
        return this._data.triggers;
      },
      enumerable: false,
      configurable: true
    });
    return StreamEvmTransaction2;
  }()
);
var StreamEvmTransactionLog = (
  /** @class */
  function() {
    function StreamEvmTransactionLog2(_a2) {
      var data = __rest(_a2, []);
      this._data = StreamEvmTransactionLog2.parse(data);
    }
    StreamEvmTransactionLog2.create = function(data) {
      if (data instanceof StreamEvmTransactionLog2) {
        return data;
      }
      return new StreamEvmTransactionLog2(data);
    };
    StreamEvmTransactionLog2.parse = function(data) {
      return __assign2(__assign2({}, data), { chain: EvmChain.create(data.chain), logIndex: +data.logIndex, address: EvmAddress.create(data.address), topic0: maybe(data.topic0), topic1: maybe(data.topic1), topic2: maybe(data.topic2), topic3: maybe(data.topic3), triggers: maybe(data.triggers, function(triggers) {
        return triggers.map(function(trigger) {
          return StreamTriggerOutput.create(trigger);
        });
      }) });
    };
    StreamEvmTransactionLog2.equals = function(valueA, valueB) {
      var _a2, _b;
      var transactionLogA = StreamEvmTransactionLog2.create(valueA);
      var transactionLogB = StreamEvmTransactionLog2.create(valueB);
      if (!transactionLogA.chain.equals(transactionLogB.chain)) {
        return false;
      }
      if (transactionLogA.transactionHash !== transactionLogB.transactionHash) {
        return false;
      }
      if (transactionLogA.logIndex !== transactionLogB.logIndex) {
        return false;
      }
      if (((_a2 = transactionLogA.triggers) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = transactionLogB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput.arrayEquals(transactionLogA.triggers || [], transactionLogB.triggers || [])) {
        return false;
      }
      return true;
    };
    StreamEvmTransactionLog2.prototype.equals = function(value) {
      return StreamEvmTransactionLog2.equals(this, value);
    };
    StreamEvmTransactionLog2.prototype.toJSON = function() {
      var _a2 = this._data, chain = _a2.chain, address = _a2.address, triggers = _a2.triggers, data = __rest(_a2, ["chain", "address", "triggers"]);
      return __assign2(__assign2({}, data), { chain: chain.toJSON(), address: address.toJSON(), triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function(trigger) {
        return trigger.format();
      }) });
    };
    StreamEvmTransactionLog2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "logIndex", {
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "transactionHash", {
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "address", {
      get: function() {
        return this._data.address;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "data", {
      get: function() {
        return this._data.data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "topic0", {
      get: function() {
        return this._data.topic0;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "topic1", {
      get: function() {
        return this._data.topic1;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "topic2", {
      get: function() {
        return this._data.topic2;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "topic3", {
      get: function() {
        return this._data.topic3;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "triggers", {
      get: function() {
        return this._data.triggers;
      },
      enumerable: false,
      configurable: true
    });
    return StreamEvmTransactionLog2;
  }()
);
var StreamNativeBalance = (
  /** @class */
  function() {
    function StreamNativeBalance2(data) {
      this._data = StreamNativeBalance2.parse(data);
    }
    StreamNativeBalance2.create = function(data) {
      if (data instanceof StreamNativeBalance2) {
        return data;
      }
      return new StreamNativeBalance2(data);
    };
    StreamNativeBalance2.parse = function(input) {
      return {
        address: EvmAddress.create(input.address),
        balance: EvmNative.create(input.balance, "wei")
      };
    };
    StreamNativeBalance2.equals = function(valueA, valueB) {
      var nativeBalanceTriggerA = StreamNativeBalance2.create(valueA);
      var nativeBalanceTriggerB = StreamNativeBalance2.create(valueB);
      return nativeBalanceTriggerA.address.equals(nativeBalanceTriggerB.address) && nativeBalanceTriggerA.balance.equals(nativeBalanceTriggerB.balance);
    };
    StreamNativeBalance2.prototype.equals = function(value) {
      return StreamNativeBalance2.equals(this, value);
    };
    StreamNativeBalance2.prototype.toJSON = function() {
      var _a2 = this._data, address = _a2.address, balance = _a2.balance;
      return {
        address: address.toJSON(),
        balance: balance.format()
      };
    };
    StreamNativeBalance2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamNativeBalance2.prototype, "address", {
      get: function() {
        return this._data.address;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamNativeBalance2.prototype, "balance", {
      get: function() {
        return this._data.balance;
      },
      enumerable: false,
      configurable: true
    });
    return StreamNativeBalance2;
  }()
);
var StreamEvmNftTokenApproval = (
  /** @class */
  function() {
    function StreamEvmNftTokenApproval2(data) {
      this.data = data;
    }
    StreamEvmNftTokenApproval2.create = function(data) {
      var chain = EvmChain.create(data.chain);
      return new StreamEvmNftTokenApproval2(__assign2(__assign2({}, data), { chain }));
    };
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "chain", {
      get: function() {
        return this.data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "contract", {
      get: function() {
        return this.data.contract;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "account", {
      get: function() {
        return this.data.account;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "operator", {
      get: function() {
        return this.data.operator;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "approvedAll", {
      get: function() {
        return this.data.approvedAll;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "tokenId", {
      get: function() {
        return this.data.tokenId;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "transactionHash", {
      get: function() {
        return this.data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "logIndex", {
      get: function() {
        return this.data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "tokenContractType", {
      get: function() {
        return this.data.tokenContractType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "tokenName", {
      get: function() {
        return this.data.tokenName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "tokenSymbol", {
      get: function() {
        return this.data.tokenSymbol;
      },
      enumerable: false,
      configurable: true
    });
    StreamEvmNftTokenApproval2.prototype.toJSON = function() {
      return {
        chain: this.chain.toJSON(),
        contract: this.contract,
        account: this.account,
        operator: this.operator,
        approvedAll: this.approvedAll,
        tokenId: this.tokenId,
        transactionHash: this.transactionHash,
        logIndex: this.logIndex,
        tokenContractType: this.tokenContractType,
        tokenName: this.tokenName,
        tokenSymbol: this.tokenSymbol
      };
    };
    StreamEvmNftTokenApproval2.prototype.format = function() {
      return this.toJSON();
    };
    StreamEvmNftTokenApproval2.prototype.equals = function(value) {
      return this.contract === value.contract && this.account === value.account && this.operator === value.operator && this.approvedAll === value.approvedAll && this.tokenId === value.tokenId && this.transactionHash === value.transactionHash && this.logIndex === value.logIndex && this.tokenContractType === value.tokenContractType && this.tokenName === value.tokenName && this.tokenSymbol === value.tokenSymbol;
    };
    return StreamEvmNftTokenApproval2;
  }()
);
var EvmStreamResultParser = (
  /** @class */
  function() {
    function EvmStreamResultParser2() {
    }
    EvmStreamResultParser2.parseChainId = function(value) {
      return value === "" ? EvmChain.ETHEREUM : EvmChain.create(value);
    };
    EvmStreamResultParser2.parseErc20Transfers = function(value, chain) {
      return value.map(function(transfer) {
        return StreamErc20Transfer.create(__assign2({ chain }, transfer));
      });
    };
    EvmStreamResultParser2.parseErc20Approvals = function(value, chain) {
      return value.map(function(approval) {
        return StreamErc20Approval.create(__assign2({ chain }, approval));
      });
    };
    EvmStreamResultParser2.parseNftTransfers = function(value, chain) {
      return value.map(function(transfer) {
        return StreamEvmNftTransfer.create(__assign2({ chain }, transfer));
      });
    };
    EvmStreamResultParser2.parseNftApprovals = function(value, chain) {
      return {
        ERC721: value.ERC721.map(function(approval) {
          return StreamErc721Approval.create(__assign2({ chain }, approval));
        }),
        ERC1155: value.ERC1155.map(function(approval) {
          return StreamErc1155Approval.create(__assign2({ chain }, approval));
        })
      };
    };
    EvmStreamResultParser2.parseNftTokenApprovals = function(values, chain) {
      return values.map(function(value) {
        return StreamEvmNftTokenApproval.create(__assign2({ chain }, value));
      });
    };
    EvmStreamResultParser2.parseBlock = function(value, chain) {
      if (value.number === "") {
        return EvmSimpleBlock.create({
          chain,
          number: 0,
          hash: "",
          timestamp: "0"
        });
      }
      return EvmSimpleBlock.create(__assign2({ chain }, value));
    };
    EvmStreamResultParser2.parseLogs = function(value, chain) {
      return value.map(function(log) {
        return StreamEvmTransactionLog.create(__assign2({ chain }, log));
      });
    };
    EvmStreamResultParser2.parseTransactions = function(value, chain) {
      return value.map(function(transaction) {
        return StreamEvmTransaction.create(__assign2({ chain }, transaction));
      });
    };
    EvmStreamResultParser2.parseInternalTransactions = function(value, chain) {
      return value.map(function(transaction) {
        return StreamEvmInternalTransaction.create(__assign2({ chain }, transaction));
      });
    };
    EvmStreamResultParser2.parseNativeBalances = function(value) {
      return value.map(function(nativeBalance) {
        return StreamNativeBalance.create(nativeBalance);
      });
    };
    var _a2;
    _a2 = EvmStreamResultParser2;
    EvmStreamResultParser2.parse = function(value) {
      var chain = _a2.parseChainId(value.chainId);
      return {
        chain,
        erc20Transfers: _a2.parseErc20Transfers(value.erc20Transfers, chain),
        erc20Approvals: _a2.parseErc20Approvals(value.erc20Approvals, chain),
        nftTransfers: _a2.parseNftTransfers(value.nftTransfers, chain),
        nftApprovals: _a2.parseNftApprovals(value.nftApprovals, chain),
        ntfTokenApprovals: _a2.parseNftTokenApprovals(value.nftTokenApprovals, chain),
        block: _a2.parseBlock(value.block, chain),
        logs: _a2.parseLogs(value.logs, chain),
        txs: _a2.parseTransactions(value.txs, chain),
        txsInternal: _a2.parseInternalTransactions(value.txsInternal, chain),
        abi: value.abi,
        retries: value.retries,
        confirmed: value.confirmed,
        streamId: value.streamId,
        tag: value.tag,
        nativeBalances: _a2.parseNativeBalances(value.nativeBalances)
      };
    };
    return EvmStreamResultParser2;
  }()
);
var EvmStreamResult = (
  /** @class */
  function() {
    function EvmStreamResult2(data) {
      this._data = EvmStreamResult2.parse(data);
    }
    EvmStreamResult2.create = function(data) {
      if (data instanceof EvmStreamResult2) {
        return data;
      }
      return new EvmStreamResult2(data);
    };
    EvmStreamResult2.equals = function(valueA, valueB) {
      var evmStreamResultA = EvmStreamResult2.create(valueA);
      var evmStreamResultB = EvmStreamResult2.create(valueB);
      if (!evmStreamResultA.chain.equals(evmStreamResultB.chain)) {
        return false;
      }
      if (!evmStreamResultA.block.equals(evmStreamResultB.block)) {
        return false;
      }
      if (evmStreamResultA.streamId !== evmStreamResultB.streamId) {
        return false;
      }
      if (evmStreamResultA.tag !== evmStreamResultB.tag) {
        return false;
      }
      if (evmStreamResultA.confirmed !== evmStreamResultB.confirmed) {
        return false;
      }
      return true;
    };
    EvmStreamResult2.prototype.equals = function(value) {
      return EvmStreamResult2.equals(this, value);
    };
    EvmStreamResult2.prototype.toJSON = function() {
      return EvmStreamResultFormatter.toJSON(this._data);
    };
    EvmStreamResult2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmStreamResult2.prototype, "abiInterface", {
      get: function() {
        if (!this.abi || !this.abi.length) {
          return null;
        }
        return new Interface(this.abi);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "decodedLogs", {
      get: function() {
        var abiInterface = this.abiInterface;
        if (!abiInterface) {
          return [];
        }
        return this.logs.map(function(log) {
          return abiInterface.parseLog({
            data: log.data,
            topics: [log.topic0, log.topic1, log.topic2, log.topic3].filter(isNotEmpty)
          });
        });
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "streamId", {
      get: function() {
        return this._data.streamId;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "tag", {
      get: function() {
        return this._data.tag;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "block", {
      get: function() {
        return this._data.block;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "retries", {
      get: function() {
        return this._data.retries;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "confirmed", {
      get: function() {
        return this._data.confirmed;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "erc20Approvals", {
      get: function() {
        return this._data.erc20Approvals;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "erc20Transfers", {
      get: function() {
        return this._data.erc20Transfers;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "logs", {
      get: function() {
        return this._data.logs;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "nftApprovals", {
      /**
       * @deprecated Use `ntfTokenApprovals` instead. This property will be removed in the future.
       */
      get: function() {
        return this._data.nftApprovals;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "ntfTokenApprovals", {
      get: function() {
        return this._data.ntfTokenApprovals;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "nftTransfers", {
      get: function() {
        return this._data.nftTransfers;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "txs", {
      get: function() {
        return this._data.txs;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "txsInternal", {
      get: function() {
        return this._data.txsInternal;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "abi", {
      get: function() {
        return this._data.abi;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "nativeBalances", {
      get: function() {
        return this._data.nativeBalances;
      },
      enumerable: false,
      configurable: true
    });
    EvmStreamResult2.parse = function(data) {
      return EvmStreamResultParser.parse(data);
    };
    return EvmStreamResult2;
  }()
);
var isNotEmpty = function(value) {
  return value != null;
};
var addAddressAptosOperation = {
  method: "POST",
  name: "addAddressAptos",
  id: "aptosStreamsAddAddresses",
  groupName: "aptosStreams",
  urlPathPattern: "/streams/aptos/{id}/address",
  bodyParamNames: ["address"],
  urlPathParamNames: ["id"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$o,
  getRequestBody: getRequestBody$d,
  deserializeResponse: deserializeResponse$o,
  serializeRequest: serializeRequest$o,
  deserializeRequest: deserializeRequest$o
};
function getRequestUrlParams$o(request) {
  return {
    id: request.id
  };
}
function getRequestBody$d(request) {
  return {
    address: Array.isArray(request.address) ? request.address.map(function(a) {
      return AptosAddress.create(a).address;
    }) : AptosAddress.create(request.address).address
  };
}
function deserializeResponse$o(jsonResponse) {
  var data = toCamelCase(jsonResponse);
  return __assign2(__assign2({}, data), { address: data.address ? typeof data.address === "string" ? AptosAddress.create(data.address) : data.address.map(function(address) {
    return AptosAddress.create(address);
  }) : void 0 });
}
function serializeRequest$o(request) {
  return {
    id: request.id,
    address: Array.isArray(request.address) ? request.address.map(function(a) {
      return AptosAddress.create(a).address;
    }) : AptosAddress.create(request.address).address
  };
}
function deserializeRequest$o(jsonRequest) {
  return {
    id: jsonRequest.id,
    address: Array.isArray(jsonRequest.address) ? jsonRequest.address.map(function(a) {
      return AptosAddress.create(a);
    }) : AptosAddress.create(jsonRequest.address)
  };
}
var getStreamsAptosOperation = {
  method: "GET",
  name: "getStreamsAptos",
  id: "aptosStreamsGetAll",
  groupName: "aptosStreams",
  urlSearchParamNames: ["cursor", "limit"],
  urlPathPattern: "/streams/aptos",
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$n,
  deserializeResponse: deserializeResponse$n,
  serializeRequest: serializeRequest$n,
  deserializeRequest: deserializeRequest$n
};
function getRequestUrlParams$n(request) {
  return {
    limit: maybe(request.limit, String),
    cursor: request.cursor
  };
}
function deserializeResponse$n(jsonResponse) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(stream) {
    return AptosStream.create(stream);
  });
}
function serializeRequest$n(request) {
  return {
    cursor: request.cursor,
    limit: request.limit
  };
}
function deserializeRequest$n(jsonRequest) {
  return {
    cursor: jsonRequest.cursor,
    limit: jsonRequest.limit
  };
}
var getStreamAptosOperation = {
  method: "GET",
  name: "getStreamAptos",
  id: "aptosStreamsGet",
  groupName: "aptosStreams",
  urlPathPattern: "/streams/aptos/{id}",
  urlPathParamNames: ["id"],
  getRequestUrlParams: getRequestUrlParams$m,
  deserializeResponse: deserializeResponse$m,
  serializeRequest: serializeRequest$m,
  deserializeRequest: deserializeRequest$m
};
function getRequestUrlParams$m(request) {
  return {
    id: request.id
  };
}
function deserializeResponse$m(jsonResponse) {
  return AptosStream.create(jsonResponse);
}
function serializeRequest$m(request) {
  return {
    id: request.id
  };
}
function deserializeRequest$m(jsonRequest) {
  return {
    id: jsonRequest.id
  };
}
var createStreamAptosOperation = {
  method: "PUT",
  name: "createStreamAptos",
  id: "aptosStreamsCreate",
  groupName: "aptosStreams",
  urlPathPattern: "/streams/aptos",
  bodyParamNames: [
    "webhookUrl",
    "tag",
    "functions",
    "events",
    "network",
    "includePayload",
    "includeEvents",
    "includeChanges",
    "description",
    "demo",
    "allAddresses"
  ],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$l,
  getRequestBody: getRequestBody$c,
  deserializeResponse: deserializeResponse$l,
  serializeRequest: serializeRequest$l,
  deserializeRequest: deserializeRequest$l
};
function getRequestUrlParams$l() {
  return {};
}
function getRequestBody$c(request) {
  return {
    allAddresses: request.allAddresses,
    demo: request.demo,
    description: request.description,
    includeChanges: request.includeChanges,
    includeEvents: request.includeEvents,
    includePayload: request.includePayload,
    network: request.network.map(function(network) {
      return AptosNetwork.create(network);
    }),
    events: request.events,
    functions: request.functions,
    tag: request.tag,
    webhookUrl: request.webhookUrl
  };
}
function deserializeResponse$l(jsonResponse) {
  return AptosStream.create(jsonResponse);
}
function serializeRequest$l(request) {
  return {
    allAddresses: request.allAddresses,
    demo: request.demo,
    description: request.description,
    includeChanges: request.includeChanges,
    includeEvents: request.includeEvents,
    includePayload: request.includePayload,
    network: request.network.map(function(network) {
      return AptosNetwork.create(network).network;
    }),
    events: request.events,
    functions: request.functions,
    tag: request.tag,
    webhookUrl: request.webhookUrl
  };
}
function deserializeRequest$l(jsonRequest) {
  return {
    allAddresses: jsonRequest.allAddresses,
    demo: jsonRequest.demo,
    description: jsonRequest.description,
    includeChanges: jsonRequest.includeChanges,
    includeEvents: jsonRequest.includeEvents,
    includePayload: jsonRequest.includePayload,
    network: jsonRequest.network.map(function(network) {
      return AptosNetwork.create(network);
    }),
    events: jsonRequest.events,
    functions: jsonRequest.functions,
    tag: jsonRequest.tag,
    webhookUrl: jsonRequest.webhookUrl
  };
}
var deleteAddressAptosOperation = {
  method: "DELETE",
  name: "deleteAddressAptos",
  id: "aptosStreamsDeleteAddresses",
  groupName: "aptosStreams",
  urlPathParamNames: ["id"],
  urlPathPattern: "/streams/aptos/{id}/address",
  bodyParamNames: ["address"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$k,
  getRequestBody: getRequestBody$b,
  deserializeResponse: deserializeResponse$k,
  serializeRequest: serializeRequest$k,
  deserializeRequest: deserializeRequest$k
};
function getRequestUrlParams$k(request) {
  return {
    id: request.id
  };
}
function getRequestBody$b(request) {
  return {
    address: Array.isArray(request.address) ? request.address.map(function(address) {
      return AptosAddress.create(address).address;
    }) : AptosAddress.create(request.address).address
  };
}
function deserializeResponse$k(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$k(request) {
  return {
    id: request.id,
    address: Array.isArray(request.address) ? request.address.map(function(address) {
      return AptosAddress.create(address).address;
    }) : AptosAddress.create(request.address).address
  };
}
function deserializeRequest$k(jsonRequest) {
  return {
    id: jsonRequest.id,
    address: Array.isArray(jsonRequest.address) ? jsonRequest.address.map(function(address) {
      return AptosAddress.create(address);
    }) : AptosAddress.create(jsonRequest.address)
  };
}
var deleteStreamAptosOperation = {
  method: "DELETE",
  name: "deleteStreamAptos",
  id: "aptosStreamsDelete",
  groupName: "aptosStreams",
  urlPathParamNames: ["id"],
  urlPathPattern: "/streams/aptos/{id}",
  bodyParamNames: [],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$j,
  getRequestBody: getRequestBody$a,
  deserializeResponse: deserializeResponse$j,
  serializeRequest: serializeRequest$j,
  deserializeRequest: deserializeRequest$j
};
function getRequestUrlParams$j(request) {
  return {
    id: request.id
  };
}
function getRequestBody$a() {
  return {};
}
function deserializeResponse$j(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$j(request) {
  return {
    id: request.id
  };
}
function deserializeRequest$j(jsonRequest) {
  return {
    id: jsonRequest.id
  };
}
var getAddressesAptosOperation = {
  method: "GET",
  name: "getAddressesAptos",
  id: "aptosStreamsGetAddresses",
  groupName: "aptosStreams",
  urlPathParamNames: ["id"],
  urlSearchParamNames: ["cursor", "limit"],
  urlPathPattern: "/streams/aptos/{id}/address",
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$i,
  deserializeResponse: deserializeResponse$i,
  serializeRequest: serializeRequest$i,
  deserializeRequest: deserializeRequest$i
};
function getRequestUrlParams$i(request) {
  return {
    id: request.id,
    limit: maybe(request.limit, String),
    cursor: request.cursor
  };
}
function deserializeResponse$i(jsonResponse) {
  var _a2;
  return {
    result: ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(address) {
      return AptosAddress.create(address.address);
    }),
    total: jsonResponse.total
  };
}
function serializeRequest$i(request) {
  return {
    id: request.id,
    limit: request.limit,
    cursor: request.cursor
  };
}
function deserializeRequest$i(jsonRequest) {
  return {
    id: jsonRequest.id,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor
  };
}
var updateStreamAptosOperation = {
  method: "POST",
  name: "updateStreamAptos",
  id: "aptosStreamsUpdate",
  groupName: "aptosStreams",
  urlPathParamNames: ["id"],
  urlPathPattern: "/streams/aptos/{id}",
  bodyParamNames: [
    "allAddresses",
    "demo",
    "description",
    "includeChanges",
    "includeEvents",
    "includePayload",
    "network",
    "events",
    "functions",
    "tag",
    "webhookUrl"
  ],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$h,
  getRequestBody: getRequestBody$9,
  deserializeResponse: deserializeResponse$h,
  serializeRequest: serializeRequest$h,
  deserializeRequest: deserializeRequest$h
};
function getRequestUrlParams$h(request) {
  return {
    id: request.id
  };
}
function getRequestBody$9(request) {
  return {
    allAddresses: request.allAddresses,
    demo: request.demo,
    description: request.description,
    includeChanges: request.includeChanges,
    includeEvents: request.includeEvents,
    includePayload: request.includePayload,
    network: request.network.map(function(network) {
      return AptosNetwork.create(network);
    }),
    events: request.events,
    functions: request.functions,
    tag: request.tag,
    webhookUrl: request.webhookUrl
  };
}
function deserializeResponse$h(jsonResponse) {
  return AptosStream.create(jsonResponse);
}
function serializeRequest$h(request) {
  return {
    id: request.id,
    allAddresses: request.allAddresses,
    demo: request.demo,
    description: request.description,
    includeChanges: request.includeChanges,
    includeEvents: request.includeEvents,
    includePayload: request.includePayload,
    network: request.network.map(function(network) {
      return AptosNetwork.create(network).network;
    }),
    events: request.events,
    functions: request.functions,
    tag: request.tag,
    webhookUrl: request.webhookUrl
  };
}
function deserializeRequest$h(jsonRequest) {
  return {
    id: jsonRequest.id,
    allAddresses: jsonRequest.allAddresses,
    demo: jsonRequest.demo,
    description: jsonRequest.description,
    includeChanges: jsonRequest.includeChanges,
    includeEvents: jsonRequest.includeEvents,
    includePayload: jsonRequest.includePayload,
    network: jsonRequest.network.map(function(network) {
      return AptosNetwork.create(network);
    }),
    events: jsonRequest.events,
    functions: jsonRequest.functions,
    tag: jsonRequest.tag,
    webhookUrl: jsonRequest.webhookUrl
  };
}
var updateStreamStatusAptosOperation = {
  method: "POST",
  name: "updateStreamStatusAptos",
  id: "aptosStreamsUpdateStatus",
  groupName: "aptosStreams",
  urlPathParamNames: ["id"],
  urlPathPattern: "/streams/aptos/{id}/status",
  bodyParamNames: ["status"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$g,
  getRequestBody: getRequestBody$8,
  deserializeResponse: deserializeResponse$g,
  serializeRequest: serializeRequest$g,
  deserializeRequest: deserializeRequest$g
};
function getRequestUrlParams$g(request) {
  return {
    id: request.id
  };
}
function getRequestBody$8(request) {
  return {
    status: request.status
  };
}
function deserializeResponse$g(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$g(request) {
  return {
    id: request.id,
    status: request.status
  };
}
function deserializeRequest$g(jsonRequest) {
  return {
    id: jsonRequest.id,
    status: jsonRequest.status
  };
}
var addAddressEvmOperation = {
  method: "POST",
  name: "addAddressEvm",
  id: "AddAddressToStream",
  groupName: "evmStreams",
  urlPathPattern: "/streams/evm/{id}/address",
  bodyParamNames: ["address"],
  urlPathParamNames: ["id"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$f,
  getRequestBody: getRequestBody$7,
  deserializeResponse: deserializeResponse$f,
  serializeRequest: serializeRequest$f,
  deserializeRequest: deserializeRequest$f
};
function getRequestUrlParams$f(request) {
  return {
    id: request.id
  };
}
function getRequestBody$7(request) {
  return {
    address: Array.isArray(request.address) ? request.address.map(function(a) {
      return EvmAddress.create(a).checksum;
    }) : EvmAddress.create(request.address).checksum
  };
}
function deserializeResponse$f(jsonResponse) {
  var data = toCamelCase(jsonResponse);
  return __assign2(__assign2({}, data), { address: data.address ? typeof data.address === "string" ? EvmAddress.create(data.address) : data.address.map(function(address) {
    return EvmAddress.create(address);
  }) : void 0 });
}
function serializeRequest$f(request) {
  return {
    id: request.id,
    address: Array.isArray(request.address) ? request.address.map(function(a) {
      return EvmAddress.create(a).checksum;
    }) : EvmAddress.create(request.address).checksum
  };
}
function deserializeRequest$f(jsonRequest) {
  return {
    id: jsonRequest.id,
    address: Array.isArray(jsonRequest.address) ? jsonRequest.address.map(function(a) {
      return EvmAddress.create(a);
    }) : EvmAddress.create(jsonRequest.address)
  };
}
var getStreamsEvmOperation = {
  method: "GET",
  name: "getStreamsEvm",
  id: "GetStreams",
  groupName: "evmStreams",
  urlSearchParamNames: ["cursor", "limit"],
  urlPathPattern: "/streams/evm",
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$e,
  deserializeResponse: deserializeResponse$e,
  serializeRequest: serializeRequest$e,
  deserializeRequest: deserializeRequest$e
};
function getRequestUrlParams$e(request) {
  return {
    limit: maybe(request.limit, String),
    cursor: request.cursor
  };
}
function deserializeResponse$e(jsonResponse) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(stream) {
    return EvmStream.create(stream);
  });
}
function serializeRequest$e(request) {
  return {
    cursor: request.cursor,
    limit: request.limit
  };
}
function deserializeRequest$e(jsonRequest) {
  return {
    cursor: jsonRequest.cursor,
    limit: jsonRequest.limit
  };
}
var getStreamEvmOperation = {
  method: "GET",
  name: "getStreamEvm",
  id: "GetStream",
  groupName: "evmStreams",
  urlPathPattern: "/streams/evm/{id}",
  urlPathParamNames: ["id"],
  getRequestUrlParams: getRequestUrlParams$d,
  deserializeResponse: deserializeResponse$d,
  serializeRequest: serializeRequest$d,
  deserializeRequest: deserializeRequest$d
};
function getRequestUrlParams$d(request) {
  return {
    id: request.id
  };
}
function deserializeResponse$d(jsonResponse) {
  return EvmStream.create(jsonResponse);
}
function serializeRequest$d(request) {
  return {
    id: request.id
  };
}
function deserializeRequest$d(jsonRequest) {
  return {
    id: jsonRequest.id
  };
}
var createStreamEvmOperation = {
  method: "PUT",
  name: "createStreamEvm",
  id: "CreateStream",
  groupName: "evmStreams",
  urlPathPattern: "/streams/evm",
  bodyParamNames: [
    "webhookUrl",
    "description",
    "tag",
    "topic0",
    "allAddresses",
    "includeNativeTxs",
    "includeContractLogs",
    "includeInternalTxs",
    "includeAllTxLogs",
    "getNativeBalances",
    "chains",
    "abi",
    "advancedOptions",
    "demo",
    "triggers"
  ],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$c,
  getRequestBody: getRequestBody$6,
  deserializeResponse: deserializeResponse$c,
  serializeRequest: serializeRequest$c,
  deserializeRequest: deserializeRequest$c
};
function getRequestUrlParams$c() {
  return {};
}
function getRequestBody$6(request) {
  var _a2;
  return {
    webhookUrl: request.webhookUrl,
    description: request.description,
    tag: request.tag,
    topic0: request.topic0,
    allAddresses: request.allAddresses,
    includeNativeTxs: request.includeNativeTxs,
    includeContractLogs: request.includeContractLogs,
    includeInternalTxs: request.includeInternalTxs,
    includeAllTxLogs: request.includeAllTxLogs,
    getNativeBalances: request.getNativeBalances,
    chainIds: request.chains.map(function(chain) {
      return EvmChain.create(chain).apiHex;
    }),
    abi: request.abi,
    advancedOptions: request.advancedOptions,
    demo: request.demo,
    triggers: (_a2 = request.triggers) === null || _a2 === void 0 ? void 0 : _a2.map(function(trigger) {
      return StreamTrigger.create(trigger).format();
    })
  };
}
function deserializeResponse$c(jsonResponse) {
  return EvmStream.create(jsonResponse);
}
function serializeRequest$c(request) {
  var _a2;
  return {
    webhookUrl: request.webhookUrl,
    description: request.description,
    tag: request.tag,
    topic0: request.topic0,
    allAddresses: request.allAddresses,
    includeNativeTxs: request.includeNativeTxs,
    includeContractLogs: request.includeContractLogs,
    includeInternalTxs: request.includeInternalTxs,
    includeAllTxLogs: request.includeAllTxLogs,
    chainIds: request.chains.map(function(chain) {
      return EvmChain.create(chain).apiHex;
    }),
    abi: request.abi,
    advancedOptions: request.advancedOptions,
    demo: request.demo,
    triggers: (_a2 = request.triggers) === null || _a2 === void 0 ? void 0 : _a2.map(function(trigger) {
      return StreamTrigger.create(trigger).format();
    })
  };
}
function deserializeRequest$c(jsonRequest) {
  var _a2;
  return {
    webhookUrl: jsonRequest.webhookUrl,
    description: jsonRequest.description,
    tag: jsonRequest.tag,
    topic0: jsonRequest.topic0,
    allAddresses: jsonRequest.allAddresses,
    includeNativeTxs: jsonRequest.includeNativeTxs,
    includeContractLogs: jsonRequest.includeContractLogs,
    includeInternalTxs: jsonRequest.includeInternalTxs,
    includeAllTxLogs: jsonRequest.includeAllTxLogs,
    chains: jsonRequest.chainIds.map(function(chainId) {
      return EvmChain.create(chainId);
    }),
    abi: jsonRequest.abi,
    advancedOptions: jsonRequest.advancedOptions,
    demo: jsonRequest.demo,
    triggers: (_a2 = jsonRequest.triggers) === null || _a2 === void 0 ? void 0 : _a2.map(function(trigger) {
      return StreamTrigger.create(trigger);
    })
  };
}
var deleteAddressEvmOperation = {
  method: "DELETE",
  name: "deleteAddressEvm",
  id: "DeleteAddressFromStream",
  groupName: "evmStreams",
  urlPathParamNames: ["id"],
  urlPathPattern: "/streams/evm/{id}/address",
  bodyParamNames: ["address"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$b,
  getRequestBody: getRequestBody$5,
  deserializeResponse: deserializeResponse$b,
  serializeRequest: serializeRequest$b,
  deserializeRequest: deserializeRequest$b
};
function getRequestUrlParams$b(request) {
  return {
    id: request.id
  };
}
function getRequestBody$5(request) {
  return {
    address: Array.isArray(request.address) ? request.address.map(function(address) {
      return EvmAddress.create(address).lowercase;
    }) : EvmAddress.create(request.address).lowercase
  };
}
function deserializeResponse$b(jsonResponse) {
  var data = toCamelCase(jsonResponse);
  return {
    streamId: jsonResponse.streamId,
    address: data.address ? typeof data.address === "string" ? EvmAddress.create(data.address) : data.address.map(function(address) {
      return EvmAddress.create(address);
    }) : void 0
  };
}
function serializeRequest$b(request) {
  return {
    id: request.id,
    address: Array.isArray(request.address) ? request.address.map(function(address) {
      return EvmAddress.create(address).lowercase;
    }) : EvmAddress.create(request.address).lowercase
  };
}
function deserializeRequest$b(jsonRequest) {
  return {
    id: jsonRequest.id,
    address: Array.isArray(jsonRequest.address) ? jsonRequest.address.map(function(address) {
      return EvmAddress.create(address);
    }) : EvmAddress.create(jsonRequest.address)
  };
}
var deleteStreamEvmOperation = {
  method: "DELETE",
  name: "deleteStreamEvm",
  id: "DeleteStream",
  groupName: "evmStreams",
  urlPathParamNames: ["id"],
  urlPathPattern: "/streams/evm/{id}",
  bodyParamNames: [],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$a,
  getRequestBody: getRequestBody$4,
  deserializeResponse: deserializeResponse$a,
  serializeRequest: serializeRequest$a,
  deserializeRequest: deserializeRequest$a
};
function getRequestUrlParams$a(request) {
  return {
    id: request.id
  };
}
function getRequestBody$4() {
  return {};
}
function deserializeResponse$a(jsonResponse) {
  return EvmStream.create(jsonResponse);
}
function serializeRequest$a(request) {
  return {
    id: request.id
  };
}
function deserializeRequest$a(jsonRequest) {
  return {
    id: jsonRequest.id
  };
}
var getAddressesEvmOperation = {
  method: "GET",
  name: "getAddressesEvm",
  id: "GetAddresses",
  groupName: "evmStreams",
  urlPathParamNames: ["id"],
  urlSearchParamNames: ["cursor", "limit"],
  urlPathPattern: "/streams/evm/{id}/address",
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$9,
  deserializeResponse: deserializeResponse$9,
  serializeRequest: serializeRequest$9,
  deserializeRequest: deserializeRequest$9
};
function getRequestUrlParams$9(request) {
  return {
    id: request.id,
    limit: maybe(request.limit, String),
    cursor: request.cursor
  };
}
function deserializeResponse$9(jsonResponse) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(stream) {
    return __assign2(__assign2({}, stream), { address: stream.address ? EvmAddress.create(stream.address) : void 0 });
  });
}
function serializeRequest$9(request) {
  return {
    id: request.id,
    limit: request.limit,
    cursor: request.cursor
  };
}
function deserializeRequest$9(jsonRequest) {
  return {
    id: jsonRequest.id,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor
  };
}
var updateStreamEvmOperation = {
  method: "POST",
  name: "updateStreamEvm",
  id: "UpdateStream",
  groupName: "evmStreams",
  urlPathParamNames: ["id"],
  urlPathPattern: "/streams/evm/{id}",
  bodyParamNames: [
    "webhookUrl",
    "description",
    "tag",
    "topic0",
    "allAddresses",
    "includeNativeTxs",
    "includeContractLogs",
    "includeInternalTxs",
    "includeAllTxLogs",
    "getNativeBalances",
    "chains",
    "abi",
    "advancedOptions",
    "demo",
    "triggers"
  ],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$8,
  getRequestBody: getRequestBody$3,
  deserializeResponse: deserializeResponse$8,
  serializeRequest: serializeRequest$8,
  deserializeRequest: deserializeRequest$8
};
function getRequestUrlParams$8(request) {
  return {
    id: request.id
  };
}
function getRequestBody$3(request) {
  var _a2, _b;
  return {
    webhookUrl: request.webhookUrl,
    description: request.description,
    tag: request.tag,
    topic0: request.topic0,
    allAddresses: request.allAddresses,
    includeNativeTxs: request.includeNativeTxs,
    includeContractLogs: request.includeContractLogs,
    includeInternalTxs: request.includeInternalTxs,
    includeAllTxLogs: request.includeAllTxLogs,
    getNativeBalances: request.getNativeBalances,
    chainIds: (_a2 = request.chains) === null || _a2 === void 0 ? void 0 : _a2.map(function(chain) {
      return EvmChain.create(chain).apiHex;
    }),
    abi: request.abi,
    advancedOptions: request.advancedOptions,
    demo: request.demo,
    triggers: (_b = request.triggers) === null || _b === void 0 ? void 0 : _b.map(function(trigger) {
      return StreamTrigger.create(trigger);
    })
  };
}
function deserializeResponse$8(jsonResponse) {
  return EvmStream.create(jsonResponse);
}
function serializeRequest$8(request) {
  var _a2, _b;
  return {
    id: request.id,
    webhookUrl: request.webhookUrl,
    description: request.description,
    tag: request.tag,
    topic0: request.topic0,
    allAddresses: request.allAddresses,
    includeNativeTxs: request.includeNativeTxs,
    includeContractLogs: request.includeContractLogs,
    includeInternalTxs: request.includeInternalTxs,
    includeAllTxLogs: request.includeAllTxLogs,
    chainIds: (_a2 = request.chains) === null || _a2 === void 0 ? void 0 : _a2.map(function(chain) {
      return EvmChain.create(chain).apiHex;
    }),
    abi: request.abi,
    advancedOptions: request.advancedOptions,
    demo: request.demo,
    triggers: (_b = request.triggers) === null || _b === void 0 ? void 0 : _b.map(function(trigger) {
      return StreamTrigger.create(trigger).format();
    })
  };
}
function deserializeRequest$8(jsonRequest) {
  var _a2, _b;
  return {
    id: jsonRequest.id,
    webhookUrl: jsonRequest.webhookUrl,
    description: jsonRequest.description,
    tag: jsonRequest.tag,
    topic0: jsonRequest.topic0,
    allAddresses: jsonRequest.allAddresses,
    includeNativeTxs: jsonRequest.includeNativeTxs,
    includeContractLogs: jsonRequest.includeContractLogs,
    includeInternalTxs: jsonRequest.includeInternalTxs,
    includeAllTxLogs: jsonRequest.includeAllTxLogs,
    chains: (_a2 = jsonRequest.chainIds) === null || _a2 === void 0 ? void 0 : _a2.map(function(chainId) {
      return EvmChain.create(chainId);
    }),
    abi: jsonRequest.abi,
    advancedOptions: jsonRequest.advancedOptions,
    demo: jsonRequest.demo,
    triggers: (_b = jsonRequest.triggers) === null || _b === void 0 ? void 0 : _b.map(function(trigger) {
      return StreamTrigger.create(trigger);
    })
  };
}
var updateStreamStatusEvmOperation = {
  method: "POST",
  name: "updateStreamStatusEvm",
  id: "UpdateStreamStatus",
  groupName: "evmStreams",
  urlPathParamNames: ["id"],
  urlPathPattern: "/streams/evm/{id}/status",
  bodyParamNames: ["status"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$7,
  getRequestBody: getRequestBody$2,
  deserializeResponse: deserializeResponse$7,
  serializeRequest: serializeRequest$7,
  deserializeRequest: deserializeRequest$7
};
function getRequestUrlParams$7(request) {
  return {
    id: request.id
  };
}
function getRequestBody$2(request) {
  return {
    status: request.status
  };
}
function deserializeResponse$7(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$7(request) {
  return {
    id: request.id,
    status: request.status
  };
}
function deserializeRequest$7(jsonRequest) {
  return {
    id: jsonRequest.id,
    status: jsonRequest.status
  };
}
var getHistoryOperation = {
  method: "GET",
  name: "getHistory",
  id: "GetHistory",
  groupName: "history",
  urlPathPattern: "/history",
  urlSearchParamNames: ["excludePayload", "limit", "cursor"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$6,
  deserializeResponse: deserializeResponse$6,
  serializeRequest: serializeRequest$6,
  deserializeRequest: deserializeRequest$6
};
function getRequestUrlParams$6(request) {
  return {
    excludePayload: maybe(request.excludePayload, String),
    limit: maybe(request.limit, String),
    cursor: request.cursor
  };
}
function deserializeResponse$6(jsonResponse) {
  var _a2;
  return (_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : [];
}
function serializeRequest$6(request) {
  return request;
}
function deserializeRequest$6(jsonRequest) {
  return jsonRequest;
}
var replayHistoryOperation = {
  method: "POST",
  name: "replayHistory",
  id: "ReplayHistory",
  groupName: "history",
  urlPathPattern: "/history/replay/{streamId}/{id}",
  urlPathParamNames: ["streamId", "id"],
  bodyParamNames: [],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$5,
  getRequestBody: getRequestBody$1,
  deserializeResponse: deserializeResponse$5,
  serializeRequest: serializeRequest$5,
  deserializeRequest: deserializeRequest$5
};
function getRequestUrlParams$5(request) {
  return {
    streamId: request.streamId,
    id: request.id
  };
}
function getRequestBody$1() {
  return {};
}
function deserializeResponse$5(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$5(request) {
  return {
    streamId: request.streamId,
    id: request.id
  };
}
function deserializeRequest$5(jsonRequest) {
  return {
    streamId: jsonRequest.streamId,
    id: jsonRequest.id
  };
}
var getLogsOperation = {
  method: "GET",
  name: "getLogs",
  id: "GetLogs",
  groupName: "history",
  urlPathPattern: "/history/logs",
  urlSearchParamNames: ["limit", "cursor"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$4,
  deserializeResponse: deserializeResponse$4,
  serializeRequest: serializeRequest$4,
  deserializeRequest: deserializeRequest$4
};
function getRequestUrlParams$4(request) {
  return {
    limit: maybe(request.limit, String),
    cursor: request.cursor
  };
}
function deserializeResponse$4(jsonResponse) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(result) {
    return __assign2(__assign2({}, result), { chain: EvmChain.create(result.chain) });
  });
}
function serializeRequest$4(request) {
  return request;
}
function deserializeRequest$4(jsonRequest) {
  return jsonRequest;
}
var getSettingsOperation = {
  method: "GET",
  name: "getSettings",
  id: "GetSettings",
  groupName: "project",
  urlPathPattern: "/settings",
  getRequestUrlParams: getRequestUrlParams$3,
  deserializeResponse: deserializeResponse$3,
  serializeRequest: serializeRequest$3,
  deserializeRequest: deserializeRequest$3
};
function getRequestUrlParams$3() {
  return {};
}
function deserializeResponse$3(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$3() {
  return void 0;
}
function deserializeRequest$3() {
  return {};
}
var setSettingsOperation = {
  method: "POST",
  name: "setSettings",
  id: "SetSettings",
  groupName: "project",
  urlPathPattern: "/settings",
  bodyParamNames: ["region"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$2,
  getRequestBody,
  deserializeResponse: deserializeResponse$2,
  serializeRequest: serializeRequest$2,
  deserializeRequest: deserializeRequest$2
};
function getRequestUrlParams$2() {
  return {};
}
function getRequestBody(request) {
  return {
    region: request.region
  };
}
function deserializeResponse$2(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$2(request) {
  return {
    region: request.region
  };
}
function deserializeRequest$2(jsonRequest) {
  return {
    region: jsonRequest.region
  };
}
var getStatsOperation = {
  method: "GET",
  name: "getStats",
  id: "getStats",
  groupName: "streams",
  urlPathPattern: "/stats",
  getRequestUrlParams: getRequestUrlParams$1,
  deserializeResponse: deserializeResponse$1,
  serializeRequest: serializeRequest$1,
  deserializeRequest: deserializeRequest$1
};
function getRequestUrlParams$1() {
  return {};
}
function deserializeResponse$1(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$1() {
  return void 0;
}
function deserializeRequest$1() {
  return {};
}
var getStatsByIdOperation = {
  method: "GET",
  name: "getStatsById",
  id: "GetStatsByStreamId",
  groupName: "stats",
  urlPathPattern: "/stats/{streamId}",
  urlPathParamNames: ["streamId"],
  getRequestUrlParams,
  deserializeResponse,
  serializeRequest,
  deserializeRequest
};
function getRequestUrlParams(request) {
  return {
    streamId: request.streamId
  };
}
function deserializeResponse(jsonResponse) {
  return jsonResponse;
}
function serializeRequest(request) {
  return request;
}
function deserializeRequest(jsonRequest) {
  return jsonRequest;
}

// node_modules/@moralisweb3/streams/lib/esm/index.js
var import_ethereumjs_util = __toESM(require_dist4());
init_lib4();
init_lib2();
init_lib();
init_lib3();
var extendStatics3 = function(d, b) {
  extendStatics3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics3(d, b);
};
function __extends3(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics3(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest2(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
var StreamNetwork;
(function(StreamNetwork2) {
  StreamNetwork2["APTOS"] = "aptos";
  StreamNetwork2["EVM"] = "evm";
})(StreamNetwork || (StreamNetwork = {}));
var IncorrectNetworkError = (
  /** @class */
  function(_super) {
    __extends3(IncorrectNetworkError2, _super);
    function IncorrectNetworkError2(network) {
      return _super.call(this, {
        code: StreamErrorCode.INCORRECT_NETWORK,
        message: 'Incorrect network provided. Got "'.concat(network, '", Valid values are: ').concat(Object.values(StreamNetwork).map(function(value) {
          return '"'.concat(value, '"');
        }).join(", "))
      }) || this;
    }
    return IncorrectNetworkError2;
  }(MoralisStreamError)
);
var makeCreateAptosStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(createStreamAptosOperation, baseUrl, core2).fetch(options);
};
var makeCreateEvmStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(createStreamEvmOperation, baseUrl, core2).fetch(options);
};
var makeCreateStream = function(core2, baseUrl) {
  return function(createStreamOptions) {
    switch (createStreamOptions.networkType) {
      case StreamNetwork.APTOS:
        return makeCreateAptosStream(core2, baseUrl, createStreamOptions);
      case StreamNetwork.EVM:
        return makeCreateEvmStream(core2, baseUrl, createStreamOptions);
      default:
        if (createStreamOptions.networkType === void 0) {
          return makeCreateEvmStream(core2, baseUrl, createStreamOptions);
        }
        throw new IncorrectNetworkError(createStreamOptions.networkType);
    }
  };
};
var makeUpdateAptosStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(updateStreamAptosOperation, baseUrl, core2).fetch(options);
};
var makeUpdateEvmStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(updateStreamEvmOperation, baseUrl, core2).fetch(options);
};
var makeUpdateStream = function(core2, baseUrl) {
  return function(updateStreamOptions) {
    switch (updateStreamOptions.networkType) {
      case StreamNetwork.APTOS:
        return makeUpdateAptosStream(core2, baseUrl, updateStreamOptions);
      case StreamNetwork.EVM:
        return makeUpdateEvmStream(core2, baseUrl, updateStreamOptions);
      default:
        if (updateStreamOptions.networkType === void 0) {
          return makeUpdateEvmStream(core2, baseUrl, updateStreamOptions);
        }
        throw new IncorrectNetworkError(updateStreamOptions.networkType);
    }
  };
};
var makeDeleteAptosStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(deleteStreamAptosOperation, baseUrl, core2).fetch(options);
};
var makeDeleteEvmStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(deleteStreamEvmOperation, baseUrl, core2).fetch(options);
};
var makeDeleteStream = function(core2, baseUrl) {
  return function(deleteStreamOptions) {
    switch (deleteStreamOptions.networkType) {
      case StreamNetwork.APTOS:
        return makeDeleteAptosStream(core2, baseUrl, deleteStreamOptions);
      case StreamNetwork.EVM:
        return makeDeleteEvmStream(core2, baseUrl, deleteStreamOptions);
      default:
        if (deleteStreamOptions.networkType === void 0) {
          return makeDeleteEvmStream(core2, baseUrl, deleteStreamOptions);
        }
        throw new IncorrectNetworkError(deleteStreamOptions.networkType);
    }
  };
};
var makeGetAptosStream$1 = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new PaginatedOperationResolver(getStreamsAptosOperation, baseUrl, core2).fetch(options);
};
var makeGetEvmStream$1 = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new PaginatedOperationResolver(getStreamsEvmOperation, baseUrl, core2).fetch(options);
};
var makeGetStreams = function(core2, baseUrl) {
  return function(getStreamsOptions) {
    switch (getStreamsOptions.networkType) {
      case StreamNetwork.APTOS:
        return makeGetAptosStream$1(core2, baseUrl, getStreamsOptions);
      case StreamNetwork.EVM:
        return makeGetEvmStream$1(core2, baseUrl, getStreamsOptions);
      default:
        if (getStreamsOptions.networkType === void 0) {
          return makeGetEvmStream$1(core2, baseUrl, getStreamsOptions);
        }
        throw new IncorrectNetworkError(getStreamsOptions.networkType);
    }
  };
};
var SHA3_NULL_S = "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
var isHexStrict = function(hex) {
  return /^(-)?0x[0-9a-f]*$/i.test(hex);
};
var sha3 = function(value) {
  var bufferValue;
  if (isHexStrict(value) && /^0x/i.test(value.toString())) {
    bufferValue = (0, import_ethereumjs_util.toBuffer)(value);
  } else {
    bufferValue = Buffer.from(value, "utf-8");
  }
  var returnValue = (0, import_ethereumjs_util.bufferToHex)((0, import_ethereumjs_util.keccak256)(bufferValue));
  if (returnValue === SHA3_NULL_S) {
    return null;
  }
  return returnValue;
};
var StreamsConfig = {
  streamsSecret: {
    name: "streamsSecret",
    defaultValue: null
  }
};
var makeVerifySignature = function(config) {
  return function(_a2) {
    var body = _a2.body, signature = _a2.signature;
    var secret = config.get(StreamsConfig.streamsSecret);
    if (!secret) {
      secret = config.get(ApiUtilsConfig.apiKey);
    }
    if (!secret) {
      throw new MoralisStreamError({
        code: StreamErrorCode.GENERIC_STREAM_ERROR,
        message: "Unable to verify signature without an api key or streams secret"
      });
    }
    var generatedSignature = sha3(JSON.stringify(body) + secret);
    if (signature !== generatedSignature) {
      throw new MoralisStreamError({
        code: StreamErrorCode.INVALID_SIGNATURE,
        message: "Signature is not valid"
      });
    }
    return true;
  };
};
var makeAddAddressAptosStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(addAddressAptosOperation, baseUrl, core2).fetch(options);
};
var makeAddAddressEvmStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(addAddressEvmOperation, baseUrl, core2).fetch(options);
};
var makeAddAddress = function(core2, baseUrl) {
  return function(addAddressOptions) {
    switch (addAddressOptions.networkType) {
      case StreamNetwork.APTOS:
        return makeAddAddressAptosStream(core2, baseUrl, addAddressOptions);
      case StreamNetwork.EVM:
        return makeAddAddressEvmStream(core2, baseUrl, addAddressOptions);
      default:
        if (addAddressOptions.networkType === void 0) {
          return makeAddAddressEvmStream(core2, baseUrl, addAddressOptions);
        }
        throw new IncorrectNetworkError(addAddressOptions.networkType);
    }
  };
};
var makeUpdateAptosStreamStatus = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(updateStreamStatusAptosOperation, baseUrl, core2).fetch(options);
};
var makeUpdateEvmStreamStatus = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(updateStreamStatusEvmOperation, baseUrl, core2).fetch(options);
};
var makeUpdateStreamStatus = function(core2, baseUrl) {
  return function(updateStreamOptions) {
    switch (updateStreamOptions.networkType) {
      case StreamNetwork.APTOS:
        return makeUpdateAptosStreamStatus(core2, baseUrl, updateStreamOptions);
      case StreamNetwork.EVM:
        return makeUpdateEvmStreamStatus(core2, baseUrl, updateStreamOptions);
      default:
        if (updateStreamOptions.networkType === void 0) {
          return makeUpdateEvmStreamStatus(core2, baseUrl, updateStreamOptions);
        }
        throw new IncorrectNetworkError(updateStreamOptions.networkType);
    }
  };
};
var hasAbis = function(webhookData) {
  if (!webhookData.abi || webhookData.abi.length < 1) {
    return false;
  }
  return true;
};
var isWebhook = function(webhookData) {
  if (typeof webhookData !== "object" || webhookData === null || !("logs" in webhookData)) {
    return false;
  }
  return true;
};
var CollectionNameBuilder = (
  /** @class */
  function() {
    function CollectionNameBuilder2() {
      this.cache = {};
      this.cacheLimit = 256;
    }
    CollectionNameBuilder2.prototype.build = function(tag) {
      var result = this.cache[tag];
      if (!result) {
        result = this.process(tag);
        if (this.cacheLimit > 0) {
          this.cache[tag] = result;
          this.cacheLimit--;
        }
      }
      return result;
    };
    CollectionNameBuilder2.prototype.process = function(tag) {
      var parts = tag.split(/[^a-zA-Z0-9_]/).filter(function(p) {
        return !!p;
      }).map(function(p) {
        return p.substring(0, 1).toUpperCase() + p.substring(1).toLowerCase();
      });
      if (parts.length < 1) {
        throw new Error('Cannot build table name from value "'.concat(tag, '"'));
      }
      return parts.join("");
    };
    return CollectionNameBuilder2;
  }()
);
var SimpleProcessor = (
  /** @class */
  function() {
    function SimpleProcessor2(collectionNameBuilder, documentBuilder) {
      this.collectionNameBuilder = collectionNameBuilder;
      this.documentBuilder = documentBuilder;
    }
    SimpleProcessor2.prototype.process = function(items, batch) {
      var updates = [];
      if (items) {
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
          var item = items_1[_i];
          var document_1 = this.documentBuilder(item, batch.block, batch.confirmed, batch.chainId);
          updates.push({
            collectionName: this.collectionNameBuilder.build(batch.tag),
            document: document_1
          });
        }
      }
      return updates;
    };
    return SimpleProcessor2;
  }()
);
var Sha256 = (
  /** @class */
  function() {
    function Sha2562() {
    }
    Sha2562.hash = function(value) {
      var bytes = toUtf8Bytes(value);
      return sha256(bytes);
    };
    return Sha2562;
  }()
);
var LogRelatedId = (
  /** @class */
  function() {
    function LogRelatedId2() {
    }
    LogRelatedId2.create = function(chainId, transactionHash, logIndex) {
      var safeTransactionHash = transactionHash.toLowerCase();
      return Sha256.hash("".concat(chainId, ";").concat(safeTransactionHash, ";").concat(logIndex));
    };
    return LogRelatedId2;
  }()
);
var TriggerItemsBuilder = (
  /** @class */
  function() {
    function TriggerItemsBuilder2() {
    }
    TriggerItemsBuilder2.build = function(triggers) {
      if (!triggers || triggers.length === 0) {
        return void 0;
      }
      return triggers.map(function(trigger) {
        return {
          name: String(trigger.name),
          value: convertValue(trigger.value)
        };
      });
    };
    return TriggerItemsBuilder2;
  }()
);
function convertValue(value) {
  var type = typeof value;
  if (type === "string" || type === "number" || type === "boolean") {
    return value;
  }
  if (Array.isArray(value)) {
    return value.map(convertValue);
  }
  return String(value);
}
var Erc20TransferDocumentBuilder = (
  /** @class */
  function() {
    function Erc20TransferDocumentBuilder2() {
    }
    Erc20TransferDocumentBuilder2.build = function(transfer, block, confirmed, chainId) {
      var chain = Number(chainId);
      var document = {
        id: LogRelatedId.create(chain, transfer.transactionHash, transfer.logIndex),
        transactionHash: transfer.transactionHash,
        contract: transfer.contract,
        logIndex: transfer.logIndex,
        from: transfer.from,
        to: transfer.to,
        value: transfer.value,
        tokenDecimals: parseInt(transfer.tokenDecimals, 10),
        tokenName: transfer.tokenName,
        tokenSymbol: transfer.tokenSymbol,
        blockHash: block.hash,
        blockTimestamp: parseInt(block.timestamp, 10),
        blockNumber: parseInt(block.number, 10),
        confirmed,
        chainId: chain,
        triggers: TriggerItemsBuilder.build(transfer.triggers)
      };
      return document;
    };
    return Erc20TransferDocumentBuilder2;
  }()
);
var Erc20TransfersProcessor = (
  /** @class */
  function() {
    function Erc20TransfersProcessor2(collectionNameBuilder) {
      this.collectionNameBuilder = collectionNameBuilder;
      this.simpleProcessor = new SimpleProcessor(this.collectionNameBuilder, Erc20TransferDocumentBuilder.build);
    }
    Erc20TransfersProcessor2.prototype.process = function(batch) {
      return this.simpleProcessor.process(batch.erc20Transfers, batch);
    };
    return Erc20TransfersProcessor2;
  }()
);
var Erc20ApprovalDocumentBuilder = (
  /** @class */
  function() {
    function Erc20ApprovalDocumentBuilder2() {
    }
    Erc20ApprovalDocumentBuilder2.build = function(approval, block, confirmed, chainId) {
      var chain = Number(chainId);
      var document = {
        id: LogRelatedId.create(chain, approval.transactionHash, approval.logIndex),
        transactionHash: approval.transactionHash,
        contract: approval.contract,
        logIndex: approval.logIndex,
        owner: approval.owner,
        spender: approval.spender,
        value: approval.value,
        tokenDecimals: parseInt(approval.tokenDecimals, 10),
        tokenName: approval.tokenName,
        tokenSymbol: approval.tokenSymbol,
        blockHash: block.hash,
        blockTimestamp: parseInt(block.timestamp, 10),
        blockNumber: parseInt(block.number, 10),
        confirmed,
        chainId: chain,
        triggers: TriggerItemsBuilder.build(approval.triggers)
      };
      return document;
    };
    return Erc20ApprovalDocumentBuilder2;
  }()
);
var Erc20ApprovalsProcessor = (
  /** @class */
  function() {
    function Erc20ApprovalsProcessor2(collectionNameBuilder) {
      this.collectionNameBuilder = collectionNameBuilder;
      this.processor = new SimpleProcessor(this.collectionNameBuilder, Erc20ApprovalDocumentBuilder.build);
    }
    Erc20ApprovalsProcessor2.prototype.process = function(batch) {
      return this.processor.process(batch.erc20Approvals, batch);
    };
    return Erc20ApprovalsProcessor2;
  }()
);
var TxRelatedId = (
  /** @class */
  function() {
    function TxRelatedId2() {
    }
    TxRelatedId2.create = function(chainId, transactionHash) {
      var safeTransactionHash = transactionHash.toLowerCase();
      return Sha256.hash("".concat(chainId, ";").concat(safeTransactionHash));
    };
    return TxRelatedId2;
  }()
);
var InternalTxDocumentBuilder = (
  /** @class */
  function() {
    function InternalTxDocumentBuilder2() {
    }
    InternalTxDocumentBuilder2.build = function(tx, block, confirmed, chainId) {
      var chain = Number(chainId);
      return {
        id: TxRelatedId.create(chain, tx.transactionHash),
        hash: tx.transactionHash,
        chainId: chain,
        from: tx.from,
        to: tx.to,
        value: tx.value,
        gas: parseInt(tx.gas || "0", 10),
        blockHash: block.hash,
        blockTimestamp: parseInt(block.timestamp, 10),
        blockNumber: parseInt(block.number, 10),
        confirmed
      };
    };
    return InternalTxDocumentBuilder2;
  }()
);
var InternalTxsProcessor = (
  /** @class */
  function() {
    function InternalTxsProcessor2(collectionNameBuilder) {
      this.collectionNameBuilder = collectionNameBuilder;
      this.simpleProcessor = new SimpleProcessor(this.collectionNameBuilder, InternalTxDocumentBuilder.build);
    }
    InternalTxsProcessor2.prototype.process = function(batch) {
      return this.simpleProcessor.process(batch.txsInternal, batch);
    };
    return InternalTxsProcessor2;
  }()
);
var LogDocumentValueFormatter = (
  /** @class */
  function() {
    function LogDocumentValueFormatter2() {
    }
    LogDocumentValueFormatter2.format = function(param) {
      switch (param.type) {
        case "string":
          return param.value;
        case "address":
          return param.value.toLowerCase();
        default:
          if (BigNumber2.isBigNumber(param.value)) {
            return param.value.toString();
          }
          return param.value.toString();
      }
    };
    return LogDocumentValueFormatter2;
  }()
);
var ParamNameResolver = (
  /** @class */
  function() {
    function ParamNameResolver2(restrictedNames) {
      this.restrictedNames = restrictedNames;
      this.usedNames = [];
    }
    ParamNameResolver2.prototype.iterate = function(object, callback) {
      var _this = this;
      var sortedNames = Object.keys(object).sort(function(a, b) {
        return a.localeCompare(b);
      });
      sortedNames.forEach(function(name) {
        var safeName = _this.resolve(name);
        callback(safeName, object[name]);
      });
    };
    ParamNameResolver2.prototype.resolve = function(name) {
      if (this.isUsed(name)) {
        do {
          name = "_".concat(name);
        } while (this.isUsed(name));
      }
      this.usedNames.push(name);
      return name;
    };
    ParamNameResolver2.prototype.isUsed = function(name) {
      return this.restrictedNames.includes(name) || this.usedNames.includes(name);
    };
    return ParamNameResolver2;
  }()
);
var paramNames = [
  "id",
  "name",
  "logIndex",
  "transactionHash",
  "address",
  "blockHash",
  "blockTimestamp",
  "blockNumber",
  "confirmed",
  "chainId",
  "triggers"
];
var restrictedParamNames = __spreadArray(__spreadArray([], paramNames, true), [
  // Some extra names
  "_id",
  "uniqueId",
  "updatedAt",
  "createdAt",
  "user",
  "userId"
], false);
var LogDocumentBuilder = (
  /** @class */
  function() {
    function LogDocumentBuilder2() {
    }
    LogDocumentBuilder2.build = function(log, parsedLog, block, confirmed, chainId) {
      var nameResolver = new ParamNameResolver(restrictedParamNames);
      var chain = Number(chainId);
      var document = {
        id: LogRelatedId.create(chain, log.transactionHash, log.logIndex),
        name: parsedLog.name,
        logIndex: parseInt(log.logIndex, 10),
        transactionHash: log.transactionHash,
        address: log.address,
        blockHash: block.hash,
        blockTimestamp: parseInt(block.timestamp, 10),
        blockNumber: parseInt(block.number, 10),
        confirmed,
        chainId: chain,
        triggers: TriggerItemsBuilder.build(log.triggers)
      };
      nameResolver.iterate(parsedLog.params, function(safeParamName, paramValue) {
        document[safeParamName] = LogDocumentValueFormatter.format(paramValue);
      });
      return document;
    };
    return LogDocumentBuilder2;
  }()
);
var LogParser = (
  /** @class */
  function() {
    function LogParser2(abiItems) {
      this.abiInterface = new Interface(abiItems);
    }
    LogParser2.prototype.read = function(log) {
      var topics = [log.topic0, log.topic1, log.topic2, log.topic3].filter(function(t) {
        return t !== null;
      });
      var eventFragment = this.abiInterface.getEvent(topics[0]);
      var args = this.abiInterface.decodeEventLog(eventFragment, log.data, topics);
      var params = {};
      eventFragment.inputs.forEach(function(input, index) {
        var type = input.type, name = input.name;
        var value = args[index];
        if (value instanceof Indexed) {
          value = value.hash;
        }
        params[name] = {
          type,
          value
        };
      });
      return {
        name: eventFragment.name,
        params
      };
    };
    return LogParser2;
  }()
);
var LogsProcessor = (
  /** @class */
  function() {
    function LogsProcessor2(collectionNameBuilder) {
      this.collectionNameBuilder = collectionNameBuilder;
    }
    LogsProcessor2.prototype.process = function(batch) {
      var updates = [];
      if (batch.abi.length < 1) {
        return updates;
      }
      var logParser = new LogParser(batch.abi);
      for (var _i = 0, _a2 = batch.logs; _i < _a2.length; _i++) {
        var log = _a2[_i];
        var logParams = logParser.read(log);
        var document_1 = LogDocumentBuilder.build(log, logParams, batch.block, batch.confirmed, batch.chainId);
        updates.push({
          collectionName: this.collectionNameBuilder.build(batch.tag),
          document: document_1
        });
      }
      return updates;
    };
    return LogsProcessor2;
  }()
);
var NftTransferDocumentBuilder = (
  /** @class */
  function() {
    function NftTransferDocumentBuilder2() {
    }
    NftTransferDocumentBuilder2.build = function(transfer, block, confirmed, chainId) {
      var chain = Number(chainId);
      var document = {
        id: LogRelatedId.create(chain, transfer.transactionHash, transfer.logIndex),
        transactionHash: transfer.transactionHash,
        contract: transfer.contract,
        logIndex: transfer.logIndex,
        operator: transfer.operator,
        from: transfer.from,
        to: transfer.to,
        tokenId: transfer.tokenId,
        amount: transfer.amount,
        tokenContractType: transfer.tokenContractType,
        tokenName: transfer.tokenName,
        tokenSymbol: transfer.tokenSymbol,
        blockHash: block.hash,
        blockTimestamp: parseInt(block.timestamp, 10),
        blockNumber: parseInt(block.number, 10),
        confirmed,
        chainId: chain,
        triggers: TriggerItemsBuilder.build(transfer.triggers)
      };
      return document;
    };
    return NftTransferDocumentBuilder2;
  }()
);
var NftTransfersProcessor = (
  /** @class */
  function() {
    function NftTransfersProcessor2(collectionNameBuilder) {
      this.collectionNameBuilder = collectionNameBuilder;
      this.simpleProcessor = new SimpleProcessor(this.collectionNameBuilder, NftTransferDocumentBuilder.build);
    }
    NftTransfersProcessor2.prototype.process = function(batch) {
      return this.simpleProcessor.process(batch.nftTransfers, batch);
    };
    return NftTransfersProcessor2;
  }()
);
var NftApprovalDocumentBuilder = (
  /** @class */
  function() {
    function NftApprovalDocumentBuilder2() {
    }
    NftApprovalDocumentBuilder2.build = function(approval, block, confirmed, chainId) {
      var chain = Number(chainId);
      var document = {
        id: LogRelatedId.create(chain, approval.transactionHash, approval.logIndex),
        transactionHash: approval.transactionHash,
        contract: approval.contract,
        logIndex: approval.logIndex,
        operator: approval.operator,
        account: approval.account,
        approvedAll: approval.approvedAll,
        tokenId: approval.tokenId,
        tokenContractType: approval.tokenContractType,
        tokenName: approval.tokenName,
        tokenSymbol: approval.tokenSymbol,
        blockHash: block.hash,
        blockTimestamp: parseInt(block.timestamp, 10),
        blockNumber: parseInt(block.number, 10),
        confirmed,
        chainId: chain
      };
      return document;
    };
    return NftApprovalDocumentBuilder2;
  }()
);
var NftApprovalsProcessor = (
  /** @class */
  function() {
    function NftApprovalsProcessor2(collectionNameBuilder) {
      this.collectionNameBuilder = collectionNameBuilder;
      this.simpleProcessor = new SimpleProcessor(this.collectionNameBuilder, NftApprovalDocumentBuilder.build);
    }
    NftApprovalsProcessor2.prototype.process = function(batch) {
      return this.simpleProcessor.process(batch.nftTokenApprovals, batch);
    };
    return NftApprovalsProcessor2;
  }()
);
var TxDocumentBuilder = (
  /** @class */
  function() {
    function TxDocumentBuilder2() {
    }
    TxDocumentBuilder2.build = function(tx, block, confirmed, chainId) {
      var chain = Number(chainId);
      return {
        id: TxRelatedId.create(chain, tx.hash),
        hash: tx.hash,
        chainId: chain,
        transactionIndex: parseInt(tx.transactionIndex, 10),
        gas: parseInt(tx.gas, 10),
        gasPrice: parseInt(tx.gasPrice, 10),
        nonce: parseInt(tx.nonce, 10),
        fromAddress: tx.fromAddress,
        toAddress: tx.toAddress,
        value: tx.value || "0",
        input: tx.input,
        type: parseInt(tx.type, 10),
        receiptStatus: parseInt(tx.receiptStatus, 10),
        receiptGasUsed: parseInt(tx.receiptGasUsed, 10),
        receiptCumulativeGasUsed: parseInt(tx.receiptCumulativeGasUsed, 10),
        blockHash: block.hash,
        blockTimestamp: parseInt(block.timestamp, 10),
        blockNumber: parseInt(block.number, 10),
        confirmed,
        triggers: TriggerItemsBuilder.build(tx.triggers)
      };
    };
    return TxDocumentBuilder2;
  }()
);
var TxsProcessor = (
  /** @class */
  function() {
    function TxsProcessor2(collectionNameBuilder) {
      this.collectionNameBuilder = collectionNameBuilder;
      this.processor = new SimpleProcessor(this.collectionNameBuilder, TxDocumentBuilder.build);
    }
    TxsProcessor2.prototype.process = function(batch) {
      return this.processor.process(batch.txs, batch);
    };
    return TxsProcessor2;
  }()
);
var BatchProcessor = (
  /** @class */
  function() {
    function BatchProcessor2(erc20ApprovalsProcessor, erc20TransfersProcessor, internalTxsProcessor, logsProcessor, nftApprovalsProcessor, nftTransfersProcessor, txsProcessor) {
      this.erc20ApprovalsProcessor = erc20ApprovalsProcessor;
      this.erc20TransfersProcessor = erc20TransfersProcessor;
      this.internalTxsProcessor = internalTxsProcessor;
      this.logsProcessor = logsProcessor;
      this.nftApprovalsProcessor = nftApprovalsProcessor;
      this.nftTransfersProcessor = nftTransfersProcessor;
      this.txsProcessor = txsProcessor;
    }
    BatchProcessor2.create = function() {
      var nameBuilder = new CollectionNameBuilder();
      return new BatchProcessor2(new Erc20ApprovalsProcessor(nameBuilder), new Erc20TransfersProcessor(nameBuilder), new InternalTxsProcessor(nameBuilder), new LogsProcessor(nameBuilder), new NftApprovalsProcessor(nameBuilder), new NftTransfersProcessor(nameBuilder), new TxsProcessor(nameBuilder));
    };
    BatchProcessor2.prototype.process = function(batch) {
      var _this = this;
      return {
        erc20Approvals: function() {
          return _this.erc20ApprovalsProcessor.process(batch);
        },
        erc20Transfers: function() {
          return _this.erc20TransfersProcessor.process(batch);
        },
        internalTxs: function() {
          return _this.internalTxsProcessor.process(batch);
        },
        logs: function() {
          return _this.logsProcessor.process(batch);
        },
        nftApprovals: function() {
          return _this.nftApprovalsProcessor.process(batch);
        },
        nftTransfers: function() {
          return _this.nftTransfersProcessor.process(batch);
        },
        txs: function() {
          return _this.txsProcessor.process(batch);
        }
      };
    };
    return BatchProcessor2;
  }()
);
var parseLog = function(webhookData) {
  if (!isWebhook(webhookData)) {
    throw new MoralisStreamError({
      code: StreamErrorCode.GENERIC_STREAM_ERROR,
      message: "Cannot decode the logs. No logs found in the webhook, or invalid webhook provided."
    });
  }
  if (!hasAbis(webhookData)) {
    throw new MoralisStreamError({
      code: StreamErrorCode.GENERIC_STREAM_ERROR,
      message: "Cannot decode the logs. No abis found in the provided webhook."
    });
  }
  var logs = webhookData.logs, abi = webhookData.abi;
  var decodedLogs = [];
  logs.forEach(function(currentLog) {
    var params = new LogParser(abi).read(currentLog).params;
    var decodedLog = {};
    for (var key in params) {
      if (Object.prototype.hasOwnProperty.call(params, key)) {
        var element = params[key];
        decodedLog[key] = element.value;
      }
    }
    decodedLogs.push(decodedLog);
  });
  return decodedLogs;
};
var makeGetAptosAddresses = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new PaginatedOperationResolver(getAddressesAptosOperation, baseUrl, core2).fetch(options);
};
var makeGetEvmAddresses = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new PaginatedOperationResolver(getAddressesEvmOperation, baseUrl, core2).fetch(options);
};
var makeGetAddresses = function(core2, baseUrl) {
  return function(getAddressesOptions) {
    switch (getAddressesOptions.networkType) {
      case StreamNetwork.APTOS:
        return makeGetAptosAddresses(core2, baseUrl, getAddressesOptions);
      case StreamNetwork.EVM:
        return makeGetEvmAddresses(core2, baseUrl, getAddressesOptions);
      default:
        if (getAddressesOptions.networkType === void 0) {
          return makeGetEvmAddresses(core2, baseUrl, getAddressesOptions);
        }
        throw new IncorrectNetworkError(getAddressesOptions.networkType);
    }
  };
};
var makeDeleteAddressAptosStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(deleteAddressAptosOperation, baseUrl, core2).fetch(options);
};
var makeDeleteAddressEvmStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(deleteAddressEvmOperation, baseUrl, core2).fetch(options);
};
var makeDeleteAddress = function(core2, baseUrl) {
  return function(deleteAddressOptions) {
    switch (deleteAddressOptions.networkType) {
      case StreamNetwork.APTOS:
        return makeDeleteAddressAptosStream(core2, baseUrl, deleteAddressOptions);
      case StreamNetwork.EVM:
        return makeDeleteAddressEvmStream(core2, baseUrl, deleteAddressOptions);
      default:
        if (deleteAddressOptions.networkType === void 0) {
          return makeDeleteAddressEvmStream(core2, baseUrl, deleteAddressOptions);
        }
        throw new IncorrectNetworkError(deleteAddressOptions.networkType);
    }
  };
};
var makeGetAptosStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  _a2.network;
  var options = __rest2(_a2, ["networkType", "network"]);
  return new OperationResolver(getStreamAptosOperation, baseUrl, core2).fetch(options);
};
var makeGetEvmStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  _a2.network;
  var options = __rest2(_a2, ["networkType", "network"]);
  return new OperationResolver(getStreamEvmOperation, baseUrl, core2).fetch(options);
};
var makeGetStreamById = function(core2, baseUrl) {
  return function(getStreamOptions) {
    if (!getStreamOptions.networkType && getStreamOptions.network) {
      getStreamOptions.networkType = getStreamOptions.network;
    }
    switch (getStreamOptions.networkType) {
      case StreamNetwork.APTOS:
        return makeGetAptosStream(core2, baseUrl, getStreamOptions);
      case StreamNetwork.EVM:
        return makeGetEvmStream(core2, baseUrl, getStreamOptions);
      default:
        if (getStreamOptions.networkType === void 0) {
          return makeGetEvmStream(core2, baseUrl, getStreamOptions);
        }
        throw new IncorrectNetworkError(getStreamOptions.networkType);
    }
  };
};
var StreamsConfigSetup = (
  /** @class */
  function() {
    function StreamsConfigSetup2() {
    }
    StreamsConfigSetup2.register = function(config) {
      config.registerKey(StreamsConfig.streamsSecret);
    };
    return StreamsConfigSetup2;
  }()
);
var BASE_URL = "https://api.moralis-streams.com";
var Streams = (
  /** @class */
  function(_super) {
    __extends3(Streams2, _super);
    function Streams2(core2) {
      var _this = _super.call(this, Streams2.moduleName, core2, function() {
        return BASE_URL;
      }) || this;
      _this.add = makeCreateStream(_this.core, BASE_URL);
      _this.update = makeUpdateStream(_this.core, BASE_URL);
      _this.delete = makeDeleteStream(_this.core, BASE_URL);
      _this.getAll = makeGetStreams(_this.core, BASE_URL);
      _this.getById = makeGetStreamById(_this.core, BASE_URL);
      _this.updateStatus = makeUpdateStreamStatus(_this.core, BASE_URL);
      _this.addAddress = makeAddAddress(_this.core, BASE_URL);
      _this.getAddresses = makeGetAddresses(_this.core, BASE_URL);
      _this.deleteAddress = makeDeleteAddress(_this.core, BASE_URL);
      _this.getHistory = _this.createPaginatedFetcher(getHistoryOperation);
      _this.getLogs = _this.createPaginatedFetcher(getLogsOperation);
      _this.retry = _this.createFetcher(replayHistoryOperation);
      _this._getStats = _this.createFetcher(getStatsOperation);
      _this.getStats = function() {
        return _this._getStats({});
      };
      _this.getStatsById = _this.createFetcher(getStatsByIdOperation);
      _this.setSettings = _this.createFetcher(setSettingsOperation);
      _this._readSettings = _this.createFetcher(getSettingsOperation);
      _this.readSettings = function() {
        return _this._readSettings({});
      };
      _this.verifySignature = function(options) {
        return makeVerifySignature(_this.core.config)(options);
      };
      _this.parsedLogs = function(webhookData) {
        return parseLog(webhookData);
      };
      return _this;
    }
    Streams2.create = function(core2) {
      return new Streams2(core2 !== null && core2 !== void 0 ? core2 : CoreProvider.getDefault());
    };
    Streams2.prototype.setup = function() {
      StreamsConfigSetup.register(this.core.config);
    };
    Streams2.prototype.start = function() {
    };
    Streams2.prototype.createFetcher = function(operation) {
      return new OperationResolver(operation, BASE_URL, this.core).fetch;
    };
    Streams2.prototype.createPaginatedFetcher = function(operation) {
      return new PaginatedOperationResolver(operation, BASE_URL, this.core).fetch;
    };
    Streams2.moduleName = "streams";
    return Streams2;
  }(ApiModule)
);

// node_modules/@moralisweb3/auth/lib/esm/index.js
var import_dist19 = __toESM(require_dist());
var import_dist20 = __toESM(require_dist2());
var import_dist21 = __toESM(require_dist3());

// node_modules/@moralisweb3/common-sol-utils/lib/esm/index.js
var import_dist13 = __toESM(require_dist());
var import_dist14 = __toESM(require_dist2());
var import_dist15 = __toESM(require_dist3());
var import_bn = __toESM(require_bn());
var import_bs58 = __toESM(require_bs58());
init_dist();
var PUBLIC_KEY_LENGTH = 32;
function isPublicKeyData(value) {
  return value._bn !== void 0;
}
var PublicKey = (
  /** @class */
  function() {
    function PublicKey2(value) {
      if (isPublicKeyData(value)) {
        this._bn = value._bn;
      } else {
        if (typeof value === "string") {
          var decoded = import_bs58.default.decode(value);
          if (decoded.length !== PUBLIC_KEY_LENGTH) {
            throw new Error("Invalid public key input");
          }
          this._bn = new import_bn.default(decoded);
        } else {
          this._bn = new import_bn.default(value);
        }
        if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {
          throw new Error("Invalid public key input");
        }
      }
    }
    PublicKey2.prototype.toBase58 = function() {
      return import_bs58.default.encode(this.toBytes());
    };
    PublicKey2.prototype.toBytes = function() {
      var buf = this.toBuffer();
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
    };
    PublicKey2.prototype.toBuffer = function() {
      var b = this._bn.toArrayLike(Buffer$1);
      if (b.length === PUBLIC_KEY_LENGTH) {
        return b;
      }
      var zeroPad = Buffer$1.alloc(32);
      b.copy(zeroPad, 32 - b.length);
      return zeroPad;
    };
    Object.defineProperty(PublicKey2.prototype, Symbol.toStringTag, {
      get: function() {
        return "PublicKey(".concat(this.toString(), ")");
      },
      enumerable: false,
      configurable: true
    });
    PublicKey2.prototype.toString = function() {
      return this.toBase58();
    };
    return PublicKey2;
  }()
);
var SolAddress = (
  /** @class */
  function() {
    function SolAddress2(address) {
      this.address = address;
    }
    SolAddress2.create = function(address) {
      return address instanceof SolAddress2 ? address : new SolAddress2(SolAddress2.parse(address));
    };
    SolAddress2.fromJSON = function(address) {
      return SolAddress2.create(address);
    };
    SolAddress2.parse = function(address) {
      try {
        var publicKey = new PublicKey(address);
        return publicKey.toBase58();
      } catch (e) {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Invalid Solana address provided: ".concat(address),
          cause: e
        });
      }
    };
    SolAddress2.prototype.format = function() {
      return this.address;
    };
    SolAddress2.prototype.equals = function(address) {
      return this.address === SolAddress2.create(address).address;
    };
    SolAddress2.prototype.toString = function() {
      return this.address;
    };
    SolAddress2.prototype.toJSON = function() {
      return this.address;
    };
    return SolAddress2;
  }()
);
var solNetworkNames = ["mainnet", "devnet"];
var SolNetwork = (
  /** @class */
  function() {
    function SolNetwork2(network) {
      this.network = network;
    }
    Object.defineProperty(SolNetwork2, "MAINNET", {
      /**
       * Returns MAINNET network
       *
       * @example SolNetwork.MAINNET
       */
      get: function() {
        return SolNetwork2.create("mainnet");
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(SolNetwork2, "DEVNET", {
      /**
       * Returns DEVNET network
       *
       * @example SolNetwork.MAINNET
       */
      get: function() {
        return SolNetwork2.create("devnet");
      },
      enumerable: false,
      configurable: true
    });
    SolNetwork2.create = function(network) {
      return network instanceof SolNetwork2 ? network : new SolNetwork2(SolNetwork2.parse(network));
    };
    SolNetwork2.fromJSON = function(network) {
      return SolNetwork2.create(network);
    };
    SolNetwork2.parse = function(network) {
      if (typeof network === "string") {
        if (!solNetworkNames.includes(network)) {
          throw new CoreError({
            code: CoreErrorCode.INVALID_ARGUMENT,
            message: "Solana network is not supported: ".concat(network)
          });
        }
      }
      return network;
    };
    SolNetwork2.prototype.format = function() {
      return this.network;
    };
    SolNetwork2.prototype.equals = function(network) {
      return this.network === SolNetwork2.create(network).network;
    };
    SolNetwork2.prototype.toJSON = function() {
      return this.network;
    };
    SolNetwork2.prototype.toString = function() {
      return this.network;
    };
    return SolNetwork2;
  }()
);
var unitToDecimals2 = {
  solana: 9,
  lamports: 0
};
var SolNative = (
  /** @class */
  function() {
    function SolNative2(rawValue) {
      this.rawValue = rawValue;
    }
    SolNative2.create = function(value, unit) {
      if (value instanceof SolNative2) {
        return value;
      }
      return new SolNative2(SolNative2.parse(value, unit));
    };
    SolNative2.fromJSON = function(json) {
      return SolNative2.create(json, "lamports");
    };
    SolNative2.parse = function(value, unit) {
      if (unit === void 0) {
        unit = "solana";
      }
      var decimal;
      if (typeof unit === "number") {
        decimal = unit;
      } else if (unitToDecimals2[unit] !== void 0) {
        decimal = unitToDecimals2[unit];
      } else {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Not supported Solana unit: ".concat(unit)
        });
      }
      return BigNumber.fromDecimal(value.toString(), decimal);
    };
    SolNative2.equals = function(valueA, valueB) {
      var solNativeA = SolNative2.create(valueA);
      var solNativeB = SolNative2.create(valueB);
      return solNativeA.lamports === solNativeB.lamports;
    };
    SolNative2.prototype.equals = function(value) {
      return SolNative2.equals(this, value);
    };
    SolNative2.prototype.format = function() {
      return this.lamports;
    };
    SolNative2.prototype.toJSON = function() {
      return this.lamports;
    };
    SolNative2.prototype.toString = function() {
      return this.lamports;
    };
    Object.defineProperty(SolNative2.prototype, "value", {
      /**
       * @returns the value of the SolNative as a BigNumber
       * @example `native.value`
       */
      get: function() {
        return this.rawValue;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(SolNative2.prototype, "solana", {
      /**
       * Converts the SolNative to a solana unit.
       * @returns the value of the SolNative as a solana string
       * @example `native.solana`
       */
      get: function() {
        return this.rawValue.toDecimal(unitToDecimals2["solana"]);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(SolNative2.prototype, "lamports", {
      /**
       * Converts the SolNative to a string.
       * @returns the value of the SolNative as a string
       * @example `native.lamports`
       */
      get: function() {
        return this.rawValue.toString();
      },
      enumerable: false,
      configurable: true
    });
    return SolNative2;
  }()
);
var SolSPLNativePrice = (
  /** @class */
  function() {
    function SolSPLNativePrice2(input) {
      this.value = input.value;
      this.decimals = input.decimals;
      this.name = input.name;
      this.symbol = input.symbol;
    }
    SolSPLNativePrice2.create = function(input) {
      if (input instanceof SolSPLNativePrice2) {
        return input;
      }
      return new SolSPLNativePrice2(input);
    };
    SolSPLNativePrice2.fromJSON = function(json) {
      var input = {
        value: json.value,
        decimals: json.decimals,
        name: json.name,
        symbol: json.symbol
      };
      return SolSPLNativePrice2.create(input);
    };
    SolSPLNativePrice2.prototype.toJSON = function() {
      return {
        value: this.value,
        decimals: this.decimals,
        name: this.name,
        symbol: this.symbol
      };
    };
    return SolSPLNativePrice2;
  }()
);
var SolSPLTokenPrice = (
  /** @class */
  function() {
    function SolSPLTokenPrice2(input) {
      this.nativePrice = input.nativePrice ? SolSPLNativePrice.create(input.nativePrice) : void 0;
      this.usdPrice = input.usdPrice;
      this.exchangeAddress = input.exchangeAddress ? SolAddress.create(input.exchangeAddress) : void 0;
      this.exchangeName = input.exchangeName;
    }
    SolSPLTokenPrice2.create = function(input) {
      if (input instanceof SolSPLTokenPrice2) {
        return input;
      }
      return new SolSPLTokenPrice2(input);
    };
    SolSPLTokenPrice2.fromJSON = function(json) {
      var input = {
        nativePrice: json.nativePrice ? SolSPLNativePrice.fromJSON(json.nativePrice) : void 0,
        usdPrice: json.usdPrice,
        exchangeAddress: json.exchangeAddress ? SolAddress.fromJSON(json.exchangeAddress) : void 0,
        exchangeName: json.exchangeName
      };
      return SolSPLTokenPrice2.create(input);
    };
    SolSPLTokenPrice2.prototype.toJSON = function() {
      return {
        nativePrice: this.nativePrice ? this.nativePrice.toJSON() : void 0,
        usdPrice: this.usdPrice,
        exchangeAddress: this.exchangeAddress ? this.exchangeAddress.toJSON() : void 0,
        exchangeName: this.exchangeName
      };
    };
    return SolSPLTokenPrice2;
  }()
);
var GetTokenPriceOperation = {
  operationId: "getTokenPrice",
  groupName: "token",
  httpMethod: "get",
  routePattern: "/token/{network}/{address}/price",
  parameterNames: ["network", "address"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return SolSPLTokenPrice.fromJSON(json);
  },
  serializeRequest: function(request) {
    var network = SolNetwork.create(request.network);
    var address = SolAddress.create(request.address);
    return {
      network: network.toJSON(),
      address: address.toJSON()
    };
  }
};
var SolMetaplexToken = (
  /** @class */
  function() {
    function SolMetaplexToken2(input) {
      this.metadataUri = input.metadataUri;
      this.masterEdition = input.masterEdition;
      this.isMutable = input.isMutable;
      this.primarySaleHappened = input.primarySaleHappened;
      this.sellerFeeBasisPoints = input.sellerFeeBasisPoints;
      this.updateAuthority = input.updateAuthority;
    }
    SolMetaplexToken2.create = function(input) {
      if (input instanceof SolMetaplexToken2) {
        return input;
      }
      return new SolMetaplexToken2(input);
    };
    SolMetaplexToken2.fromJSON = function(json) {
      var input = {
        metadataUri: json.metadataUri,
        masterEdition: json.masterEdition,
        isMutable: json.isMutable,
        primarySaleHappened: json.primarySaleHappened,
        sellerFeeBasisPoints: json.sellerFeeBasisPoints,
        updateAuthority: json.updateAuthority
      };
      return SolMetaplexToken2.create(input);
    };
    SolMetaplexToken2.prototype.toJSON = function() {
      return {
        metadataUri: this.metadataUri,
        masterEdition: this.masterEdition,
        isMutable: this.isMutable,
        primarySaleHappened: this.primarySaleHappened,
        sellerFeeBasisPoints: this.sellerFeeBasisPoints,
        updateAuthority: this.updateAuthority
      };
    };
    return SolMetaplexToken2;
  }()
);
var SolTokenMetadata = (
  /** @class */
  function() {
    function SolTokenMetadata2(input) {
      this.mint = input.mint;
      this.standard = input.standard;
      this.name = input.name;
      this.symbol = input.symbol;
      this.metaplex = SolMetaplexToken.create(input.metaplex);
    }
    SolTokenMetadata2.create = function(input) {
      if (input instanceof SolTokenMetadata2) {
        return input;
      }
      return new SolTokenMetadata2(input);
    };
    SolTokenMetadata2.fromJSON = function(json) {
      var input = {
        mint: json.mint,
        standard: json.standard,
        name: json.name,
        symbol: json.symbol,
        metaplex: SolMetaplexToken.fromJSON(json.metaplex)
      };
      return SolTokenMetadata2.create(input);
    };
    SolTokenMetadata2.prototype.toJSON = function() {
      return {
        mint: this.mint,
        standard: this.standard,
        name: this.name,
        symbol: this.symbol,
        metaplex: this.metaplex.toJSON()
      };
    };
    return SolTokenMetadata2;
  }()
);
var GetTokenMetadataOperation = {
  operationId: "getTokenMetadata",
  groupName: "token",
  httpMethod: "get",
  routePattern: "/token/{network}/{address}/metadata",
  parameterNames: ["network", "address"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return SolTokenMetadata.fromJSON(json);
  },
  serializeRequest: function(request) {
    var network = SolNetwork.create(request.network);
    var address = SolAddress.create(request.address);
    return {
      network: network.toJSON(),
      address: address.toJSON()
    };
  }
};
var SolGetTokenPriceNetworkEnum = (
  /** @class */
  function() {
    function SolGetTokenPriceNetworkEnum2() {
    }
    SolGetTokenPriceNetworkEnum2.create = function(input) {
      return input;
    };
    SolGetTokenPriceNetworkEnum2.fromJSON = function(json) {
      return json;
    };
    return SolGetTokenPriceNetworkEnum2;
  }()
);
var SolGetTokenMetadataNetworkEnum = (
  /** @class */
  function() {
    function SolGetTokenMetadataNetworkEnum2() {
    }
    SolGetTokenMetadataNetworkEnum2.create = function(input) {
      return input;
    };
    SolGetTokenMetadataNetworkEnum2.fromJSON = function(json) {
      return json;
    };
    return SolGetTokenMetadataNetworkEnum2;
  }()
);
var extendStatics4 = function(d, b) {
  extendStatics4 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics4(d, b);
};
function __extends4(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics4(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __spreadArray2(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
var CommonSolUtilsConfig = {
  defaultSolNetwork: {
    name: "defaultSolNetwork",
    defaultValue: "mainnet"
  }
};
var CommonSolUtilsConfigSetup = (
  /** @class */
  function() {
    function CommonSolUtilsConfigSetup2() {
    }
    CommonSolUtilsConfigSetup2.register = function(config) {
      config.registerKey(CommonSolUtilsConfig.defaultSolNetwork);
    };
    return CommonSolUtilsConfigSetup2;
  }()
);
var CommonSolUtils = (
  /** @class */
  function(_super) {
    __extends4(CommonSolUtils2, _super);
    function CommonSolUtils2(core2) {
      return _super.call(this, CommonSolUtils2.moduleName, core2) || this;
    }
    CommonSolUtils2.create = function(core2) {
      return new CommonSolUtils2(core2 !== null && core2 !== void 0 ? core2 : CoreProvider.getDefault());
    };
    CommonSolUtils2.prototype.setup = function() {
      CommonSolUtilsConfigSetup.register(this.core.config);
    };
    CommonSolUtils2.prototype.start = function() {
    };
    Object.defineProperty(CommonSolUtils2.prototype, "SolAddress", {
      get: function() {
        return SolAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(CommonSolUtils2.prototype, "SolNative", {
      get: function() {
        return SolNative;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(CommonSolUtils2.prototype, "SolNetwork", {
      get: function() {
        return SolNetwork;
      },
      enumerable: false,
      configurable: true
    });
    CommonSolUtils2.moduleName = "solUtils";
    return CommonSolUtils2;
  }(Module)
);
var SolNetworkResolver = (
  /** @class */
  function() {
    function SolNetworkResolver2() {
    }
    SolNetworkResolver2.resolve = function(network, core2) {
      if (!network) {
        network = core2.config.get(CommonSolUtilsConfig.defaultSolNetwork);
      }
      return SolNetwork.create(network).network;
    };
    return SolNetworkResolver2;
  }()
);
var getBalanceOperation = {
  method: "GET",
  name: "getBalance",
  id: "balance",
  groupName: "account",
  urlPathParamNames: ["network", "address"],
  urlPathPattern: "/account/{network}/{address}/balance",
  getRequestUrlParams: getRequestUrlParams$52,
  deserializeResponse: deserializeResponse$52,
  serializeRequest: serializeRequest$52,
  deserializeRequest: deserializeRequest$52
};
function getRequestUrlParams$52(request, core2) {
  return {
    network: SolNetworkResolver.resolve(request.network, core2),
    address: SolAddress.create(request.address).address
  };
}
function deserializeResponse$52(jsonResponse) {
  return SolNative.create(jsonResponse.lamports);
}
function serializeRequest$52(request, core2) {
  return {
    address: SolAddress.create(request.address).address,
    network: SolNetworkResolver.resolve(request.network, core2)
  };
}
function deserializeRequest$52(jsonRequest) {
  return {
    network: SolNetwork.create(jsonRequest.network),
    address: SolAddress.create(jsonRequest.address)
  };
}
var getNFTsOperation = {
  method: "GET",
  name: "getNFTs",
  id: "getNFTs",
  groupName: "account",
  urlPathParamNames: ["network", "address"],
  urlPathPattern: "/account/{network}/{address}/nft",
  getRequestUrlParams: getRequestUrlParams$42,
  deserializeResponse: deserializeResponse$42,
  serializeRequest: serializeRequest$42,
  deserializeRequest: deserializeRequest$42
};
function getRequestUrlParams$42(request, core2) {
  return {
    network: SolNetworkResolver.resolve(request.network, core2),
    address: SolAddress.create(request.address).address
  };
}
function deserializeResponse$42(jsonResponse) {
  return jsonResponse.map(function(item) {
    return {
      associatedTokenAddress: SolAddress.create(item.associatedTokenAddress),
      mint: SolAddress.create(item.mint),
      name: item.name,
      symbol: item.symbol
    };
  });
}
function serializeRequest$42(request, core2) {
  return {
    address: SolAddress.create(request.address).address,
    network: SolNetworkResolver.resolve(request.network, core2)
  };
}
function deserializeRequest$42(jsonRequest) {
  return {
    network: SolNetwork.create(jsonRequest.network),
    address: SolAddress.create(jsonRequest.address)
  };
}
var getPortfolioOperation = {
  method: "GET",
  name: "getPortfolio",
  id: "getPortfolio",
  groupName: "account",
  urlPathParamNames: ["network", "address"],
  urlPathPattern: "/account/{network}/{address}/portfolio",
  getRequestUrlParams: getRequestUrlParams$32,
  deserializeResponse: deserializeResponse$32,
  serializeRequest: serializeRequest$32,
  deserializeRequest: deserializeRequest$32
};
function getRequestUrlParams$32(request, core2) {
  return {
    network: SolNetworkResolver.resolve(request.network, core2),
    address: SolAddress.create(request.address).address
  };
}
function deserializeResponse$32(jsonResponse) {
  return {
    nativeBalance: SolNative.create(jsonResponse.nativeBalance.lamports, "lamports"),
    nfts: jsonResponse.nfts.map(function(nft) {
      return {
        associatedTokenAddress: SolAddress.create(nft.associatedTokenAddress),
        mint: SolAddress.create(nft.mint),
        name: nft.name,
        symbol: nft.symbol
      };
    }),
    tokens: jsonResponse.tokens.map(function(token) {
      return {
        associatedTokenAddress: SolAddress.create(token.associatedTokenAddress),
        mint: SolAddress.create(token.mint),
        amount: SolNative.create(token.amountRaw, "lamports"),
        name: token.name,
        symbol: token.symbol
      };
    })
  };
}
function serializeRequest$32(request, core2) {
  return {
    address: SolAddress.create(request.address).address,
    network: SolNetworkResolver.resolve(request.network, core2)
  };
}
function deserializeRequest$32(jsonRequest) {
  return {
    network: SolNetwork.create(jsonRequest.network),
    address: SolAddress.create(jsonRequest.address)
  };
}
var getSPLOperation = {
  method: "GET",
  name: "getSPL",
  id: "getSPL",
  groupName: "account",
  urlPathParamNames: ["network", "address"],
  urlPathPattern: "/account/{network}/{address}/tokens",
  getRequestUrlParams: getRequestUrlParams$22,
  deserializeResponse: deserializeResponse$22,
  serializeRequest: serializeRequest$22,
  deserializeRequest: deserializeRequest$22
};
function getRequestUrlParams$22(request, core2) {
  return {
    network: SolNetworkResolver.resolve(request.network, core2),
    address: SolAddress.create(request.address).address
  };
}
function deserializeResponse$22(jsonResponse) {
  return jsonResponse.map(function(token) {
    return {
      associatedTokenAddress: SolAddress.create(token.associatedTokenAddress),
      mint: SolAddress.create(token.mint),
      amount: SolNative.create(token.amountRaw, "lamports"),
      name: token.name,
      symbol: token.symbol
    };
  });
}
function serializeRequest$22(request, core2) {
  return {
    address: SolAddress.create(request.address).address,
    network: SolNetworkResolver.resolve(request.network, core2)
  };
}
function deserializeRequest$22(jsonRequest) {
  return {
    network: SolNetwork.create(jsonRequest.network),
    address: SolAddress.create(jsonRequest.address)
  };
}
var getNFTMetadataOperation2 = {
  method: "GET",
  name: "getNFTMetadata",
  id: "getNFTMetadata",
  groupName: "nft",
  urlPathParamNames: ["network", "address"],
  urlPathPattern: "/nft/{network}/{address}/metadata",
  getRequestUrlParams: getRequestUrlParams$12,
  deserializeResponse: deserializeResponse$12,
  serializeRequest: serializeRequest$12,
  deserializeRequest: deserializeRequest$12
};
function getRequestUrlParams$12(request, core2) {
  return {
    network: SolNetworkResolver.resolve(request.network, core2),
    address: SolAddress.create(request.address).address
  };
}
function deserializeResponse$12(jsonResponse) {
  return {
    mint: SolAddress.create(jsonResponse.mint),
    standard: jsonResponse.standard,
    name: jsonResponse.name,
    symbol: jsonResponse.symbol,
    metaplex: {
      metadataUri: jsonResponse.metaplex.metadataUri,
      updateAuthority: SolAddress.create(jsonResponse.metaplex.updateAuthority),
      sellerFeeBasisPoints: jsonResponse.metaplex.sellerFeeBasisPoints,
      primarySaleHappened: jsonResponse.metaplex.primarySaleHappened,
      isMutable: jsonResponse.metaplex.isMutable,
      masterEdition: jsonResponse.metaplex.masterEdition
    }
  };
}
function serializeRequest$12(request, core2) {
  return {
    address: SolAddress.create(request.address).address,
    network: SolNetworkResolver.resolve(request.network, core2)
  };
}
function deserializeRequest$12(jsonRequest) {
  return {
    network: SolNetwork.create(jsonRequest.network),
    address: SolAddress.create(jsonRequest.address)
  };
}
var getTokenPriceOperation2 = {
  method: "GET",
  name: "getTokenPrice",
  id: "getTokenPrice",
  groupName: "token",
  urlPathParamNames: ["network", "address"],
  urlPathPattern: "/token/{network}/{address}/price",
  getRequestUrlParams: getRequestUrlParams2,
  deserializeResponse: deserializeResponse2,
  serializeRequest: serializeRequest2,
  deserializeRequest: deserializeRequest2
};
function getRequestUrlParams2(request, core2) {
  var network = SolNetworkResolver.resolve(request.network, core2);
  if (network !== "mainnet") {
    throw new MoralisApiError({
      message: "Incorrct value for 'network', getTokenPrice is only available on mainnet",
      code: ApiErrorCode.INVALID_PARAMS
    });
  }
  return {
    network: SolNetworkResolver.resolve(request.network, core2),
    address: SolAddress.create(request.address).address
  };
}
function deserializeResponse2(jsonResponse) {
  return SolSPLTokenPrice.fromJSON(jsonResponse);
}
function serializeRequest2(request, core2) {
  return {
    address: SolAddress.create(request.address).address,
    network: SolNetworkResolver.resolve(request.network, core2)
  };
}
function deserializeRequest2(jsonRequest) {
  return {
    network: SolNetwork.create(jsonRequest.network),
    address: SolAddress.create(jsonRequest.address)
  };
}
var operationsV2 = [
  getBalanceOperation,
  getNFTsOperation,
  getPortfolioOperation,
  getSPLOperation,
  getNFTMetadataOperation2
];
var operationsV2All = __spreadArray2(__spreadArray2([], operationsV2, true), [getTokenPriceOperation2], false);

// node_modules/@moralisweb3/common-auth-utils/lib/esm/index.js
var import_dist16 = __toESM(require_dist());
var import_dist17 = __toESM(require_dist2());
var import_dist18 = __toESM(require_dist3());
var __assign3 = function() {
  __assign3 = Object.assign || function __assign5(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
function __rest3(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
var verifyChallengeAptosOperation = {
  method: "POST",
  name: "verifyChallengeAptos",
  id: "verifyChallengeAptos",
  groupName: "aptos",
  urlPathPattern: "/challenge/verify/aptos",
  bodyParamNames: ["message", "signature"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$a2,
  getRequestBody: getRequestBody$92,
  serializeRequest: serializeRequest$a2,
  deserializeRequest: deserializeRequest$a2,
  deserializeResponse: deserializeResponse$a2
};
function getRequestUrlParams$a2() {
  return {};
}
function getRequestBody$92(request) {
  return {
    message: request.message,
    signature: request.signature
  };
}
function deserializeResponse$a2(_a2) {
  var network = _a2.network, jsonResponse = __rest3(_a2, ["network"]);
  return __assign3(__assign3({}, jsonResponse), { network: AptosNetwork.create(network), address: AptosAddress.create(jsonResponse.address), expirationTime: maybe(jsonResponse.expirationTime, function(value) {
    return new Date(value);
  }), notBefore: maybe(jsonResponse.notBefore, function(value) {
    return new Date(value);
  }) });
}
function serializeRequest$a2(request) {
  return {
    message: request.message,
    signature: request.signature
  };
}
function deserializeRequest$a2(jsonRequest) {
  return {
    message: jsonRequest.message,
    signature: jsonRequest.signature
  };
}
var requestChallengeAptosOperation = {
  method: "POST",
  name: "requestChallengeAptos",
  id: "requestChallengeAptos",
  groupName: "aptos",
  urlPathPattern: "/challenge/request/aptos",
  bodyParamNames: [
    "domain",
    "network",
    "address",
    "statement",
    "uri",
    "expirationTime",
    "notBefore",
    "resources",
    "timeout",
    "publicKey"
  ],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$92,
  getRequestBody: getRequestBody$82,
  serializeRequest: serializeRequest$92,
  deserializeRequest: deserializeRequest$92,
  deserializeResponse: deserializeResponse$92
};
function getRequestUrlParams$92() {
  return {};
}
function getRequestBody$82(request) {
  return {
    domain: request.domain,
    network: AptosNetwork.create(request.network).toString(),
    address: AptosAddress.create(request.address).toString(),
    publicKey: request.publicKey,
    statement: request.statement,
    uri: request.uri,
    expirationTime: request.expirationTime,
    notBefore: request.notBefore,
    resources: request.resources,
    timeout: request.timeout
  };
}
function deserializeResponse$92(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$92(request, core2) {
  return {
    domain: request.domain,
    network: AptosNetworkResolver.resolve(request.network, core2),
    address: AptosAddress.create(request.address).toString(),
    publicKey: request.publicKey,
    statement: request.statement,
    uri: request.uri,
    expirationTime: request.expirationTime,
    notBefore: request.notBefore,
    resources: request.resources,
    timeout: request.timeout
  };
}
function deserializeRequest$92(jsonRequest) {
  return {
    domain: jsonRequest.domain,
    network: AptosNetwork.create(jsonRequest.network),
    address: AptosAddress.create(jsonRequest.address),
    publicKey: jsonRequest.publicKey,
    statement: jsonRequest.statement,
    uri: jsonRequest.uri,
    expirationTime: jsonRequest.expirationTime,
    notBefore: jsonRequest.notBefore,
    resources: jsonRequest.resources,
    timeout: jsonRequest.timeout
  };
}
var verifyChallengeEvmOperation = {
  method: "POST",
  name: "verifyChallengeEvm",
  id: "verifyChallengeEvm",
  groupName: "evm",
  urlPathPattern: "/challenge/verify/evm",
  bodyParamNames: ["message", "signature"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$82,
  getRequestBody: getRequestBody$72,
  serializeRequest: serializeRequest$82,
  deserializeRequest: deserializeRequest$82,
  deserializeResponse: deserializeResponse$82
};
function getRequestUrlParams$82() {
  return {};
}
function getRequestBody$72(request) {
  return {
    message: request.message,
    signature: request.signature
  };
}
function deserializeResponse$82(_a2) {
  var chainId = _a2.chainId, jsonResponse = __rest3(_a2, ["chainId"]);
  return __assign3(__assign3({}, jsonResponse), { chain: EvmChain.create(chainId), address: EvmAddress.create(jsonResponse.address), expirationTime: maybe(jsonResponse.expirationTime, function(value) {
    return new Date(value);
  }), notBefore: maybe(jsonResponse.notBefore, function(value) {
    return new Date(value);
  }) });
}
function serializeRequest$82(request) {
  return {
    message: request.message,
    signature: request.signature
  };
}
function deserializeRequest$82(jsonRequest) {
  return {
    message: jsonRequest.message,
    signature: jsonRequest.signature
  };
}
var requestChallengeEvmOperation = {
  method: "POST",
  name: "requestChallengeEvm",
  id: "requestChallengeEvm",
  groupName: "evm",
  urlPathPattern: "/challenge/request/evm",
  bodyParamNames: [
    "domain",
    "chainId",
    "address",
    "statement",
    "uri",
    "expirationTime",
    "notBefore",
    "resources",
    "timeout"
  ],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$72,
  getRequestBody: getRequestBody$62,
  serializeRequest: serializeRequest$72,
  deserializeRequest: deserializeRequest$72,
  deserializeResponse: deserializeResponse$72
};
function getRequestUrlParams$72() {
  return {};
}
function getRequestBody$62(request, core2) {
  return {
    domain: request.domain,
    chainId: EvmChainResolver.resolve(request.chainId, core2).hex,
    address: EvmAddress.create(request.address).checksum,
    statement: request.statement,
    uri: request.uri,
    expirationTime: request.expirationTime,
    notBefore: request.notBefore,
    resources: request.resources,
    timeout: request.timeout
  };
}
function deserializeResponse$72(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$72(request, core2) {
  return {
    domain: request.domain,
    chainId: EvmChainResolver.resolve(request.chainId, core2).decimal.toString(),
    address: EvmAddress.create(request.address).checksum,
    statement: request.statement,
    uri: request.uri,
    expirationTime: request.expirationTime,
    notBefore: request.notBefore,
    resources: request.resources,
    timeout: request.timeout
  };
}
function deserializeRequest$72(jsonRequest, core2) {
  return {
    domain: jsonRequest.domain,
    chainId: EvmChainResolver.resolve(jsonRequest.chainId, core2),
    address: EvmAddress.create(jsonRequest.address),
    statement: jsonRequest.statement,
    uri: jsonRequest.uri,
    expirationTime: jsonRequest.expirationTime,
    notBefore: jsonRequest.notBefore,
    resources: jsonRequest.resources,
    timeout: jsonRequest.timeout
  };
}
var getAddressesOperation = {
  method: "GET",
  name: "getAddresses",
  id: "getAddresses",
  groupName: "evm",
  urlPathPattern: "/profile/{profileId}/addresses",
  urlPathParamNames: ["profileId"],
  getRequestUrlParams: getRequestUrlParams$62,
  serializeRequest: serializeRequest$62,
  deserializeRequest: deserializeRequest$62,
  deserializeResponse: deserializeResponse$62
};
function getRequestUrlParams$62(request) {
  return {
    profileId: request.profileId
  };
}
function deserializeResponse$62(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$62(request) {
  return request;
}
function deserializeRequest$62(jsonRequest) {
  return jsonRequest;
}
var removeBindOperation = {
  method: "POST",
  name: "removeBind",
  id: "removeBind",
  groupName: "evm",
  urlPathPattern: "/bind/remove",
  bodyParamNames: ["blockchainType", "address", "profileId", "publicKey"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$53,
  getRequestBody: getRequestBody$52,
  serializeRequest: serializeRequest$53,
  deserializeRequest: deserializeRequest$53,
  deserializeResponse: deserializeResponse$53
};
function getRequestUrlParams$53() {
  return {};
}
function getRequestBody$52(request) {
  return {
    blockchainType: request.blockchainType,
    address: EvmAddress.create(request.address).checksum,
    profileId: request.profileId,
    publicKey: request.publicKey
  };
}
function deserializeResponse$53(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$53(request) {
  return {
    blockchainType: request.blockchainType,
    address: EvmAddress.create(request.address).checksum,
    profileId: request.profileId,
    publicKey: request.publicKey
  };
}
function deserializeRequest$53(jsonRequest) {
  return {
    blockchainType: jsonRequest.blockchainType,
    address: EvmAddress.create(jsonRequest.address),
    profileId: jsonRequest.profileId,
    publicKey: jsonRequest.publicKey
  };
}
var requestBindOperation = {
  method: "POST",
  name: "requestBind",
  id: "requestBind",
  groupName: "evm",
  urlPathPattern: "/bind/request",
  bodyParamNames: ["addresses"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$43,
  getRequestBody: getRequestBody$42,
  serializeRequest: serializeRequest$43,
  deserializeRequest: deserializeRequest$43,
  deserializeResponse: deserializeResponse$43
};
function getRequestUrlParams$43() {
  return {};
}
function getRequestBody$42(request) {
  return {
    addresses: request.addresses.map(function(address) {
      return {
        blockchainType: address.blockchainType,
        address: EvmAddress.create(address.address).checksum
      };
    })
  };
}
function deserializeResponse$43(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$43(request) {
  return {
    addresses: request.addresses.map(function(address) {
      return {
        blockchainType: address.blockchainType,
        address: EvmAddress.create(address.address).checksum
      };
    })
  };
}
function deserializeRequest$43(jsonRequest) {
  return {
    addresses: jsonRequest.addresses.map(function(address) {
      return {
        blockchainType: address.blockchainType,
        address: EvmAddress.create(address.address)
      };
    })
  };
}
var verifyRemoveBindOperation = {
  method: "POST",
  name: "verifyRemoveBind",
  id: "verifyRemoveBind",
  groupName: "evm",
  urlPathPattern: "/bind/remove/verify",
  bodyParamNames: ["message", "signature"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$33,
  getRequestBody: getRequestBody$32,
  serializeRequest: serializeRequest$33,
  deserializeRequest: deserializeRequest$33,
  deserializeResponse: deserializeResponse$33
};
function getRequestUrlParams$33() {
  return {};
}
function getRequestBody$32(request) {
  return {
    message: request.message,
    signature: request.signature
  };
}
function deserializeResponse$33(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$33(request) {
  return {
    message: request.message,
    signature: request.signature
  };
}
function deserializeRequest$33(jsonRequest) {
  return {
    message: jsonRequest.message,
    signature: jsonRequest.signature
  };
}
var verifyRequestBindOperation = {
  method: "POST",
  name: "verifyRequestBind",
  id: "verifyRequestBind",
  groupName: "evm",
  urlPathPattern: "/bind/request/verify",
  bodyParamNames: ["verifications"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$23,
  getRequestBody: getRequestBody$22,
  serializeRequest: serializeRequest$23,
  deserializeRequest: deserializeRequest$23,
  deserializeResponse: deserializeResponse$23
};
function getRequestUrlParams$23() {
  return {};
}
function getRequestBody$22(request) {
  return {
    verifications: request.verifications
  };
}
function deserializeResponse$23(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$23(request) {
  return {
    verifications: request.verifications
  };
}
function deserializeRequest$23(jsonRequest) {
  return {
    verifications: jsonRequest.verifications
  };
}
var verifyChallengeSolanaOperation = {
  method: "POST",
  name: "verifyChallengeSolana",
  id: "verifyChallengeSolana",
  groupName: "solana",
  urlPathPattern: "/challenge/verify/solana",
  bodyParamNames: ["message", "signature"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$13,
  getRequestBody: getRequestBody$12,
  serializeRequest: serializeRequest$13,
  deserializeRequest: deserializeRequest$13,
  deserializeResponse: deserializeResponse$13
};
function getRequestUrlParams$13() {
  return {};
}
function getRequestBody$12(request) {
  return {
    message: request.message,
    signature: request.signature
  };
}
function deserializeResponse$13(_a2) {
  var network = _a2.network, jsonResponse = __rest3(_a2, ["network"]);
  return __assign3(__assign3({}, jsonResponse), { solNetwork: SolNetwork.create(network), address: SolAddress.create(jsonResponse.address), expirationTime: maybe(jsonResponse.expirationTime, function(value) {
    return new Date(value);
  }), notBefore: maybe(jsonResponse.notBefore, function(value) {
    return new Date(value);
  }) });
}
function serializeRequest$13(request) {
  return {
    message: request.message,
    signature: request.signature
  };
}
function deserializeRequest$13(jsonRequest) {
  return {
    message: jsonRequest.message,
    signature: jsonRequest.signature
  };
}
var requestChallengeSolanaOperation = {
  method: "POST",
  name: "requestChallengeSolana",
  id: "requestChallengeSolana",
  groupName: "solana",
  urlPathPattern: "/challenge/request/solana",
  bodyParamNames: [
    "domain",
    "network",
    "address",
    "statement",
    "uri",
    "expirationTime",
    "notBefore",
    "resources",
    "timeout"
  ],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams3,
  getRequestBody: getRequestBody2,
  serializeRequest: serializeRequest3,
  deserializeRequest: deserializeRequest3,
  deserializeResponse: deserializeResponse3
};
function getRequestUrlParams3() {
  return {};
}
function getRequestBody2(request) {
  return {
    domain: request.domain,
    network: SolNetwork.create(request.network).network,
    address: SolAddress.create(request.address).address,
    statement: request.statement,
    uri: request.uri,
    expirationTime: request.expirationTime,
    notBefore: request.notBefore,
    resources: request.resources,
    timeout: request.timeout
  };
}
function deserializeResponse3(jsonResponse) {
  return jsonResponse;
}
function serializeRequest3(request) {
  return {
    domain: request.domain,
    network: SolNetwork.create(request.network).network,
    address: SolAddress.create(request.address).address,
    statement: request.statement,
    uri: request.uri,
    expirationTime: request.expirationTime,
    notBefore: request.notBefore,
    resources: request.resources,
    timeout: request.timeout
  };
}
function deserializeRequest3(jsonRequest) {
  return {
    domain: jsonRequest.domain,
    network: SolNetwork.create(jsonRequest.network),
    address: SolAddress.create(jsonRequest.address),
    statement: jsonRequest.statement,
    uri: jsonRequest.uri,
    expirationTime: jsonRequest.expirationTime,
    notBefore: jsonRequest.notBefore,
    resources: jsonRequest.resources,
    timeout: jsonRequest.timeout
  };
}

// node_modules/@moralisweb3/auth/lib/esm/index.js
var extendStatics5 = function(d, b) {
  extendStatics5 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics5(d, b);
};
function __extends5(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics5(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign4 = function() {
  __assign4 = Object.assign || function __assign5(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign4.apply(this, arguments);
};
function __rest4(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __awaiter2(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator2(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
var AuthNetworkType;
(function(AuthNetworkType2) {
  AuthNetworkType2["EVM"] = "evm";
  AuthNetworkType2["SOLANA"] = "solana";
  AuthNetworkType2["APTOS"] = "aptos";
})(AuthNetworkType || (AuthNetworkType = {}));
var makeEvmRequestMessage = function(core2, _a2) {
  var chain = _a2.chain, address = _a2.address;
  _a2.networkType;
  var options = __rest4(_a2, ["chain", "address", "networkType"]);
  return new OperationResolver(requestChallengeEvmOperation, BASE_URL2, core2).fetch(__assign4({ chainId: EvmChain.create(chain).hex, address: EvmAddress.create(address).checksum }, options));
};
var makeSolRequestMessage = function(core2, _a2) {
  var address = _a2.address;
  _a2.networkType;
  var solNetwork = _a2.solNetwork, options = __rest4(_a2, ["address", "networkType", "solNetwork"]);
  if (!options.network && solNetwork) {
    options.network = solNetwork;
  }
  return new OperationResolver(requestChallengeSolanaOperation, BASE_URL2, core2).fetch(__assign4({ address: SolAddress.create(address).toString() }, options));
};
var makeAptosRequestMessage = function(core2, _a2) {
  var address = _a2.address;
  _a2.networkType;
  var options = __rest4(_a2, ["address", "networkType"]);
  return new OperationResolver(requestChallengeAptosOperation, BASE_URL2, core2).fetch(__assign4({ address: AptosAddress.create(address).toString() }, options));
};
var makeRequestMessage = function(core2) {
  return function(options) {
    return __awaiter2(void 0, void 0, void 0, function() {
      return __generator2(this, function(_a2) {
        switch (options.networkType) {
          case AuthNetworkType.EVM:
            return [2, makeEvmRequestMessage(core2, options)];
          case AuthNetworkType.SOLANA:
            return [2, makeSolRequestMessage(core2, options)];
          case AuthNetworkType.APTOS:
            return [2, makeAptosRequestMessage(core2, options)];
          default:
            if (!options.networkType) {
              return [2, makeEvmRequestMessage(core2, options)];
            }
            throw new MoralisAuthError({
              code: AuthErrorCode.INCORRECT_NETWORK,
              message: 'Incorrect networkType provided. Got "'.concat(options.networkType, '", Valid values are: ').concat(Object.values(AuthNetworkType).map(function(value) {
                return '"'.concat(value, '"');
              }).join(", "))
            });
        }
      });
    });
  };
};
var makeEvmVerify = function(core2, _a2) {
  _a2.networkType;
  _a2.network;
  var options = __rest4(_a2, ["networkType", "network"]);
  return new OperationResolver(verifyChallengeEvmOperation, BASE_URL2, core2).fetch({
    message: options.message,
    signature: options.signature
  });
};
var makeSolVerify = function(core2, _a2) {
  _a2.networkType;
  _a2.network;
  var options = __rest4(_a2, ["networkType", "network"]);
  return new OperationResolver(verifyChallengeSolanaOperation, BASE_URL2, core2).fetch({
    message: options.message,
    signature: options.signature
  });
};
var makeAptosVerify = function(core2, _a2) {
  _a2.networkType;
  var options = __rest4(_a2, ["networkType"]);
  return new OperationResolver(verifyChallengeAptosOperation, BASE_URL2, core2).fetch({
    message: options.message,
    signature: options.signature
  });
};
var makeVerify = function(core2) {
  return function(options) {
    return __awaiter2(void 0, void 0, void 0, function() {
      return __generator2(this, function(_a2) {
        if (!options.networkType && options.network) {
          options.networkType = options.network;
        }
        switch (options.networkType) {
          case AuthNetworkType.EVM:
            return [2, makeEvmVerify(core2, options)];
          case AuthNetworkType.SOLANA:
            return [2, makeSolVerify(core2, options)];
          case AuthNetworkType.APTOS:
            return [2, makeAptosVerify(core2, options)];
          default:
            if (!options.networkType) {
              return [2, makeEvmVerify(core2, options)];
            }
            throw new MoralisAuthError({
              code: AuthErrorCode.INCORRECT_NETWORK,
              message: 'Incorrect network provided. Got "'.concat(options.networkType, '", Valid values are: ').concat(Object.values(AuthNetworkType).map(function(value) {
                return '"'.concat(value, '"');
              }).join(", "))
            });
        }
      });
    });
  };
};
var BASE_URL2 = "https://authapi.moralis.io";
var Auth = (
  /** @class */
  function(_super) {
    __extends5(Auth2, _super);
    function Auth2(core2) {
      var _this = _super.call(this, Auth2.moduleName, core2, function() {
        return BASE_URL2;
      }) || this;
      _this.evm = {
        getAddresses: function(request) {
          return new OperationResolver(getAddressesOperation, _this.baseUrl, _this.core).fetch(request);
        },
        removeBind: function(request) {
          return new OperationResolver(removeBindOperation, _this.baseUrl, _this.core).fetch(request);
        },
        requestBind: function(request) {
          return new OperationResolver(requestBindOperation, _this.baseUrl, _this.core).fetch(request);
        },
        requestChallengeEvm: function(request) {
          return new OperationResolver(requestChallengeEvmOperation, _this.baseUrl, _this.core).fetch(request);
        },
        verifyRemoveBind: function(request) {
          return new OperationResolver(verifyRemoveBindOperation, _this.baseUrl, _this.core).fetch(request);
        },
        verifyRequestBind: function(request) {
          return new OperationResolver(verifyRequestBindOperation, _this.baseUrl, _this.core).fetch(request);
        }
      };
      _this.solana = {
        requestChallengeSol: function(request) {
          return new OperationResolver(requestChallengeSolanaOperation, _this.baseUrl, _this.core).fetch(request);
        }
      };
      _this.requestMessage = function(options) {
        return makeRequestMessage(_this.core)(options);
      };
      return _this;
    }
    Auth2.create = function(core2) {
      return new Auth2(core2 !== null && core2 !== void 0 ? core2 : CoreProvider.getDefault());
    };
    Auth2.prototype.setup = function() {
    };
    Auth2.prototype.start = function() {
    };
    Auth2.prototype.verify = function(options) {
      return makeVerify(this.core)(options);
    };
    Auth2.moduleName = "auth";
    return Auth2;
  }(ApiModule)
);

// node_modules/@moralisweb3/evm-api/lib/esm/index.js
var import_dist22 = __toESM(require_dist());
var import_dist23 = __toESM(require_dist2());
var import_dist24 = __toESM(require_dist3());
var extendStatics6 = function(d, b) {
  extendStatics6 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics6(d, b);
};
function __extends6(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics6(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var EvmApiConfig = {
  evmApiBaseUrl: {
    name: "evmApiBaseUrl",
    defaultValue: "https://deep-index.moralis.io/api/v2.2"
  }
};
var EvmApiConfigSetup = (
  /** @class */
  function() {
    function EvmApiConfigSetup2() {
    }
    EvmApiConfigSetup2.register = function(config) {
      config.registerKey(EvmApiConfig.evmApiBaseUrl);
    };
    return EvmApiConfigSetup2;
  }()
);
var ClientEvmApi = (
  /** @class */
  function(_super) {
    __extends6(ClientEvmApi2, _super);
    function ClientEvmApi2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.block = {
        getBlock: function(request) {
          return new NullableOperationResolver(getBlockOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getDateToBlock: function(request) {
          return new OperationResolver(getDateToBlockOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getBlockStats: function(request) {
          return new OperationV3Resolver(GetBlockStatsOperation, _this.baseUrl, _this.core).fetch(request, null);
        }
      };
      _this.events = {
        getContractEvents: function(request) {
          return new PaginatedOperationResolver(getContractEventsOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getContractLogs: function(request) {
          return new PaginatedOperationResolver(getContractLogsOperation, _this.baseUrl, _this.core).fetch(request);
        }
      };
      _this.nft = {
        getContractNFTs: function(request) {
          return new PaginatedOperationResolver(getContractNFTsOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getMultipleNFTs: function(request) {
          return new OperationResolver(getMultipleNFTsOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTContractMetadata: function(request) {
          return new NullableOperationResolver(getNFTContractMetadataOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTContractTransfers: function(request) {
          return new PaginatedOperationResolver(getNFTContractTransfersOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTLowestPrice: function(request) {
          return new NullableOperationResolver(getNFTLowestPriceOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTMetadata: function(request) {
          return new NullableOperationResolver(getNFTMetadataOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTOwners: function(request) {
          return new PaginatedOperationResolver(getNFTOwnersOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTTokenIdOwners: function(request) {
          return new PaginatedOperationResolver(getNFTTokenIdOwnersOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTTransfersByBlock: function(request) {
          return new PaginatedOperationResolver(getNFTTransfersByBlockOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTTransfersFromToBlock: function(request) {
          return new PaginatedOperationResolver(getNFTTransfersFromToBlockOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTTransfers: function(request) {
          return new PaginatedOperationResolver(getNFTTransfersOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getWalletNFTCollections: function(request) {
          return new PaginatedOperationResolver(getWalletNFTCollectionsOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getWalletNFTs: function(request) {
          return new PaginatedOperationResolver(getWalletNFTsOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getWalletNFTTransfers: function(request) {
          return new PaginatedOperationResolver(getWalletNFTTransfersOperation, _this.baseUrl, _this.core).fetch(request);
        },
        reSyncMetadata: function(request) {
          return new OperationResolver(reSyncMetadataOperation, _this.baseUrl, _this.core).fetch(request);
        },
        syncNFTContract: function(request) {
          return new OperationResolver(syncNFTContractOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTTrades: function(request) {
          return new PaginatedOperationV3Resolver(GetNFTTradesOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getNFTCollectionStats: function(request) {
          return new OperationV3Resolver(GetNFTCollectionStatsOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getNFTTokenStats: function(request) {
          return new OperationV3Resolver(GetNFTTokenStatsOperation, _this.baseUrl, _this.core).fetch(request, null);
        }
      };
      _this.transaction = {
        getInternalTransactions: function(request) {
          return new OperationResolver(getInternalTransactionsOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getTransaction: function(request) {
          return new NullableOperationResolver(getTransactionOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getTransactionVerbose: function(request) {
          return new NullableOperationResolver(getTransactionVerboseOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getWalletTransactions: function(request) {
          return new PaginatedOperationResolver(getWalletTransactionsOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getWalletTransactionsVerbose: function(request) {
          return new PaginatedOperationResolver(getWalletTransactionsVerboseOperation, _this.baseUrl, _this.core).fetch(request);
        }
      };
      _this.balance = {
        getNativeBalance: function(request) {
          return new OperationResolver(getNativeBalanceOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNativeBalancesForAddresses: function(request) {
          return new OperationResolver(getNativeBalancesForAddressesOperation, _this.baseUrl, _this.core).fetch(request);
        }
      };
      _this.defi = {
        getPairAddress: function(request) {
          return new OperationResolver(getPairAddressOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getPairReserves: function(request) {
          return new OperationResolver(getPairReservesOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getPairPrice: function(request) {
          return new OperationV3Resolver(GetPairPriceOperation, _this.baseUrl, _this.core).fetch(request, null);
        }
      };
      _this.token = {
        getTokenAllowance: function(request) {
          return new OperationResolver(getTokenAllowanceOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getTokenMetadataBySymbol: function(request) {
          return new OperationResolver(getTokenMetadataBySymbolOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getTokenMetadata: function(request) {
          return new OperationResolver(getTokenMetadataOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getTokenPrice: function(request) {
          return new OperationResolver(getTokenPriceOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getTokenTransfers: function(request) {
          return new PaginatedOperationResolver(getTokenTransfersOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getWalletTokenBalances: function(request) {
          return new OperationResolver(getWalletTokenBalancesOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getWalletTokenTransfers: function(request) {
          return new PaginatedOperationResolver(getWalletTokenTransfersOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getMultipleTokenPrices: function(request, body) {
          return new OperationV3Resolver(GetMultipleTokenPricesOperation, _this.baseUrl, _this.core).fetch(request, body);
        },
        getTokenStats: function(request) {
          return new OperationV3Resolver(GetTokenStatsOperation, _this.baseUrl, _this.core).fetch(request, null);
        }
      };
      _this.resolve = {
        resolveAddress: function(request) {
          return new NullableOperationResolver(resolveAddressOperation, _this.baseUrl, _this.core).fetch(request);
        },
        resolveDomain: function(request) {
          return new NullableOperationResolver(resolveDomainOperation, _this.baseUrl, _this.core).fetch(request);
        },
        resolveENSDomain: function(request) {
          return new NullableOperationResolver(resolveENSDomainOperation, _this.baseUrl, _this.core).fetch(request);
        },
        resolveAddressToDomain: function(request) {
          return new OperationV3Resolver(ResolveAddressToDomainOperation, _this.baseUrl, _this.core).fetch(request, null);
        }
      };
      _this.utils = {
        runContractFunction: function(request) {
          return new OperationResolver(runContractFunctionOperation, _this.baseUrl, _this.core).fetch(request);
        },
        web3ApiVersion: function() {
          return new OperationV3Resolver(Web3ApiVersionOperation, _this.baseUrl, _this.core).fetch({}, null);
        },
        endpointWeights: function() {
          return new OperationV3Resolver(EndpointWeightsOperation, _this.baseUrl, _this.core).fetch({}, null);
        },
        reviewContracts: function(request, body) {
          return new OperationV3Resolver(ReviewContractsOperation, _this.baseUrl, _this.core).fetch(request, body);
        }
      };
      _this.ipfs = {
        uploadFolder: function(request) {
          return new OperationResolver(uploadFolderOperation, _this.baseUrl, _this.core).fetch(request);
        }
      };
      _this.wallets = {
        getWalletTokenBalancesPrice: function(request) {
          return new PaginatedOperationV3Resolver(GetWalletTokenBalancesPriceOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getWalletNetWorth: function(request) {
          return new OperationV3Resolver(GetWalletNetWorthOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getWalletActiveChains: function(request) {
          return new OperationV3Resolver(GetWalletActiveChainsOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getWalletStats: function(request) {
          return new OperationV3Resolver(GetWalletStatsOperation, _this.baseUrl, _this.core).fetch(request, null);
        }
      };
      _this.marketData = {
        getTopERC20TokensByMarketCap: function() {
          return new OperationV3Resolver(GetTopERC20TokensByMarketCapOperation, _this.baseUrl, _this.core).fetch({}, null);
        },
        getTopERC20TokensByPriceMovers: function() {
          return new OperationV3Resolver(GetTopERC20TokensByPriceMoversOperation, _this.baseUrl, _this.core).fetch({}, null);
        },
        getTopNFTCollectionsByMarketCap: function() {
          return new OperationV3Resolver(GetTopNFTCollectionsByMarketCapOperation, _this.baseUrl, _this.core).fetch({}, null);
        },
        getHottestNFTCollectionsByTradingVolume: function() {
          return new OperationV3Resolver(GetHottestNFTCollectionsByTradingVolumeOperation, _this.baseUrl, _this.core).fetch({}, null);
        },
        getTopCryptoCurrenciesByMarketCap: function() {
          return new OperationV3Resolver(GetTopCryptoCurrenciesByMarketCapOperation, _this.baseUrl, _this.core).fetch({}, null);
        },
        getTopCryptoCurrenciesByTradingVolume: function() {
          return new OperationV3Resolver(GetTopCryptoCurrenciesByTradingVolumeOperation, _this.baseUrl, _this.core).fetch({}, null);
        }
      };
      return _this;
    }
    return ClientEvmApi2;
  }(ApiModule)
);
var EvmApi = (
  /** @class */
  function(_super) {
    __extends6(EvmApi2, _super);
    function EvmApi2(core2) {
      return _super.call(this, EvmApi2.moduleName, core2, function() {
        return core2.config.get(EvmApiConfig.evmApiBaseUrl);
      }) || this;
    }
    EvmApi2.create = function(core2) {
      return new EvmApi2(core2 !== null && core2 !== void 0 ? core2 : CoreProvider.getDefault());
    };
    EvmApi2.prototype.setup = function() {
      EvmApiConfigSetup.register(this.core.config);
    };
    EvmApi2.prototype.start = function() {
    };
    EvmApi2.moduleName = "evmApi";
    return EvmApi2;
  }(ClientEvmApi)
);

// node_modules/@moralisweb3/aptos-api/lib/esm/index.js
var import_dist25 = __toESM(require_dist());
var import_dist26 = __toESM(require_dist2());
var import_dist27 = __toESM(require_dist3());
var extendStatics7 = function(d, b) {
  extendStatics7 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics7(d, b);
};
function __extends7(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics7(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var MAINNET_BASE_URL = "https://aptos-mainnet.aws-prod-api-1.moralis.io";
var TESTNET_BASE_URL = "https://aptos-testnet.aws-prod-api-1.moralis.io";
var AptosApi = (
  /** @class */
  function(_super) {
    __extends7(AptosApi2, _super);
    function AptosApi2(core2) {
      var _this = _super.call(this) || this;
      _this.core = core2;
      return _this;
    }
    AptosApi2.create = function(core2) {
      if (!core2) {
        core2 = CoreProvider.getDefault();
      }
      return new AptosApi2(core2);
    };
    AptosApi2.prototype.createEndpoint = function(operation) {
      var _this = this;
      return function(request) {
        var resolver = new OperationV3Resolver(operation, createBaseUrlResolver(_this.core), _this.core);
        return resolver.resolve(request, null);
      };
    };
    AptosApi2.prototype.createEndpointWithBody = function(operation) {
      var _this = this;
      return function(request, body) {
        var resolver = new OperationV3Resolver(operation, createBaseUrlResolver(_this.core), _this.core);
        return resolver.resolve(request, body);
      };
    };
    AptosApi2.moduleName = "aptApi";
    return AptosApi2;
  }(AbstractClient)
);
function createBaseUrlResolver(core2) {
  return function(request) {
    var network = request.network;
    if (network) {
      var finalNetwork = AptosNetworkResolver.resolve(network, core2);
      switch (finalNetwork) {
        case "mainnet":
          return MAINNET_BASE_URL;
        case "testnet":
          return TESTNET_BASE_URL;
        default:
          throw new Error("Not supported network");
      }
    }
    return MAINNET_BASE_URL;
  };
}

// node_modules/@moralisweb3/sol-api/lib/esm/index.js
var import_dist28 = __toESM(require_dist());
var import_dist29 = __toESM(require_dist2());
var import_dist30 = __toESM(require_dist3());
var extendStatics8 = function(d, b) {
  extendStatics8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics8(d, b);
};
function __extends8(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics8(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var ClientSolApi = (
  /** @class */
  function(_super) {
    __extends8(ClientSolApi2, _super);
    function ClientSolApi2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.account = {
        getBalance: function(request) {
          return new OperationResolver(getBalanceOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTs: function(request) {
          return new OperationResolver(getNFTsOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getPortfolio: function(request) {
          return new OperationResolver(getPortfolioOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getSPL: function(request) {
          return new OperationResolver(getSPLOperation, _this.baseUrl, _this.core).fetch(request);
        }
      };
      _this.nft = {
        getNFTMetadata: function(request) {
          return new OperationResolver(getNFTMetadataOperation2, _this.baseUrl, _this.core).fetch(request);
        }
      };
      _this.token = {
        getTokenPrice: function(request) {
          return new OperationV3Resolver(GetTokenPriceOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getTokenMetadata: function(request) {
          return new OperationV3Resolver(GetTokenMetadataOperation, _this.baseUrl, _this.core).fetch(request, null);
        }
      };
      return _this;
    }
    return ClientSolApi2;
  }(ApiModule)
);
var SolApiConfig = {
  solApiBaseUrl: {
    name: "solApiBaseUrl",
    defaultValue: "https://solana-gateway.moralis.io"
  }
};
var EvmSolApiConfigSetup = (
  /** @class */
  function() {
    function EvmSolApiConfigSetup2() {
    }
    EvmSolApiConfigSetup2.register = function(config) {
      config.registerKey(SolApiConfig.solApiBaseUrl);
    };
    return EvmSolApiConfigSetup2;
  }()
);
var SolApi = (
  /** @class */
  function(_super) {
    __extends8(SolApi2, _super);
    function SolApi2(core2) {
      return _super.call(this, SolApi2.moduleName, core2, function() {
        return core2.config.get(SolApiConfig.solApiBaseUrl);
      }) || this;
    }
    SolApi2.create = function(core2) {
      return new SolApi2(core2 !== null && core2 !== void 0 ? core2 : CoreProvider.getDefault());
    };
    SolApi2.prototype.setup = function() {
      EvmSolApiConfigSetup.register(this.core.config);
    };
    SolApi2.prototype.start = function() {
    };
    SolApi2.moduleName = "solApi";
    return SolApi2;
  }(ClientSolApi)
);

// node_modules/moralis/lib/esm/index.js
var core = Core.create();
var commonEvmUtils = CommonEvmUtils.create(core);
var commonSolUtils = CommonSolUtils.create(core);
var apiUtils = ApiUtils.create(core);
var auth = Auth.create(core);
var streams = Streams.create(core);
var evmApi = EvmApi.create(core);
var solApi = SolApi.create(core);
var aptosApi = AptosApi.create(core);
core.registerModules([commonEvmUtils, commonSolUtils, auth, apiUtils, evmApi, solApi, streams]);
CoreProvider.setDefault(core);
var Moralis = {
  Core: core,
  Auth: auth,
  Streams: streams,
  EvmApi: evmApi,
  SolApi: solApi,
  AptosApi: aptosApi,
  EvmUtils: commonEvmUtils,
  SolUtils: commonSolUtils,
  start: function(config) {
    return core.start(config);
  }
};
export {
  Moralis as default
};
/*! Bundled license information:

@moralisweb3/common-aptos-utils/lib/esm/index.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=moralis.js.map
