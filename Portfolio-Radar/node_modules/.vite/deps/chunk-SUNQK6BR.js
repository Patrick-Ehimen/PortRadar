import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'

globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
globalThis.global = globalThis.global || __global_polyfill
globalThis.process = globalThis.process || __process_polyfill

import {
  fetchCurrencyMetadata,
  isNativeToken
} from "./chunk-T2F3HN4V.js";
import {
  AmountSchema,
  BigNumberTransformSchema$1,
  ContractWrapper,
  FileOrBufferOrStringSchema,
  HexColor,
  z
} from "./chunk-VXFW7KOM.js";
import {
  init_lib6 as init_lib,
  utils_exports
} from "./chunk-VKHIDRSF.js";
import {
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-TXE7KCVI.js";
import {
  __toESM
} from "./chunk-FL3IE4PG.js";

// node_modules/@thirdweb-dev/sdk/dist/setErc20Allowance-a867cbf2.browser.esm.js
var import_dist = __toESM(require_dist());
var import_dist2 = __toESM(require_dist2());
var import_dist3 = __toESM(require_dist3());
var PropertiesInput = (() => z.object({}).catchall(z.union([BigNumberTransformSchema$1, z.unknown()])))();
var OptionalPropertiesInput = (() => z.union([z.array(PropertiesInput), PropertiesInput]).optional().nullable())();
var BasicNFTInput = (() => z.object({
  name: z.union([z.string(), z.number()]).optional().nullable(),
  description: z.string().nullable().optional().nullable(),
  image: FileOrBufferOrStringSchema.nullable().optional(),
  animation_url: FileOrBufferOrStringSchema.optional().nullable()
}))();
var CommonNFTInput = (() => BasicNFTInput.extend({
  external_url: FileOrBufferOrStringSchema.nullable().optional(),
  background_color: HexColor.optional().nullable(),
  properties: OptionalPropertiesInput,
  attributes: OptionalPropertiesInput
}).catchall(z.union([BigNumberTransformSchema$1, z.unknown()])))();
var NFTInputOrUriSchema = (() => z.union([CommonNFTInput, z.string()]))();
var CommonNFTOutput = (() => CommonNFTInput.extend({
  id: z.string(),
  uri: z.string(),
  image: z.string().nullable().optional(),
  external_url: z.string().nullable().optional(),
  animation_url: z.string().nullable().optional()
}))();
async function setErc20Allowance(contractToApprove, value, currencyAddress, overrides) {
  if (isNativeToken(currencyAddress)) {
    overrides["value"] = value;
  } else {
    const ERC20Abi = (await import("./IERC20-7BQ5OUYQ.js")).default;
    const signer = contractToApprove.getSigner();
    const provider = contractToApprove.getProvider();
    const erc20 = new ContractWrapper(signer || provider, currencyAddress, ERC20Abi, contractToApprove.options, contractToApprove.storage);
    const owner = await contractToApprove.getSignerAddress();
    const spender = contractToApprove.address;
    const allowance = await erc20.read("allowance", [owner, spender]);
    if (allowance.lt(value)) {
      await erc20.sendTransaction("approve", [spender, value]);
    }
    return overrides;
  }
}

// node_modules/@thirdweb-dev/sdk/dist/normalizePriceValue-fb1d482a.browser.esm.js
var import_dist4 = __toESM(require_dist());
var import_dist5 = __toESM(require_dist2());
var import_dist6 = __toESM(require_dist3());
init_lib();
async function normalizePriceValue(provider, inputPrice, currencyAddress) {
  const metadata = await fetchCurrencyMetadata(provider, currencyAddress);
  return utils_exports.parseUnits(AmountSchema.parse(inputPrice), metadata.decimals);
}

export {
  BasicNFTInput,
  CommonNFTInput,
  NFTInputOrUriSchema,
  CommonNFTOutput,
  setErc20Allowance,
  normalizePriceValue
};
//# sourceMappingURL=chunk-SUNQK6BR.js.map
