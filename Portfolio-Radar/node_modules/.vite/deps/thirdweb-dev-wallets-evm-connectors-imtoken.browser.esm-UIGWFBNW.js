import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'

globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
globalThis.global = globalThis.global || __global_polyfill
globalThis.process = globalThis.process || __process_polyfill

import {
  InjectedConnector
} from "./chunk-ZEURXHMZ.js";
import {
  assertWindowEthereum
} from "./chunk-4MPUUMTM.js";
import "./chunk-QDOERRBY.js";
import "./chunk-I3DP2MPF.js";
import "./chunk-BCO5OQ62.js";
import "./chunk-RCCBID5F.js";
import "./chunk-N3O7XCWY.js";
import "./chunk-JO5JQBLK.js";
import "./chunk-CQNLDQCU.js";
import {
  init_lib6 as init_lib
} from "./chunk-VKHIDRSF.js";
import "./chunk-PI5QRFQD.js";
import "./chunk-JMTLALVE.js";
import "./chunk-26QOIHDW.js";
import "./chunk-4H2UHIB4.js";
import "./chunk-A2JC7MJV.js";
import "./chunk-ZE5LSKC5.js";
import "./chunk-VTZKSTEZ.js";
import "./chunk-GQ4K6W75.js";
import {
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-TXE7KCVI.js";
import {
  __toESM
} from "./chunk-FL3IE4PG.js";

// node_modules/@thirdweb-dev/wallets/evm/connectors/imtoken/dist/thirdweb-dev-wallets-evm-connectors-imtoken.browser.esm.js
var import_dist = __toESM(require_dist());
var import_dist2 = __toESM(require_dist2());
var import_dist3 = __toESM(require_dist3());
init_lib();
var ImTokenConnector = class extends InjectedConnector {
  constructor(arg) {
    const defaultOptions = {
      name: "imToken",
      getProvider() {
        var _a;
        function getReady(ethereum) {
          const isToken = !!(ethereum == null ? void 0 : ethereum.isToken);
          if (!isToken) {
            return;
          }
          return ethereum;
        }
        if (assertWindowEthereum(globalThis.window)) {
          if ((_a = globalThis.window.ethereum) == null ? void 0 : _a.providers) {
            return globalThis.window.ethereum.providers.find(getReady);
          }
          return getReady(globalThis.window.ethereum);
        }
      }
    };
    const options = {
      ...defaultOptions,
      ...arg.options
    };
    super({
      chains: arg.chains,
      options,
      connectorStorage: arg.connectorStorage
    });
  }
};
export {
  ImTokenConnector
};
//# sourceMappingURL=thirdweb-dev-wallets-evm-connectors-imtoken.browser.esm-UIGWFBNW.js.map
