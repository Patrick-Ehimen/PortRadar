import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'

globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
globalThis.global = globalThis.global || __global_polyfill
globalThis.process = globalThis.process || __process_polyfill

import {
  getAddress,
  hexlify,
  init_lib2 as init_lib,
  init_lib6 as init_lib2,
  isAddress,
  joinSignature,
  splitSignature
} from "./chunk-ZE5LSKC5.js";
import {
  AxiosError,
  axios_default
} from "./chunk-AG4X3SLA.js";
import {
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-TXE7KCVI.js";
import {
  __toESM
} from "./chunk-FL3IE4PG.js";

// node_modules/@moralisweb3/common-evm-utils/lib/esm/index.js
var import_dist4 = __toESM(require_dist());
var import_dist5 = __toESM(require_dist2());
var import_dist6 = __toESM(require_dist3());

// node_modules/@moralisweb3/common-core/lib/esm/index.js
var import_dist = __toESM(require_dist());
var import_dist2 = __toESM(require_dist2());
var import_dist3 = __toESM(require_dist3());
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign3(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
var ModuleType;
(function(ModuleType2) {
  ModuleType2["API"] = "api";
  ModuleType2["DEFAULT"] = "default";
})(ModuleType || (ModuleType = {}));
var isApiModule = function(moralisClass) {
  if (moralisClass.type === ModuleType.API) {
    return true;
  }
  return false;
};
var CoreErrorCode;
(function(CoreErrorCode2) {
  CoreErrorCode2["GENERIC_CORE_ERROR"] = "C0001";
  CoreErrorCode2["DUPLICATE_MODULE"] = "C0002";
  CoreErrorCode2["MODULE_NOT_FOUND"] = "C0003";
  CoreErrorCode2["VALIDATION_ERROR"] = "C0004";
  CoreErrorCode2["INVALID_ARGUMENT"] = "C0005";
  CoreErrorCode2["REQUEST_ERROR"] = "C0006";
  CoreErrorCode2["NO_DATA_FOUND"] = "C0007";
  CoreErrorCode2["NOT_INITIALIZED"] = "C0008";
  CoreErrorCode2["ALREADY_INITIALIZED"] = "C0009";
  CoreErrorCode2["METHOD_FAILED"] = "C0010";
  CoreErrorCode2["STATE_MACHINE_STARTED"] = "C0011";
  CoreErrorCode2["STATE_MACHINE_NOT_STARTED"] = "C0012";
  CoreErrorCode2["CONFIG_KEY_NOT_EXIST"] = "C0013";
  CoreErrorCode2["CONFIG_INVALID_VALUE"] = "C0014";
  CoreErrorCode2["CONFIG_KEY_ALREADY_EXIST"] = "C0015";
  CoreErrorCode2["INVALID_DATA"] = "C0016";
  CoreErrorCode2["BIG_NUMBER_ERROR"] = "C0500";
  CoreErrorCode2["NOT_IMPLEMENTED"] = "C9000";
})(CoreErrorCode || (CoreErrorCode = {}));
var ApiErrorCode;
(function(ApiErrorCode2) {
  ApiErrorCode2["GENERIC_API_ERROR"] = "A0001";
  ApiErrorCode2["PAGE_LIMIT_EXCEEDED"] = "A0002";
  ApiErrorCode2["API_KEY_NOT_SET"] = "A0003";
  ApiErrorCode2["INVALID_PARAMS"] = "A0004";
  ApiErrorCode2["NOT_FOUND"] = "A0404";
  ApiErrorCode2["NOT_IMPLEMENTED"] = "A9000";
})(ApiErrorCode || (ApiErrorCode = {}));
var AuthErrorCode;
(function(AuthErrorCode2) {
  AuthErrorCode2["GENERIC_AUTH_ERROR"] = "U0001";
  AuthErrorCode2["INCORRECT_NETWORK"] = "U0002";
  AuthErrorCode2["INCORRECT_PARAMETER"] = "U0003";
  AuthErrorCode2["NOT_IMPLEMENTED"] = "U9000";
})(AuthErrorCode || (AuthErrorCode = {}));
var StreamErrorCode;
(function(StreamErrorCode2) {
  StreamErrorCode2["GENERIC_STREAM_ERROR"] = "S0001";
  StreamErrorCode2["INCORRECT_NETWORK"] = "S0002";
  StreamErrorCode2["INCORRECT_PARAMETER"] = "S0003";
  StreamErrorCode2["INVALID_SIGNATURE"] = "S0004";
  StreamErrorCode2["NOT_IMPLEMENTED"] = "S9000";
})(StreamErrorCode || (StreamErrorCode = {}));
var MoralisError = (
  /** @class */
  function(_super) {
    __extends(MoralisError2, _super);
    function MoralisError2(_a) {
      var message = _a.message, code = _a.code, details = _a.details, cause = _a.cause;
      var _this = (
        // @ts-ignore Typescript does not recognise 'cause' ? OR we have wrong TS version
        _super.call(this, MoralisError2.makeMessage(message, code), { cause }) || this
      );
      _this.name = "Moralis SDK Error";
      _this.isMoralisError = true;
      Object.setPrototypeOf(_this, MoralisError2.prototype);
      _this.code = code;
      _this.details = details;
      if (cause) {
        _this.cause = cause;
        if ("stack" in cause) {
          _this.stack = "".concat(_this.stack, "\nCAUSE: ").concat(cause.stack);
        }
      }
      if (Error.captureStackTrace) {
        Error.captureStackTrace(_this, MoralisError2);
      }
      return _this;
    }
    MoralisError2.makeMessage = function(message, code) {
      return "[".concat(code, "] ").concat(message);
    };
    return MoralisError2;
  }(Error)
);
var CoreError = (
  /** @class */
  function(_super) {
    __extends(CoreError2, _super);
    function CoreError2(options) {
      var _this = _super.call(this, options) || this;
      _this.name = "Moralis SDK Core Error";
      if (Error.captureStackTrace) {
        Error.captureStackTrace(_this, CoreError2);
      }
      return _this;
    }
    return CoreError2;
  }(MoralisError)
);
var MoralisApiError = (
  /** @class */
  function(_super) {
    __extends(MoralisApiError2, _super);
    function MoralisApiError2(options) {
      var _this = _super.call(this, options) || this;
      _this.name = "Moralis SDK API Error";
      if (Error.captureStackTrace) {
        Error.captureStackTrace(_this, MoralisApiError2);
      }
      return _this;
    }
    return MoralisApiError2;
  }(MoralisError)
);
var MoralisAuthError = (
  /** @class */
  function(_super) {
    __extends(MoralisAuthError2, _super);
    function MoralisAuthError2(options) {
      var _this = _super.call(this, options) || this;
      _this.name = "Moralis Auth Error";
      if (Error.captureStackTrace) {
        Error.captureStackTrace(_this, MoralisAuthError2);
      }
      return _this;
    }
    return MoralisAuthError2;
  }(MoralisError)
);
var MoralisStreamError = (
  /** @class */
  function(_super) {
    __extends(MoralisStreamError2, _super);
    function MoralisStreamError2(options) {
      var _this = _super.call(this, options) || this;
      _this.name = "Moralis Stream Error";
      if (Error.captureStackTrace) {
        Error.captureStackTrace(_this, MoralisStreamError2);
      }
      return _this;
    }
    return MoralisStreamError2;
  }(MoralisError)
);
var isMoralisError = function(error) {
  if (!(error instanceof Error)) {
    return false;
  }
  if (!error.isMoralisError) {
    return false;
  }
  return true;
};
var Modules = (
  /** @class */
  function() {
    function Modules2() {
      this.modules = /* @__PURE__ */ new Map();
    }
    Modules2.prototype.register = function(module) {
      if (this.modules.has(module.name)) {
        throw new CoreError({
          code: CoreErrorCode.DUPLICATE_MODULE,
          message: 'The module "'.concat(module.name, '" has already been registered.')
        });
      }
      this.modules.set(module.name, module);
      module.setup();
    };
    Modules2.prototype.get = function(name) {
      var module = this.modules.get(name);
      if (!module) {
        throw new CoreError({ code: CoreErrorCode.MODULE_NOT_FOUND, message: 'Module "'.concat(name, '" does not exist.') });
      }
      return module;
    };
    Modules2.prototype.tryGet = function(name) {
      return this.modules.get(name) || null;
    };
    Modules2.prototype.has = function(name) {
      return this.modules.has(name);
    };
    Modules2.prototype.getApi = function(name) {
      var module = this.modules.get(name);
      if (!module || !isApiModule(module)) {
        throw new CoreError({
          code: CoreErrorCode.MODULE_NOT_FOUND,
          message: 'No ApiModule found with the name "'.concat(name, '"')
        });
      }
      return module;
    };
    Modules2.prototype.remove = function(name) {
      var isRemoved = this.modules.delete(name);
      if (!isRemoved) {
        throw new CoreError({ code: CoreErrorCode.MODULE_NOT_FOUND, message: 'Module "'.concat(name, '" does not exist.') });
      }
    };
    Modules2.prototype.list = function() {
      return Array.from(this.modules.values());
    };
    Modules2.prototype.listNames = function() {
      return this.list().map(function(module) {
        return module.name;
      });
    };
    Modules2.prototype.listApis = function() {
      return this.list().filter(isApiModule);
    };
    return Modules2;
  }()
);
var CoreConfig = {
  logLevel: {
    name: "logLevel",
    defaultValue: "info"
  },
  buidEnvironment: {
    name: "buidEnvironment",
    defaultValue: "browser"
  },
  defaultNetwork: {
    name: "defaultNetwork",
    defaultValue: "Evm"
  },
  product: {
    name: "product",
    defaultValue: void 0
  },
  /**
   * @description Maximal number of request retries.
   */
  maxRetries: {
    name: "maxRetries",
    defaultValue: 2
  }
};
var logLevelMap = {
  verbose: 5,
  debug: 4,
  info: 3,
  warning: 2,
  error: 1,
  off: 0
};
var LoggerController = (
  /** @class */
  function() {
    function LoggerController2(moduleName, config) {
      this.moduleName = moduleName;
      this.config = config;
    }
    LoggerController2.create = function(moduleName, core) {
      return new LoggerController2(moduleName, core.config);
    };
    Object.defineProperty(LoggerController2.prototype, "level", {
      get: function() {
        return this.config.get(CoreConfig.logLevel);
      },
      enumerable: false,
      configurable: true
    });
    LoggerController2.prototype._transport = function(level, message, details) {
      var logMessage = this._makeLogMessage(message);
      var args = [logMessage, details].filter(function(arg) {
        return arg != null;
      });
      switch (level) {
        case "error":
          console.error.apply(console, args);
          break;
        case "warn":
          console.warn.apply(console, args);
          break;
        case "log":
          console.log.apply(console, args);
          break;
      }
    };
    LoggerController2.prototype._shouldLog = function(logLevel) {
      var level = logLevelMap[logLevel];
      var acceptedLevel = logLevelMap[this.level];
      if (level > acceptedLevel) {
        return false;
      }
      return true;
    };
    LoggerController2.prototype._makeLogMessage = function(message) {
      return "Moralis[".concat(this.moduleName, "]: ").concat(message);
    };
    LoggerController2.prototype.error = function(error, details) {
      if (!this._shouldLog("error")) {
        return;
      }
      var message = "";
      if (typeof error === "string") {
        message = error;
      } else if (isMoralisError(error)) {
        message = error.message;
        if (error.details) {
          if (details) {
            details._errorDetails = error.details;
          } else {
            details = {
              _errorDetails: error.details
            };
          }
        }
      } else {
        message = error.message;
      }
      this._transport("error", message, details);
    };
    LoggerController2.prototype.warn = function(message, details) {
      if (!this._shouldLog("warning")) {
        return;
      }
      this._transport("warn", message, details);
    };
    LoggerController2.prototype.info = function(message, details) {
      if (!this._shouldLog("info")) {
        return;
      }
      this._transport("log", message, details);
    };
    LoggerController2.prototype.debug = function(message, details) {
      if (!this._shouldLog("debug")) {
        return;
      }
      this._transport("log", message, details);
    };
    LoggerController2.prototype.verbose = function(message, details) {
      if (!this._shouldLog("verbose")) {
        return;
      }
      this._transport("log", message, details);
    };
    return LoggerController2;
  }()
);
var Config = (
  /** @class */
  function() {
    function Config2() {
      this.items = /* @__PURE__ */ new Map();
    }
    Config2.prototype.registerKey = function(key, validator) {
      if (this.items.has(key.name)) {
        throw new CoreError({
          code: CoreErrorCode.CONFIG_KEY_ALREADY_EXIST,
          message: 'Key "'.concat(key.name, '" is already registered')
        });
      }
      this.items.set(key.name, { key, value: key.defaultValue, validator });
    };
    Config2.prototype.getKeys = function() {
      return Array.from(this.items.keys());
    };
    Config2.prototype.hasKey = function(key) {
      return this.items.has(key.name);
    };
    Config2.prototype.get = function(keyOrName) {
      return this.getItem(keyOrName).value;
    };
    Config2.prototype.set = function(keyOrName, value) {
      var item = this.getItem(keyOrName);
      var error = item.validator ? item.validator(value) : null;
      if (error) {
        throw new CoreError({
          code: CoreErrorCode.CONFIG_INVALID_VALUE,
          message: 'Cannot set this config. Invalid value for "'.concat(item.key.name, '". ').concat(error)
        });
      }
      item.value = value;
    };
    Config2.prototype.merge = function(values) {
      var _this = this;
      Object.keys(values).forEach(function(keyName) {
        _this.set(keyName, values[keyName]);
      });
    };
    Config2.prototype.reset = function() {
      this.items.forEach(function(item) {
        item.value = item.key.defaultValue;
      });
    };
    Config2.prototype.getItem = function(keyOrName) {
      var keyName = typeof keyOrName === "string" ? keyOrName : keyOrName.name;
      var item = this.items.get(keyName);
      if (!item) {
        throw new CoreError({
          code: CoreErrorCode.CONFIG_KEY_NOT_EXIST,
          message: 'Key "'.concat(keyName, '" is unregistered. Have you registered all required modules?')
        });
      }
      return item;
    };
    return Config2;
  }()
);
var CoreConfigSetup = (
  /** @class */
  function() {
    function CoreConfigSetup2() {
    }
    CoreConfigSetup2.register = function(config) {
      config.registerKey(CoreConfig.logLevel);
      config.registerKey(CoreConfig.buidEnvironment);
      config.registerKey(CoreConfig.defaultNetwork);
      config.registerKey(CoreConfig.product);
      config.registerKey(CoreConfig.maxRetries);
    };
    return CoreConfigSetup2;
  }()
);
var LIB_VERSION = "2.25.4";
var MoralisData = (
  /** @class */
  /* @__PURE__ */ function() {
    function MoralisData2() {
    }
    return MoralisData2;
  }()
);
var MoralisDataObject = (
  /** @class */
  function(_super) {
    __extends(MoralisDataObject2, _super);
    function MoralisDataObject2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return MoralisDataObject2;
  }(MoralisData)
);
var BigNumberFormatter = (
  /** @class */
  function() {
    function BigNumberFormatter2() {
    }
    BigNumberFormatter2.toDecimal = function(value, decimals) {
      if (decimals < 0) {
        throw new CoreError({
          code: CoreErrorCode.BIG_NUMBER_ERROR,
          message: "Invalid decimals"
        });
      }
      var result = value.toString();
      if (decimals === 0) {
        return result;
      }
      var isNegative = result.startsWith("-");
      if (isNegative) {
        result = result.substring(1);
      }
      result = result.padStart(decimals, "0");
      var dot = result.length - decimals;
      var whole = dot === 0 ? "0" : result.substring(0, dot);
      var fraction = result.substring(dot);
      result = "".concat(whole, ".").concat(fraction);
      while (result[result.length - 1] === "0" && result[result.length - 2] !== ".") {
        result = result.substring(0, result.length - 1);
      }
      if (isNegative) {
        result = "-".concat(result);
      }
      return result;
    };
    BigNumberFormatter2.toHex = function(value) {
      var result = value.toString(16);
      var isNegative = result.startsWith("-");
      if (isNegative) {
        result = result.substring(1);
      }
      if (result.length % 2 !== 0) {
        result = "0".concat(result);
      }
      result = "0x".concat(result);
      if (isNegative) {
        result = "-".concat(result);
      }
      return result;
    };
    return BigNumberFormatter2;
  }()
);
var BigNumberParser = (
  /** @class */
  function() {
    function BigNumberParser2() {
    }
    BigNumberParser2.parseInt = function(value) {
      assertNotEmpty(value);
      if (typeof value === "string") {
        if (value.length === 0) {
          throw createError("Value is empty");
        }
        var isNegativeHex = value.startsWith("-0x");
        if (isNegativeHex) {
          value = value.substring(1);
        }
        var result = BigInt(value);
        if (isNegativeHex) {
          result *= BigInt(-1);
        }
        return result;
      }
      return BigInt(value);
    };
    BigNumberParser2.parseDecimal = function(value, decimals) {
      assertNotEmpty(value);
      var multiplier = getMultiplier(decimals);
      if (typeof value === "number") {
        return BigInt(value) * multiplier;
      }
      if (typeof value === "bigint") {
        return value * multiplier;
      }
      var isNegative = value.startsWith("-");
      if (isNegative) {
        value = value.substring(1);
      }
      var fragments = value.split(".");
      if (fragments.length > 2) {
        throw createError("Value has more than one dot");
      }
      if (fragments.some(function(fragment) {
        return !fragment;
      })) {
        throw createError("Value has empty fragments");
      }
      var result;
      if (fragments.length === 1) {
        result = BigInt(fragments[0]) * multiplier;
      } else {
        var whole = fragments[0];
        var fraction = fragments[1];
        if (fraction.length > decimals) {
          throw createError("Value has too long fractional part: ".concat(fraction.length, ", max: ").concat(decimals));
        }
        if (fraction.length < decimals) {
          fraction = fraction.padEnd(decimals, "0");
        }
        result = BigInt(whole) * multiplier + BigInt(fraction);
      }
      if (isNegative) {
        result *= BigInt(-1);
      }
      return result;
    };
    return BigNumberParser2;
  }()
);
function assertNotEmpty(value) {
  if (value === null) {
    throw createError("Value is null");
  }
  if (value === void 0) {
    throw createError("Value is undefined");
  }
}
function getMultiplier(decimals) {
  if (decimals < 0) {
    throw createError("Invalid decimals");
  }
  var ten = BigInt(10);
  var multiplier = BigInt(1);
  while (decimals-- > 0) {
    multiplier *= ten;
  }
  return multiplier;
}
function createError(message) {
  return new CoreError({
    code: CoreErrorCode.BIG_NUMBER_ERROR,
    message
  });
}
var BigNumber = (
  /** @class */
  function() {
    function BigNumber2(value) {
      this.value = value;
    }
    BigNumber2.create = function(value) {
      if (value instanceof BigNumber2) {
        return value;
      }
      return new BigNumber2(BigNumberParser.parseInt(value));
    };
    BigNumber2.fromJSON = function(json) {
      return BigNumber2.create(json);
    };
    BigNumber2.fromDecimal = function(value, decimals) {
      if (decimals === void 0) {
        decimals = 0;
      }
      return new BigNumber2(BigNumberParser.parseDecimal(value, decimals));
    };
    BigNumber2.prototype.toBigInt = function() {
      return this.value;
    };
    BigNumber2.prototype.add = function(value) {
      return new BigNumber2(this.value + asBigInt(value));
    };
    BigNumber2.prototype.sub = function(value) {
      return new BigNumber2(this.value - asBigInt(value));
    };
    BigNumber2.prototype.mul = function(value) {
      return new BigNumber2(this.value * asBigInt(value));
    };
    BigNumber2.prototype.div = function(value) {
      return new BigNumber2(this.value / asBigInt(value));
    };
    BigNumber2.prototype.equals = function(value) {
      return this.value === value.toBigInt();
    };
    BigNumber2.prototype.toDecimal = function(decimals) {
      return BigNumberFormatter.toDecimal(this.value, decimals);
    };
    BigNumber2.prototype.toString = function() {
      return this.value.toString();
    };
    BigNumber2.prototype.toHex = function() {
      return BigNumberFormatter.toHex(this.value);
    };
    BigNumber2.prototype.toJSON = function() {
      return this.toHex();
    };
    return BigNumber2;
  }()
);
function asBigInt(value) {
  return BigNumber.create(value).toBigInt();
}
var dateInputToDate = function(value) {
  return typeof value === "string" ? new Date(value) : value;
};
var Core = (
  /** @class */
  function() {
    function Core2(modules, config, logger) {
      var _this = this;
      this.modules = modules;
      this.config = config;
      this.logger = logger;
      this.name = Core2.moduleName;
      this._isStarted = false;
      this.registerModules = function(modules2) {
        modules2.forEach(_this.registerModule);
      };
      this.registerModule = function(module) {
        if ("create" in module) {
          module = module.create(_this);
        }
        _this.modules.register(module);
        _this.logger.verbose("Module registered", { module: module.name });
      };
      this.getModule = function(name) {
        return _this.modules.get(name);
      };
      this.start = function(providedConfig) {
        return __awaiter(_this, void 0, void 0, function() {
          var allModules;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                if (this._isStarted) {
                  throw new MoralisError({
                    message: "Modules are started already. This method should be called only one time.",
                    code: CoreErrorCode.ALREADY_INITIALIZED
                  });
                }
                this._isStarted = true;
                allModules = this.modules.list();
                if (providedConfig) {
                  this.config.merge(providedConfig);
                }
                this.logger.verbose("Starting all registered modules", {
                  moduleNames: this.modules.listNames()
                });
                return [4, Promise.all(allModules.map(function(module) {
                  return module.start();
                }))];
              case 1:
                _a.sent();
                this.logger.verbose("Finished starting all registered modules", {
                  moduleNames: this.modules.listNames()
                });
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
    }
    Core2.create = function() {
      var modules = new Modules();
      var config = new Config();
      var logger = new LoggerController(Core2.moduleName, config);
      var core = new Core2(modules, config, logger);
      CoreConfigSetup.register(config);
      return core;
    };
    Object.defineProperty(Core2.prototype, "isStarted", {
      get: function() {
        return this._isStarted;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Core2.prototype, "BigNumber", {
      get: function() {
        return BigNumber;
      },
      enumerable: false,
      configurable: true
    });
    Core2.moduleName = "core";
    Core2.libVersion = LIB_VERSION;
    return Core2;
  }()
);
var CoreProvider = (
  /** @class */
  function() {
    function CoreProvider2() {
    }
    CoreProvider2.getDefault = function() {
      if (!this.core) {
        throw new CoreError({
          code: CoreErrorCode.NOT_INITIALIZED,
          message: "Default instance of Core is not set"
        });
      }
      return this.core;
    };
    CoreProvider2.setDefault = function(core) {
      if (this.core) {
        throw new CoreError({
          code: CoreErrorCode.ALREADY_INITIALIZED,
          message: "Default instance of Core is already set"
        });
      }
      this.core = core;
    };
    return CoreProvider2;
  }()
);
var Module = (
  /** @class */
  function() {
    function Module2(name, core, type) {
      if (type === void 0) {
        type = ModuleType.DEFAULT;
      }
      this.name = name;
      this.core = core;
      this.type = type;
      this.logger = LoggerController.create(this.name, this.core);
    }
    Module2.prototype.cleanUp = function() {
      this.core.modules.remove(this.name);
    };
    return Module2;
  }()
);
var ApiModule = (
  /** @class */
  function(_super) {
    __extends(ApiModule2, _super);
    function ApiModule2(name, core, baseUrlProvider) {
      var _this = _super.call(this, name, core, ModuleType.API) || this;
      _this.baseUrlProvider = baseUrlProvider;
      return _this;
    }
    Object.defineProperty(ApiModule2.prototype, "baseUrl", {
      /**
       * @description The base URL of the API.
       */
      get: function() {
        if (!this._baseUrl) {
          this._baseUrl = this.baseUrlProvider();
        }
        return this._baseUrl;
      },
      enumerable: false,
      configurable: true
    });
    return ApiModule2;
  }(Module)
);
var UnreachableError = new CoreError({
  code: CoreErrorCode.GENERIC_CORE_ERROR,
  message: "Incorrect type provided, code should not reach here"
});
var AxiosRetry = (
  /** @class */
  function() {
    function AxiosRetry2() {
    }
    AxiosRetry2.request = function(retryConfig, requestConfig) {
      var _a;
      return __awaiter(this, void 0, void 0, function() {
        var attempt, response, e_1, axiosError;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              attempt = 1;
              _b.label = 1;
            case 1:
              _b.trys.push([1, 3, , 4]);
              return [4, axios_default.request(requestConfig)];
            case 2:
              response = _b.sent();
              return [2, response];
            case 3:
              e_1 = _b.sent();
              if (attempt >= retryConfig.maxRetries) {
                throw e_1;
              }
              if (!requestConfig.method || !retryConfig.allowedMethods.includes(requestConfig.method.toUpperCase())) {
                throw e_1;
              }
              if (!axios_default.isAxiosError(e_1)) {
                throw e_1;
              }
              axiosError = e_1;
              if (!((_a = axiosError.response) === null || _a === void 0 ? void 0 : _a.status) || !retryConfig.allowedResponseStatuses.includes(axiosError.response.status)) {
                throw e_1;
              }
              if (retryConfig.beforeRetry) {
                retryConfig.beforeRetry(attempt, axiosError);
              }
              return [3, 4];
            case 4:
              attempt++;
              return [3, 1];
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    return AxiosRetry2;
  }()
);
var isApiRequestError = function(error) {
  if (!(error instanceof AxiosError)) {
    return false;
  }
  if (error.code !== AxiosError.ERR_BAD_REQUEST && error.code !== AxiosError.ERR_BAD_RESPONSE) {
    return false;
  }
  return true;
};
var getMessageFromApiRequestError = function(error) {
  var _a = error.response.data, message = _a.message, details = _a.details;
  var result = "Unknown error (no error info returned from API)";
  if (Array.isArray(message)) {
    result = message.join(", ");
  } else if (typeof message === "string") {
    result = message;
  }
  if (details) {
    result += " ".concat(JSON.stringify(details));
  }
  return result;
};
var RequestController = (
  /** @class */
  function() {
    function RequestController2(config, logger) {
      this.config = config;
      this.logger = logger;
    }
    RequestController2.create = function(core) {
      return new RequestController2(core.config, core.logger);
    };
    RequestController2.prototype.request = function(config) {
      return __awaiter(this, void 0, void 0, function() {
        var maxRetries, retryConfig, response, e_1, error;
        var _this = this;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              this.logger.verbose("[RequestController] request started", {
                url: config.url,
                method: config.method,
                body: config.data
              });
              maxRetries = this.config.get(CoreConfig.maxRetries);
              retryConfig = {
                maxRetries,
                allowedMethods: ["GET", "OPTIONS"],
                allowedResponseStatuses: [408, 413, 429, 500, 502, 503, 504],
                beforeRetry: function(attempt, error2) {
                  _this.logger.verbose("[RequestController] request retry", {
                    url: config.url,
                    method: config.method,
                    body: config.data,
                    error: error2,
                    attempt
                  });
                }
              };
              _a.label = 1;
            case 1:
              _a.trys.push([1, 3, , 4]);
              return [4, AxiosRetry.request(retryConfig, __assign(__assign({}, config), { timeout: 2e4, maxContentLength: Infinity, maxBodyLength: Infinity }))];
            case 2:
              response = _a.sent();
              return [2, response.data];
            case 3:
              e_1 = _a.sent();
              error = this.makeError(e_1);
              this.logger.verbose("[RequestController] request error", {
                url: config.url,
                method: config.method,
                body: config.data,
                cause: error.cause,
                name: error.name,
                details: error.details
              });
              throw error;
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    RequestController2.prototype.makeError = function(error) {
      if (isApiRequestError(error)) {
        var _a = error.response, status_1 = _a.status, statusText = _a.statusText;
        var apiMessage = getMessageFromApiRequestError(error);
        return new CoreError({
          code: CoreErrorCode.REQUEST_ERROR,
          message: "Request failed, ".concat(statusText, "(").concat(status_1, "): ").concat(apiMessage),
          cause: error,
          details: {
            status: status_1,
            response: error.response
          }
        });
      }
      var err = error instanceof Error ? error : new Error("".concat(error));
      return new CoreError({
        code: CoreErrorCode.REQUEST_ERROR,
        message: "Request failed: ".concat(err.message),
        cause: err
      });
    };
    RequestController2.prototype.post = function(url, searchParams, body, options, abortSignal) {
      return this.request({
        url,
        params: searchParams,
        method: "POST",
        data: body,
        headers: options === null || options === void 0 ? void 0 : options.headers,
        signal: abortSignal
      });
    };
    RequestController2.prototype.put = function(url, searchParams, body, options, abortSignal) {
      return this.request({
        url,
        params: searchParams,
        method: "PUT",
        data: body,
        headers: options === null || options === void 0 ? void 0 : options.headers,
        signal: abortSignal
      });
    };
    RequestController2.prototype.get = function(url, searchParams, options, abortSignal) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.request({
            url,
            params: searchParams,
            method: "GET",
            headers: options === null || options === void 0 ? void 0 : options.headers,
            signal: abortSignal
          })];
        });
      });
    };
    RequestController2.prototype.delete = function(url, searchParams, body, options, abortSignal) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.request({
            url,
            params: searchParams,
            method: "DELETE",
            data: body,
            headers: options === null || options === void 0 ? void 0 : options.headers,
            signal: abortSignal
          })];
        });
      });
    };
    return RequestController2;
  }()
);
var OperationRequestValidator = (
  /** @class */
  function() {
    function OperationRequestValidator2(operation) {
      this.allParamNames = __spreadArray(__spreadArray(__spreadArray([], operation.urlPathParamNames || [], true), operation.urlSearchParamNames || [], true), operation.bodyParamNames || [], true);
    }
    OperationRequestValidator2.prototype.validate = function(request) {
      var requestParamNames = Object.keys(request);
      for (var _i = 0, requestParamNames_1 = requestParamNames; _i < requestParamNames_1.length; _i++) {
        var paramName = requestParamNames_1[_i];
        if (!this.allParamNames.includes(paramName)) {
          var allParamsNames = this.allParamNames.join(", ");
          throw new MoralisError({
            code: CoreErrorCode.INVALID_ARGUMENT,
            message: "Request contains unknown parameter: ".concat(paramName, ". This operation supports the following parameters: ").concat(allParamsNames)
          });
        }
      }
    };
    return OperationRequestValidator2;
  }()
);
var OperationType;
(function(OperationType2) {
  OperationType2["NON_NULLABLE"] = "nonNullable";
  OperationType2["NULLABLE"] = "nullable";
  OperationType2["PAGINATED"] = "paginated";
})(OperationType || (OperationType = {}));
var NextPaginatedRequestResolver = (
  /** @class */
  function() {
    function NextPaginatedRequestResolver2() {
    }
    NextPaginatedRequestResolver2.resolve = function(firstPageIndex, request, pagination) {
      if (pagination.cursor) {
        return __assign(__assign({}, request), { cursor: pagination.cursor });
      }
      if (typeof pagination.total === "number") {
        var currentPage = firstPageIndex === 1 ? pagination.page : pagination.page + 1;
        var hasNextPage = pagination.total > pagination.pageSize * currentPage;
        if (hasNextPage) {
          var offset = (pagination.page + 1) * (request.limit || 500);
          return __assign(__assign({}, request), { offset });
        }
      }
      return null;
    };
    return NextPaginatedRequestResolver2;
  }()
);
var PaginationReader = (
  /** @class */
  function() {
    function PaginationReader2() {
    }
    PaginationReader2.read = function(jsonResponse) {
      var _a, _b;
      return {
        page: (_a = jsonResponse.page) !== null && _a !== void 0 ? _a : 0,
        pageSize: (_b = jsonResponse.page_size) !== null && _b !== void 0 ? _b : 0,
        total: jsonResponse.total,
        cursor: jsonResponse.cursor
      };
    };
    return PaginationReader2;
  }()
);
var ResponseAdapter = (
  /** @class */
  function() {
    function ResponseAdapter2(jsonResponse, getResponse) {
      this.jsonResponse = jsonResponse;
      this.getResponse = getResponse;
    }
    Object.defineProperty(ResponseAdapter2.prototype, "result", {
      get: function() {
        return this.getResponse();
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ResponseAdapter2.prototype, "raw", {
      get: function() {
        return this.jsonResponse;
      },
      enumerable: false,
      configurable: true
    });
    ResponseAdapter2.prototype.toJSON = function() {
      return this.jsonResponse;
    };
    return ResponseAdapter2;
  }()
);
var PaginatedResponseAdapter = (
  /** @class */
  function() {
    function PaginatedResponseAdapter2(pagination, jsonResponse, getResult, nextHandler) {
      var _this = this;
      this.pagination = pagination;
      this.jsonResponse = jsonResponse;
      this.getResult = getResult;
      this.nextHandler = nextHandler;
      this.hasNext = function() {
        return !!_this.nextHandler;
      };
      this.next = function() {
        if (!_this.nextHandler) {
          throw new MoralisError({
            code: CoreErrorCode.NO_DATA_FOUND,
            message: "Page limit exceeded! Before call this method check an existence of the next page by .hasNext() method."
          });
        }
        return _this.nextHandler();
      };
    }
    Object.defineProperty(PaginatedResponseAdapter2.prototype, "result", {
      get: function() {
        return this.getResult();
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(PaginatedResponseAdapter2.prototype, "raw", {
      get: function() {
        return this.jsonResponse;
      },
      enumerable: false,
      configurable: true
    });
    PaginatedResponseAdapter2.prototype.toJSON = function() {
      return this.jsonResponse;
    };
    return PaginatedResponseAdapter2;
  }()
);
var toCamel = function(value) {
  return value.replace(/([-_][a-z])/gi, function($1) {
    return $1.toUpperCase().replace("-", "").replace("_", "");
  });
};
var isObject = function(o) {
  return o === Object(o) && !Array.isArray(o) && typeof o !== "function";
};
var toCamelCase = function(data) {
  if (isObject(data)) {
    var n_1 = {};
    Object.keys(data).forEach(function(k) {
      n_1[toCamel(k)] = toCamelCase(data[k]);
    });
    return n_1;
  }
  if (Array.isArray(data)) {
    return data.map(function(i) {
      return toCamelCase(i);
    });
  }
  return data;
};
function maybe(value, transform) {
  if (value == null) {
    return void 0;
  }
  if (transform) {
    return transform(value);
  }
  return value;
}

// node_modules/@moralisweb3/common-evm-utils/lib/esm/index.js
init_lib2();
init_lib();
var EvmChainList = (
  /** @class */
  function() {
    function EvmChainList2() {
    }
    EvmChainList2.create = function(input) {
      return input;
    };
    EvmChainList2.fromJSON = function(json) {
      return json;
    };
    return EvmChainList2;
  }()
);
var EvmGetNFTTradesMarketplaceEnum = (
  /** @class */
  function() {
    function EvmGetNFTTradesMarketplaceEnum2() {
    }
    EvmGetNFTTradesMarketplaceEnum2.create = function(input) {
      return input;
    };
    EvmGetNFTTradesMarketplaceEnum2.fromJSON = function(json) {
      return json;
    };
    return EvmGetNFTTradesMarketplaceEnum2;
  }()
);
var EvmGetMultipleTokenPricesIncludeEnum = (
  /** @class */
  function() {
    function EvmGetMultipleTokenPricesIncludeEnum2() {
    }
    EvmGetMultipleTokenPricesIncludeEnum2.create = function(input) {
      return input;
    };
    EvmGetMultipleTokenPricesIncludeEnum2.fromJSON = function(json) {
      return json;
    };
    return EvmGetMultipleTokenPricesIncludeEnum2;
  }()
);
var EvmResolveAddressToDomainCurrencyEnum = (
  /** @class */
  function() {
    function EvmResolveAddressToDomainCurrencyEnum2() {
    }
    EvmResolveAddressToDomainCurrencyEnum2.create = function(input) {
      return input;
    };
    EvmResolveAddressToDomainCurrencyEnum2.fromJSON = function(json) {
      return json;
    };
    return EvmResolveAddressToDomainCurrencyEnum2;
  }()
);
var EvmContractsReviewItemReportTypeEnum = (
  /** @class */
  function() {
    function EvmContractsReviewItemReportTypeEnum2() {
    }
    EvmContractsReviewItemReportTypeEnum2.create = function(input) {
      return input;
    };
    EvmContractsReviewItemReportTypeEnum2.fromJSON = function(json) {
      return json;
    };
    return EvmContractsReviewItemReportTypeEnum2;
  }()
);
var EvmContractsReviewItemContractTypeEnum = (
  /** @class */
  function() {
    function EvmContractsReviewItemContractTypeEnum2() {
    }
    EvmContractsReviewItemContractTypeEnum2.create = function(input) {
      return input;
    };
    EvmContractsReviewItemContractTypeEnum2.fromJSON = function(json) {
      return json;
    };
    return EvmContractsReviewItemContractTypeEnum2;
  }()
);
var extendStatics2 = function(d, b) {
  extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics2(d, b);
};
function __extends2(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics2(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign2 = function() {
  __assign2 = Object.assign || function __assign3(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
function __spreadArray2(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
var EvmAddress = (
  /** @class */
  function() {
    function EvmAddress2(address) {
      this._value = EvmAddress2.parse(address);
    }
    Object.defineProperty(EvmAddress2, "ZERO_ADDRESS", {
      /**
       * @returns EvmAddress instance of the zero address: "0x0000000000000000000000000000000000000000"
       * @example `EvmAddress.ZERO_ADDRESS`
       */
      get: function() {
        return EvmAddress2.create("0x0000000000000000000000000000000000000000");
      },
      enumerable: false,
      configurable: true
    });
    EvmAddress2.create = function(address) {
      if (address instanceof EvmAddress2) {
        return address;
      }
      return new EvmAddress2(address);
    };
    EvmAddress2.fromJSON = function(address) {
      return new EvmAddress2(address);
    };
    EvmAddress2.parse = function(address) {
      if (!isAddress(address)) {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Invalid address provided: ".concat(address)
        });
      }
      return getAddress(address);
    };
    EvmAddress2.equals = function(addressA, addressB) {
      return EvmAddress2.create(addressA)._value === EvmAddress2.create(addressB)._value;
    };
    EvmAddress2.prototype.equals = function(address) {
      return EvmAddress2.equals(this, address);
    };
    Object.defineProperty(EvmAddress2.prototype, "checksum", {
      /**
       * @returns the address value in checksum (EIP-55) format (see https://eips.ethereum.org/EIPS/eip-55)
       * @example `address.checksum // "0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359"`
       */
      get: function() {
        return this._value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmAddress2.prototype, "lowercase", {
      /**
       * @returns the address value in lowercase format
       * @example `address.lowercase // "0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359"`
       */
      get: function() {
        return this._value.toLowerCase();
      },
      enumerable: false,
      configurable: true
    });
    EvmAddress2.prototype.toJSON = function() {
      return this.lowercase;
    };
    return EvmAddress2;
  }()
);
var chainList = [
  {
    name: "Ethereum Mainnet",
    chain: "ETH",
    icon: "ethereum",
    rpc: [
      "https://mainnet.infura.io/v3/${INFURA_API_KEY}",
      "wss://mainnet.infura.io/ws/v3/${INFURA_API_KEY}",
      "https://api.mycryptoapi.com/eth",
      "https://cloudflare-eth.com",
      "https://ethereum-rpc.publicnode.com",
      "wss://ethereum-rpc.publicnode.com",
      "https://mainnet.gateway.tenderly.co",
      "wss://mainnet.gateway.tenderly.co",
      "https://rpc.blocknative.com/boost",
      "https://rpc.flashbots.net",
      "https://rpc.flashbots.net/fast",
      "https://rpc.mevblocker.io",
      "https://rpc.mevblocker.io/fast",
      "https://rpc.mevblocker.io/noreverts",
      "https://rpc.mevblocker.io/fullprivacy",
      "https://eth.drpc.org",
      "wss://eth.drpc.org"
    ],
    features: [
      {
        name: "EIP155"
      },
      {
        name: "EIP1559"
      }
    ],
    faucets: [],
    nativeCurrency: {
      name: "Ether",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://ethereum.org",
    shortName: "eth",
    chainId: 1,
    networkId: 1,
    slip44: 60,
    ens: {
      registry: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
    },
    explorers: [
      {
        name: "etherscan",
        url: "https://etherscan.io",
        standard: "EIP3091"
      },
      {
        name: "blockscout",
        url: "https://eth.blockscout.com",
        icon: "blockscout",
        standard: "EIP3091"
      },
      {
        name: "dexguru",
        url: "https://ethereum.dex.guru",
        icon: "dexguru",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Goerli",
    title: "Ethereum Testnet Goerli",
    chain: "ETH",
    rpc: [
      "https://goerli.infura.io/v3/${INFURA_API_KEY}",
      "wss://goerli.infura.io/v3/${INFURA_API_KEY}",
      "https://rpc.goerli.mudit.blog/",
      "https://ethereum-goerli-rpc.publicnode.com",
      "wss://ethereum-goerli-rpc.publicnode.com",
      "https://goerli.gateway.tenderly.co",
      "wss://goerli.gateway.tenderly.co"
    ],
    faucets: [
      "http://fauceth.komputing.org?chain=5&address=${ADDRESS}",
      "https://goerli-faucet.slock.it?address=${ADDRESS}",
      "https://faucet.goerli.mudit.blog"
    ],
    nativeCurrency: {
      name: "Goerli Ether",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://goerli.net/#about",
    shortName: "gor",
    chainId: 5,
    networkId: 5,
    slip44: 1,
    ens: {
      registry: "0x112234455c3a32fd11230c42e7bccd4a84e02010"
    },
    explorers: [
      {
        name: "etherscan-goerli",
        url: "https://goerli.etherscan.io",
        standard: "EIP3091"
      },
      {
        name: "blockscout-goerli",
        url: "https://eth-goerli.blockscout.com",
        icon: "blockscout",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "OP Mainnet",
    chain: "ETH",
    rpc: [
      "https://mainnet.optimism.io",
      "https://optimism-rpc.publicnode.com",
      "wss://optimism-rpc.publicnode.com",
      "https://optimism.gateway.tenderly.co",
      "wss://optimism.gateway.tenderly.co",
      "https://optimism.drpc.org",
      "wss://optimism.drpc.org"
    ],
    faucets: [],
    nativeCurrency: {
      name: "Ether",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://optimism.io",
    shortName: "oeth",
    chainId: 10,
    networkId: 10,
    explorers: [
      {
        name: "etherscan",
        url: "https://optimistic.etherscan.io",
        standard: "EIP3091"
      },
      {
        name: "blockscout",
        url: "https://optimism.blockscout.com",
        icon: "blockscout",
        standard: "EIP3091"
      },
      {
        name: "dexguru",
        url: "https://optimism.dex.guru",
        icon: "dexguru",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Cronos Mainnet",
    chain: "CRO",
    rpc: [
      "https://evm.cronos.org",
      "https://cronos-evm-rpc.publicnode.com",
      "wss://cronos-evm-rpc.publicnode.com",
      "https://cronos.drpc.org",
      "wss://cronos.drpc.org"
    ],
    features: [
      {
        name: "EIP1559"
      }
    ],
    faucets: [],
    nativeCurrency: {
      name: "Cronos",
      symbol: "CRO",
      decimals: 18
    },
    infoURL: "https://cronos.org/",
    shortName: "cro",
    chainId: 25,
    networkId: 25,
    explorers: [
      {
        name: "Cronos Explorer",
        url: "https://explorer.cronos.org",
        standard: "none"
      }
    ]
  },
  {
    name: "BNB Smart Chain Mainnet",
    chain: "BSC",
    rpc: [
      "https://bsc-dataseed1.bnbchain.org",
      "https://bsc-dataseed2.bnbchain.org",
      "https://bsc-dataseed3.bnbchain.org",
      "https://bsc-dataseed4.bnbchain.org",
      "https://bsc-dataseed1.defibit.io",
      "https://bsc-dataseed2.defibit.io",
      "https://bsc-dataseed3.defibit.io",
      "https://bsc-dataseed4.defibit.io",
      "https://bsc-dataseed1.ninicoin.io",
      "https://bsc-dataseed2.ninicoin.io",
      "https://bsc-dataseed3.ninicoin.io",
      "https://bsc-dataseed4.ninicoin.io",
      "https://bsc-rpc.publicnode.com",
      "wss://bsc-rpc.publicnode.com",
      "wss://bsc-ws-node.nariox.org"
    ],
    faucets: [],
    nativeCurrency: {
      name: "BNB Chain Native Token",
      symbol: "BNB",
      decimals: 18
    },
    infoURL: "https://www.bnbchain.org/en",
    shortName: "bnb",
    chainId: 56,
    networkId: 56,
    slip44: 714,
    explorers: [
      {
        name: "bscscan",
        url: "https://bscscan.com",
        standard: "EIP3091"
      },
      {
        name: "dexguru",
        url: "https://bnb.dex.guru",
        icon: "dexguru",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "BNB Smart Chain Testnet",
    chain: "BSC",
    rpc: [
      "https://data-seed-prebsc-1-s1.bnbchain.org:8545",
      "https://data-seed-prebsc-2-s1.bnbchain.org:8545",
      "https://data-seed-prebsc-1-s2.bnbchain.org:8545",
      "https://data-seed-prebsc-2-s2.bnbchain.org:8545",
      "https://data-seed-prebsc-1-s3.bnbchain.org:8545",
      "https://data-seed-prebsc-2-s3.bnbchain.org:8545",
      "https://bsc-testnet-rpc.publicnode.com",
      "wss://bsc-testnet-rpc.publicnode.com"
    ],
    faucets: ["https://testnet.bnbchain.org/faucet-smart"],
    nativeCurrency: {
      name: "BNB Chain Native Token",
      symbol: "tBNB",
      decimals: 18
    },
    infoURL: "https://www.bnbchain.org/en",
    shortName: "bnbt",
    chainId: 97,
    networkId: 97,
    slip44: 1,
    explorers: [
      {
        name: "bscscan-testnet",
        url: "https://testnet.bscscan.com",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Gnosis",
    chain: "GNO",
    icon: "gnosis",
    rpc: [
      "https://rpc.gnosischain.com",
      "https://rpc.gnosis.gateway.fm",
      "https://rpc.ankr.com/gnosis",
      "https://gnosischain-rpc.gateway.pokt.network",
      "https://gnosis-mainnet.public.blastapi.io",
      "https://gnosis.api.onfinality.io/public",
      "https://gnosis.blockpi.network/v1/rpc/public",
      "https://web3endpoints.com/gnosischain-mainnet",
      "https://gnosis.oat.farm",
      "wss://rpc.gnosischain.com/wss",
      "https://gnosis-rpc.publicnode.com",
      "wss://gnosis-rpc.publicnode.com"
    ],
    faucets: [
      "https://gnosisfaucet.com",
      "https://stakely.io/faucet/gnosis-chain-xdai",
      "https://faucet.prussia.dev/xdai"
    ],
    nativeCurrency: {
      name: "xDAI",
      symbol: "XDAI",
      decimals: 18
    },
    infoURL: "https://docs.gnosischain.com",
    shortName: "gno",
    chainId: 100,
    networkId: 100,
    slip44: 700,
    explorers: [
      {
        name: "gnosisscan",
        url: "https://gnosisscan.io",
        standard: "EIP3091"
      },
      {
        name: "blockscout",
        url: "https://gnosis.blockscout.com",
        icon: "blockscout",
        standard: "EIP3091"
      },
      {
        name: "dexguru",
        url: "https://gnosis.dex.guru",
        icon: "dexguru",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Polygon Mainnet",
    chain: "Polygon",
    icon: "polygon",
    rpc: [
      "https://polygon-rpc.com/",
      "https://rpc-mainnet.matic.network",
      "https://matic-mainnet.chainstacklabs.com",
      "https://rpc-mainnet.maticvigil.com",
      "https://rpc-mainnet.matic.quiknode.pro",
      "https://matic-mainnet-full-rpc.bwarelabs.com",
      "https://polygon-bor-rpc.publicnode.com",
      "wss://polygon-bor-rpc.publicnode.com",
      "https://polygon.gateway.tenderly.co",
      "wss://polygon.gateway.tenderly.co",
      "https://polygon.drpc.org",
      "wss://polygon.drpc.org"
    ],
    faucets: [],
    nativeCurrency: {
      name: "MATIC",
      symbol: "MATIC",
      decimals: 18
    },
    infoURL: "https://polygon.technology/",
    shortName: "matic",
    chainId: 137,
    networkId: 137,
    slip44: 966,
    explorers: [
      {
        name: "polygonscan",
        url: "https://polygonscan.com",
        standard: "EIP3091"
      },
      {
        name: "dexguru",
        url: "https://polygon.dex.guru",
        icon: "dexguru",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Fantom Opera",
    chain: "FTM",
    rpc: [
      "https://rpc.ftm.tools",
      "https://fantom-rpc.publicnode.com",
      "wss://fantom-rpc.publicnode.com",
      "https://fantom.drpc.org",
      "wss://fantom.drpc.org"
    ],
    faucets: [],
    nativeCurrency: {
      name: "Fantom",
      symbol: "FTM",
      decimals: 18
    },
    infoURL: "https://fantom.foundation",
    shortName: "ftm",
    chainId: 250,
    networkId: 250,
    icon: "fantom",
    explorers: [
      {
        name: "ftmscan",
        url: "https://ftmscan.com",
        icon: "ftmscan",
        standard: "EIP3091"
      },
      {
        name: "dexguru",
        url: "https://fantom.dex.guru",
        icon: "dexguru",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Fantom Testnet",
    chain: "FTM",
    rpc: [
      "https://rpc.testnet.fantom.network",
      "https://fantom-testnet-rpc.publicnode.com",
      "wss://fantom-testnet-rpc.publicnode.com",
      "https://fantom-testnet.drpc.org",
      "wss://fantom-testnet.drpc.org"
    ],
    faucets: ["https://faucet.fantom.network"],
    nativeCurrency: {
      name: "Fantom",
      symbol: "FTM",
      decimals: 18
    },
    infoURL: "https://docs.fantom.foundation/quick-start/short-guide#fantom-testnet",
    shortName: "tftm",
    chainId: 4002,
    networkId: 4002,
    slip44: 1,
    icon: "fantom",
    explorers: [
      {
        name: "ftmscan",
        url: "https://testnet.ftmscan.com",
        icon: "ftmscan",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Base",
    chain: "ETH",
    rpc: [
      "https://mainnet.base.org/",
      "https://developer-access-mainnet.base.org/",
      "https://base.gateway.tenderly.co",
      "wss://base.gateway.tenderly.co",
      "https://base-rpc.publicnode.com",
      "wss://base-rpc.publicnode.com"
    ],
    faucets: [],
    nativeCurrency: {
      name: "Ether",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://base.org",
    shortName: "base",
    chainId: 8453,
    networkId: 8453,
    icon: "base",
    explorers: [
      {
        name: "basescan",
        url: "https://basescan.org",
        standard: "none"
      },
      {
        name: "basescout",
        url: "https://base.blockscout.com",
        icon: "blockscout",
        standard: "EIP3091"
      },
      {
        name: "dexguru",
        url: "https://base.dex.guru",
        icon: "dexguru",
        standard: "EIP3091"
      }
    ],
    status: "active"
  },
  {
    name: "Gnosis Chiado Testnet",
    chain: "GNO",
    icon: "gnosis",
    rpc: [
      "https://rpc.chiadochain.net",
      "https://rpc.chiado.gnosis.gateway.fm",
      "wss://rpc.chiadochain.net/wss",
      "https://gnosis-chiado-rpc.publicnode.com",
      "wss://gnosis-chiado-rpc.publicnode.com",
      "https://gnosis-chiado.drpc.org",
      "wss://gnosis-chiado.drpc.org"
    ],
    faucets: ["https://gnosisfaucet.com"],
    nativeCurrency: {
      name: "Chiado xDAI",
      symbol: "XDAI",
      decimals: 18
    },
    infoURL: "https://docs.gnosischain.com",
    shortName: "chi",
    chainId: 10200,
    networkId: 10200,
    slip44: 1,
    explorers: [
      {
        name: "blockscout-chiadochain",
        url: "https://blockscout.chiadochain.net",
        icon: "blockscout",
        standard: "EIP3091"
      },
      {
        name: "blockscout",
        url: "https://gnosis-chiado.blockscout.com",
        icon: "blockscout",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Holesky",
    title: "Ethereum Testnet Holesky",
    chain: "ETH",
    rpc: [
      "https://rpc.holesky.ethpandaops.io",
      "https://ethereum-holesky-rpc.publicnode.com",
      "wss://ethereum-holesky-rpc.publicnode.com",
      "https://holesky.drpc.org",
      "wss://holesky.drpc.org"
    ],
    faucets: ["https://faucet.holesky.ethpandaops.io", "https://holesky-faucet.pk910.de"],
    nativeCurrency: {
      name: "Testnet ETH",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://holesky.ethpandaops.io",
    shortName: "holesky",
    chainId: 17e3,
    networkId: 17e3,
    slip44: 1,
    icon: "ethereum",
    status: "incubating",
    explorers: [
      {
        name: "Holesky Explorer",
        url: "https://holesky.beaconcha.in",
        icon: "ethereum",
        standard: "EIP3091"
      },
      {
        name: "otterscan-holesky",
        url: "https://holesky.otterscan.io",
        icon: "ethereum",
        standard: "EIP3091"
      },
      {
        name: "Holesky Etherscan",
        url: "https://holesky.etherscan.io",
        icon: "ethereum",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Arbitrum One",
    chainId: 42161,
    shortName: "arb1",
    chain: "ETH",
    networkId: 42161,
    nativeCurrency: {
      name: "Ether",
      symbol: "ETH",
      decimals: 18
    },
    rpc: [
      "https://arbitrum-mainnet.infura.io/v3/${INFURA_API_KEY}",
      "https://arb-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}",
      "https://arb1.arbitrum.io/rpc",
      "https://arbitrum-one.publicnode.com",
      "wss://arbitrum-one.publicnode.com"
    ],
    faucets: [],
    explorers: [
      {
        name: "Arbiscan",
        url: "https://arbiscan.io",
        standard: "EIP3091"
      },
      {
        name: "Arbitrum Explorer",
        url: "https://explorer.arbitrum.io",
        standard: "EIP3091"
      },
      {
        name: "dexguru",
        url: "https://arbitrum.dex.guru",
        icon: "dexguru",
        standard: "EIP3091"
      }
    ],
    infoURL: "https://arbitrum.io",
    parent: {
      type: "L2",
      chain: "eip155-1",
      bridges: [
        {
          url: "https://bridge.arbitrum.io"
        }
      ]
    }
  },
  {
    name: "Avalanche Fuji Testnet",
    chain: "AVAX",
    icon: "avax",
    rpc: [
      "https://api.avax-test.network/ext/bc/C/rpc",
      "https://avalanche-fuji-c-chain-rpc.publicnode.com",
      "wss://avalanche-fuji-c-chain-rpc.publicnode.com"
    ],
    faucets: ["https://faucet.avax-test.network/"],
    nativeCurrency: {
      name: "Avalanche",
      symbol: "AVAX",
      decimals: 18
    },
    infoURL: "https://cchain.explorer.avax-test.network",
    shortName: "Fuji",
    chainId: 43113,
    networkId: 1,
    slip44: 1,
    explorers: [
      {
        name: "snowtrace",
        url: "https://testnet.snowtrace.io",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Avalanche C-Chain",
    chain: "AVAX",
    icon: "avax",
    rpc: [
      "https://api.avax.network/ext/bc/C/rpc",
      "https://avalanche-c-chain-rpc.publicnode.com",
      "wss://avalanche-c-chain-rpc.publicnode.com"
    ],
    features: [
      {
        name: "EIP1559"
      }
    ],
    faucets: [],
    nativeCurrency: {
      name: "Avalanche",
      symbol: "AVAX",
      decimals: 18
    },
    infoURL: "https://www.avax.network/",
    shortName: "avax",
    chainId: 43114,
    networkId: 43114,
    slip44: 9005,
    explorers: [
      {
        name: "snowtrace",
        url: "https://snowtrace.io",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Linea",
    title: "Linea Mainnet",
    chain: "ETH",
    rpc: [
      "https://rpc.linea.build",
      "wss://rpc.linea.build",
      "https://linea-mainnet.infura.io/v3/${INFURA_API_KEY}",
      "wss://linea-mainnet.infura.io/ws/v3/${INFURA_API_KEY}"
    ],
    faucets: [],
    nativeCurrency: {
      name: "Linea Ether",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://linea.build",
    shortName: "linea",
    chainId: 59144,
    networkId: 59144,
    icon: "linea",
    parent: {
      type: "L2",
      chain: "eip155-1",
      bridges: [
        {
          url: "https://bridge.linea.build"
        }
      ]
    },
    explorers: [
      {
        name: "Etherscan",
        url: "https://lineascan.build",
        standard: "EIP3091",
        icon: "linea"
      },
      {
        name: "Blockscout",
        url: "https://explorer.linea.build",
        standard: "EIP3091",
        icon: "linea"
      },
      {
        name: "L2scan",
        url: "https://linea.l2scan.co",
        standard: "EIP3091",
        icon: "linea"
      }
    ],
    status: "active"
  },
  {
    name: "Mumbai",
    title: "Polygon Testnet Mumbai",
    chain: "Polygon",
    icon: "polygon",
    rpc: [
      "https://rpc-mumbai.maticvigil.com",
      "https://polygon-mumbai-bor-rpc.publicnode.com",
      "wss://polygon-mumbai-bor-rpc.publicnode.com",
      "https://polygon-mumbai.gateway.tenderly.co",
      "wss://polygon-mumbai.gateway.tenderly.co"
    ],
    faucets: ["https://faucet.polygon.technology/"],
    nativeCurrency: {
      name: "MATIC",
      symbol: "MATIC",
      decimals: 18
    },
    infoURL: "https://polygon.technology/",
    shortName: "maticmum",
    chainId: 80001,
    networkId: 80001,
    slip44: 1,
    explorers: [
      {
        name: "polygonscan",
        url: "https://mumbai.polygonscan.com",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Amoy",
    title: "Polygon Amoy Testnet",
    chain: "Polygon",
    icon: "polygon",
    rpc: [
      "https://https://rpc-amoy.polygon.technology",
      "https://polygon-amoy-bor-rpc.publicnode.com",
      "wss://polygon-amoy-bor-rpc.publicnode.com"
    ],
    faucets: ["https://faucet.polygon.technology/"],
    nativeCurrency: {
      name: "MATIC",
      symbol: "MATIC",
      decimals: 18
    },
    infoURL: "https://polygon.technology/",
    shortName: "polygonamoy",
    chainId: 80002,
    networkId: 80002,
    slip44: 1,
    explorers: [
      {
        name: "polygonamoy",
        url: "https://www.oklink.com/amoy",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Base Goerli Testnet",
    chain: "ETH",
    rpc: [
      "https://goerli.base.org",
      "https://base-goerli.gateway.tenderly.co",
      "wss://base-goerli.gateway.tenderly.co",
      "https://base-goerli-rpc.publicnode.com",
      "wss://base-goerli-rpc.publicnode.com"
    ],
    faucets: ["https://www.coinbase.com/faucets/base-ethereum-goerli-faucet"],
    nativeCurrency: {
      name: "Goerli Ether",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://base.org",
    shortName: "basegor",
    chainId: 84531,
    networkId: 84531,
    slip44: 1,
    icon: "baseTestnet",
    explorers: [
      {
        name: "basescan",
        url: "https://goerli.basescan.org",
        standard: "none"
      },
      {
        name: "basescout",
        url: "https://base-goerli.blockscout.com",
        icon: "blockscout",
        standard: "EIP3091"
      },
      {
        name: "dexguru",
        url: "https://base-goerli.dex.guru",
        icon: "dexguru",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Base Sepolia Testnet",
    chain: "ETH",
    rpc: [
      "https://sepolia.base.org",
      "https://base-sepolia-rpc.publicnode.com",
      "wss://base-sepolia-rpc.publicnode.com"
    ],
    faucets: [],
    nativeCurrency: {
      name: "Sepolia Ether",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://base.org",
    shortName: "basesep",
    chainId: 84532,
    networkId: 84532,
    slip44: 1,
    icon: "baseTestnet",
    explorers: [
      {
        name: "basescout",
        url: "https://base-sepolia.blockscout.com",
        icon: "blockscout",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "IVAR Chain Mainnet",
    chain: "IVAR",
    icon: "ivar",
    rpc: ["https://mainnet-rpc.ivarex.com"],
    faucets: ["https://faucet.ivarex.com/"],
    nativeCurrency: {
      name: "Ivar",
      symbol: "IVAR",
      decimals: 18
    },
    infoURL: "https://ivarex.com",
    shortName: "ivar",
    chainId: 88888,
    networkId: 88888,
    explorers: [
      {
        name: "ivarscan",
        url: "https://ivarscan.com",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Arbitrum Goerli",
    title: "Arbitrum Goerli Rollup Testnet",
    chainId: 421613,
    shortName: "arb-goerli",
    chain: "ETH",
    networkId: 421613,
    slip44: 1,
    nativeCurrency: {
      name: "Arbitrum Goerli Ether",
      symbol: "AGOR",
      decimals: 18
    },
    rpc: [
      "https://goerli-rollup.arbitrum.io/rpc",
      "https://arbitrum-goerli.publicnode.com",
      "wss://arbitrum-goerli.publicnode.com"
    ],
    faucets: [],
    infoURL: "https://arbitrum.io/",
    explorers: [
      {
        name: "Arbitrum Goerli Arbiscan",
        url: "https://goerli.arbiscan.io",
        standard: "EIP3091"
      }
    ],
    parent: {
      type: "L2",
      chain: "eip155-5",
      bridges: [
        {
          url: "https://bridge.arbitrum.io/"
        }
      ]
    }
  },
  {
    name: "Sepolia",
    title: "Ethereum Testnet Sepolia",
    chain: "ETH",
    rpc: [
      "https://rpc.sepolia.org",
      "https://rpc2.sepolia.org",
      "https://rpc-sepolia.rockx.com",
      "https://rpc.sepolia.ethpandaops.io",
      "https://sepolia.infura.io/v3/${INFURA_API_KEY}",
      "wss://sepolia.infura.io/v3/${INFURA_API_KEY}",
      "https://sepolia.gateway.tenderly.co",
      "wss://sepolia.gateway.tenderly.co",
      "https://ethereum-sepolia-rpc.publicnode.com",
      "wss://ethereum-sepolia-rpc.publicnode.com",
      "https://sepolia.drpc.org",
      "wss://sepolia.drpc.org"
    ],
    faucets: ["http://fauceth.komputing.org?chain=11155111&address=${ADDRESS}"],
    nativeCurrency: {
      name: "Sepolia Ether",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://sepolia.otterscan.io",
    shortName: "sep",
    chainId: 11155111,
    networkId: 11155111,
    slip44: 1,
    explorers: [
      {
        name: "etherscan-sepolia",
        url: "https://sepolia.etherscan.io",
        standard: "EIP3091"
      },
      {
        name: "otterscan-sepolia",
        url: "https://sepolia.otterscan.io",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Palm",
    chain: "Palm",
    icon: "palm",
    rpc: ["https://palm-mainnet.infura.io/v3/${INFURA_API_KEY}", "https://palm-mainnet.public.blastapi.io"],
    faucets: [],
    nativeCurrency: {
      name: "PALM",
      symbol: "PALM",
      decimals: 18
    },
    infoURL: "https://palm.network",
    shortName: "palm",
    chainId: 11297108109,
    networkId: 11297108109,
    explorers: [
      {
        name: "Chainlens",
        url: "https://palm.chainlens.com",
        standard: "EIP3091"
      },
      {
        name: "Dora",
        url: "https://www.ondora.xyz/network/palm",
        standard: "none"
      }
    ]
  }
];
var INVALID_VALUES = ["0x", "0x0", "0", 0];
var EvmChainParser = (
  /** @class */
  function() {
    function EvmChainParser2() {
    }
    EvmChainParser2.parse = function(chain) {
      if (INVALID_VALUES.includes(chain)) {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Invalid provided chain, value must be a positive number, or a hex-string starting with '0x'"
        });
      }
      if (typeof chain === "string") {
        if (chain.startsWith("0x")) {
          return chain;
        }
        try {
          var parsed = parseInt(chain, 10);
          if (Number.isNaN(parsed)) {
            throw new Error("Cannot parse the provided string value to a valid chain number");
          }
          return "0x".concat(parsed.toString(16));
        } catch (error) {
          throw new CoreError({
            code: CoreErrorCode.INVALID_ARGUMENT,
            message: "Invalid provided chain, value must be a positive number, or a hex-string starting with '0x'"
          });
        }
      }
      if (chain <= 0) {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Invalid provided chain, value must be a positive number, or a hex-string starting with '0x'"
        });
      }
      return "0x".concat(chain.toString(16));
    };
    return EvmChainParser2;
  }()
);
var EvmChain = (
  /** @class */
  function() {
    function EvmChain2(value) {
      var _this = this;
      var _a;
      this._value = EvmChainParser.parse(value);
      this._chainlistData = (_a = chainList.find(function(chainData) {
        return chainData.chainId === _this.decimal;
      })) !== null && _a !== void 0 ? _a : null;
    }
    Object.defineProperty(EvmChain2, "ETHEREUM", {
      /**
       * Returns ETHEREUM chain
       *
       * @example EvmChain.ETHEREUM
       */
      get: function() {
        return EvmChain2.create(1);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "GOERLI", {
      /**
       * Returns GOERLI chain
       *
       * @example EvmChain.GOERLI
       */
      get: function() {
        return EvmChain2.create(5);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "SEPOLIA", {
      /**
       * Returns SEPOLIA chain
       *
       * @example EvmChain.SEPOLIA
       */
      get: function() {
        return EvmChain2.create(11155111);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "POLYGON", {
      /**
       * Returns POLYGON chain
       *
       * @example EvmChain.POLYGON
       */
      get: function() {
        return EvmChain2.create(137);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "MUMBAI", {
      /**
       * Returns MUMBAI chain
       *
       * @example EvmChain.MUMBAI
       */
      get: function() {
        return EvmChain2.create(80001);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "BSC", {
      /**
       * Returns BSC chain
       *
       * @example EvmChain.BSC
       */
      get: function() {
        return EvmChain2.create(56);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "BSC_TESTNET", {
      /**
       * Returns BSC_TESTNET chain
       *
       * @example EvmChain.BSC_TESTNET
       */
      get: function() {
        return EvmChain2.create(97);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "AVALANCHE", {
      /**
       * Returns AVALANCHE chain
       *
       * @example EvmChain.AVALANCHE
       */
      get: function() {
        return EvmChain2.create(43114);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "AVALANCHE_TESTNET", {
      /**
       * Returns AVALANCHE_TESTNET chain
       *
       * @example EvmChain.AVALANCHE_TESTNET
       */
      get: function() {
        return EvmChain2.create(43113);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "FANTOM", {
      /**
       * Returns FANTOM chain
       *
       * @example EvmChain.FANTOM
       */
      get: function() {
        return EvmChain2.create(250);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "FANTOM_TESTNET", {
      /**
       * Returns FANTOM_TESTNET chain
       *
       * @example EvmChain.FANTOM_TESTNET
       */
      get: function() {
        return EvmChain2.create(4002);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "CRONOS", {
      /**
       * Returns CRONOS chain
       *
       * @example EvmChain.CRONOS
       */
      get: function() {
        return EvmChain2.create(25);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "PALM", {
      /**
       * Returns PALM chain
       *
       * @example EvmChain.PALM
       */
      get: function() {
        return EvmChain2.create(11297108109);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "ARBITRUM", {
      /**
       * Returns ARBITRUM chain
       *
       * @example EvmChain.ARBITRUM
       */
      get: function() {
        return EvmChain2.create(42161);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "ARBITRUM_TESTNET", {
      /**
       * Returns ARBITRUM_TESTNET chain
       *
       * @example EvmChain.ARBITRUM_TESTNET
       */
      get: function() {
        return EvmChain2.create(421613);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "RONIN", {
      /**
       * Returns RONIN chain
       *
       * @example EvmChain.RONIN
       */
      get: function() {
        return EvmChain2.create(2020);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "OPTIMISM", {
      /**
       * Returns OPTIMISM chain
       *
       * @example EvmChain.OPTIMISM
       */
      get: function() {
        return EvmChain2.create(10);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "CHILIZ", {
      /**
       * Returns CHILIZ chain
       *
       * @example EvmChain.CHILIZ
       */
      get: function() {
        return EvmChain2.create(88888);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "CHILIZ_TESTNET", {
      /**
       * Returns CHILIZ_TESTNET chain
       *
       * @example EvmChain.CHILIZ_TESTNET
       */
      get: function() {
        return EvmChain2.create(88882);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "GNOSIS", {
      /**
       * Returns GNOSIS chain
       *
       * @example EvmChain.GNOSIS
       */
      get: function() {
        return EvmChain2.create(100);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "GNOSIS_TESTNET", {
      /**
       * Returns GNOSIS_TESTNET chain
       *
       * @example EvmChain.GNOSIS_TESTNET
       */
      get: function() {
        return EvmChain2.create(10200);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "BASE", {
      /**
       * Returns BASE chain
       *
       * @example EvmChain.BASE
       */
      get: function() {
        return EvmChain2.create(8453);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "BASE_TESTNET", {
      /**
       * Returns BASE_TESTNET chain
       *
       * @example EvmChain.BASE_TESTNET
       */
      get: function() {
        return EvmChain2.create(84531);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "BASE_SEPOLIA", {
      /**
       * Returns BASE_SEPOLIA chain
       *
       * @example EvmChain.BASE_SEPOLIA
       */
      get: function() {
        return EvmChain2.create(84532);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "HOLESKY", {
      /**
       * Returns HOLESKY chain
       *
       * @example EvmChain.HOLESKY
       */
      get: function() {
        return EvmChain2.create(17e3);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "POLYGON_AMOY", {
      /**
       * Returns POLYGON_AMOY chain
       *
       * @example EvmChain.POLYGON_AMOY
       */
      get: function() {
        return EvmChain2.create(80002);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "LINEA", {
      /**
       * Returns LINEA chain
       *
       * @example EvmChain.LINEA
       */
      get: function() {
        return EvmChain2.create(59144);
      },
      enumerable: false,
      configurable: true
    });
    EvmChain2.create = function(chain) {
      if (chain instanceof EvmChain2) {
        return chain;
      }
      return new EvmChain2(chain);
    };
    EvmChain2.prototype._getChainlistData = function() {
      if (!this._chainlistData) {
        return null;
      }
      return this._chainlistData;
    };
    EvmChain2.equals = function(chainA, chainB) {
      return EvmChain2.create(chainA)._value === EvmChain2.create(chainB)._value;
    };
    EvmChain2.values = function() {
      return [
        EvmChain2.ETHEREUM,
        EvmChain2.GOERLI,
        EvmChain2.SEPOLIA,
        EvmChain2.POLYGON,
        EvmChain2.MUMBAI,
        EvmChain2.BSC,
        EvmChain2.BSC_TESTNET,
        EvmChain2.AVALANCHE,
        EvmChain2.AVALANCHE_TESTNET,
        EvmChain2.FANTOM,
        EvmChain2.FANTOM_TESTNET,
        EvmChain2.CRONOS,
        EvmChain2.PALM,
        EvmChain2.ARBITRUM,
        EvmChain2.ARBITRUM_TESTNET,
        EvmChain2.RONIN,
        EvmChain2.OPTIMISM,
        EvmChain2.CHILIZ,
        EvmChain2.CHILIZ_TESTNET,
        EvmChain2.GNOSIS,
        EvmChain2.GNOSIS_TESTNET,
        EvmChain2.BASE,
        EvmChain2.BASE_TESTNET,
        EvmChain2.BASE_SEPOLIA,
        EvmChain2.HOLESKY,
        EvmChain2.POLYGON_AMOY,
        EvmChain2.LINEA
      ];
    };
    EvmChain2.prototype.equals = function(chain) {
      return EvmChain2.equals(this, chain);
    };
    EvmChain2.prototype.display = function() {
      return this.name ? "".concat(this.name, " (").concat(this.hex, ")") : this.hex;
    };
    EvmChain2.prototype.getExplorerPath = function(value) {
      var explorer = this.explorer;
      if (!explorer || explorer.standard !== "EIP3091") {
        return null;
      }
      var url = explorer.url;
      if ("block" in value) {
        return "".concat(url, "/block/").concat(value.block);
      }
      if ("transaction" in value) {
        return "".concat(url, "/tx/").concat(value.transaction);
      }
      if ("account" in value) {
        return "".concat(url, "/address/").concat(value.account);
      }
      if ("erc20" in value) {
        return "".concat(url, "/token/").concat(value.erc20);
      }
      return null;
    };
    Object.defineProperty(EvmChain2.prototype, "decimal", {
      /**
       * Returns the decimal representation of the chain
       * @example chain.decimal // 1
       */
      get: function() {
        return parseInt(this._value, 16);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2.prototype, "hex", {
      /**
       * Returns the hex-string representation of the chain
       * @example chain.hex // "0x1"
       */
      get: function() {
        return this._value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2.prototype, "apiHex", {
      /**
       * Validate and cast to api compatible hex
       *
       * @example chain.apiHex // "0x1"
       */
      get: function() {
        return this._value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2.prototype, "name", {
      /**
       * Returns the name of the chain
       * @example chain.name // "Ethereum"
       */
      get: function() {
        var _a;
        return (_a = this._getChainlistData()) === null || _a === void 0 ? void 0 : _a.name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2.prototype, "currency", {
      /**
       * Returns the currency of the chain
       * @returns The cuurrency of the chain or undefined if not found
       *
       * @example chain.currency // EvmNativeCurrency
       */
      get: function() {
        var _a;
        return (_a = this._getChainlistData()) === null || _a === void 0 ? void 0 : _a.nativeCurrency;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2.prototype, "rpcUrls", {
      /**
       * Returns the rpc Urls of the chain
       *
       * @example chain.rpcUrls // ["https://mainnet.infura.io/v3/<infura-key>"]
       */
      get: function() {
        var _a;
        return (_a = this._getChainlistData()) === null || _a === void 0 ? void 0 : _a.rpc;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2.prototype, "explorer", {
      /**
       * Returns the explorer Urls of the chain
       *
       * @example chain.explorerUrls // ["https://etherscan.io/"]
       */
      get: function() {
        var _a;
        var explorers = (_a = this._getChainlistData()) === null || _a === void 0 ? void 0 : _a.explorers;
        if (!explorers || explorers.length === 0) {
          return null;
        }
        return explorers[0];
      },
      enumerable: false,
      configurable: true
    });
    EvmChain2.prototype.toJSON = function() {
      return this.hex;
    };
    return EvmChain2;
  }()
);
var Erc20Token = (
  /** @class */
  function() {
    function Erc20Token2(value) {
      this._value = Erc20Token2.parse(value);
    }
    Erc20Token2.create = function(value) {
      if (value instanceof Erc20Token2) {
        return value;
      }
      return new Erc20Token2(value);
    };
    Erc20Token2.equals = function(valueA, valueB) {
      var erc20A = Erc20Token2.create(valueA);
      var erc20B = Erc20Token2.create(valueB);
      if (!erc20A._value.chain.equals(erc20B._value.chain)) {
        return false;
      }
      if (!erc20A._value.contractAddress.equals(erc20B._value.contractAddress)) {
        return false;
      }
      return true;
    };
    Erc20Token2.prototype.equals = function(value) {
      return Erc20Token2.equals(this, value);
    };
    Erc20Token2.prototype.toJSON = function() {
      var value = this._value;
      return __assign2(__assign2({}, value), { contractAddress: value.contractAddress.toJSON(), chain: value.chain.toJSON() });
    };
    Erc20Token2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(Erc20Token2.prototype, "result", {
      /**
       * Returns the processed Erc20Token.
       *
       * @returns the Erc20Token value
       * @example
       * ```ts
       * token.result;
       *  ```
       */
      get: function() {
        return this._value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Token2.prototype, "decimals", {
      /**
       * @returns the decimals of the token.
       *
       * @example
       * ```ts
       * token.decimals;
       * ```
       */
      get: function() {
        return this._value.decimals;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Token2.prototype, "name", {
      /**
       * @returns The name of the token.
       *
       * @example
       * ```ts
       * token.name;
       * ```
       */
      get: function() {
        return this._value.name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Token2.prototype, "symbol", {
      /**
       * @returns The symbol of the token.
       *
       * @example
       * ```ts
       * token.symbol;
       * ```
       */
      get: function() {
        return this._value.symbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Token2.prototype, "contractAddress", {
      /**
       * @returns The contract address of the token.
       *
       * @example
       * ```ts
       * token.contractAddress;
       * ```
       */
      get: function() {
        return this._value.contractAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Token2.prototype, "chain", {
      /**
       * @returns The chain of the token.
       *
       * @example
       * ```ts
       * token.chain;
       * ```
       */
      get: function() {
        return this._value.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Token2.prototype, "logo", {
      /**
       * @returns The logo of the token.
       *
       * @example
       * ```ts
       * token.logo;
       * ```
       */
      get: function() {
        return this._value.logo;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Token2.prototype, "logoHash", {
      /**
       * @returns The logo hash of the token.
       *
       * @example
       * ```ts
       * token.logoHash;
       * ```
       */
      get: function() {
        return this._value.logoHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Token2.prototype, "thumbnail", {
      /**
       * @returns The thumbnail of the token.
       *
       * @example
       * ```ts
       * token.thumbnail;
       * ```
       */
      get: function() {
        return this._value.thumbnail;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Token2.prototype, "possibleSpam", {
      /**
       * @returns possibility of the token being a spam token
       * @example transfer.possibleSpam // true
       */
      get: function() {
        return this._value.possibleSpam;
      },
      enumerable: false,
      configurable: true
    });
    Erc20Token2.parse = function(value) {
      return {
        decimals: +value.decimals,
        name: value.name,
        symbol: value.symbol,
        contractAddress: EvmAddress.create(value.contractAddress),
        logo: maybe(value.logo),
        logoHash: maybe(value.logoHash),
        thumbnail: maybe(value.thumbnail),
        chain: EvmChain.create(value.chain),
        possibleSpam: value.possibleSpam
      };
    };
    return Erc20Token2;
  }()
);
var Erc20Approval = (
  /** @class */
  function() {
    function Erc20Approval2(data) {
      this._data = Erc20Approval2.parse(data);
    }
    Erc20Approval2.create = function(data) {
      if (data instanceof Erc20Approval2) {
        return data;
      }
      return new Erc20Approval2(data);
    };
    Erc20Approval2.equals = function(dataA, dataB) {
      var approvalA = Erc20Approval2.create(dataA);
      var approvalB = Erc20Approval2.create(dataB);
      return JSON.stringify(approvalA.toJSON()) === JSON.stringify(approvalB.toJSON());
    };
    Erc20Approval2.prototype.equals = function(data) {
      return Erc20Approval2.equals(this, data);
    };
    Erc20Approval2.prototype.toJSON = function() {
      var data = this._data;
      return __assign2(__assign2({}, data), { chain: data.chain.toJSON(), contractAddress: data.contractAddress.toJSON(), blockNumber: data.blockNumber.toString(), toWallet: data.toWallet.toJSON(), fromWallet: data.fromWallet.toJSON(), value: data.value.toString() });
    };
    Erc20Approval2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(Erc20Approval2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example approval.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "toWallet", {
      /**
       * @returns the toWallet of the approval
       * @example approval.toWallet // EvmAddress
       */
      get: function() {
        return this._data.toWallet;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "fromWallet", {
      /**
       * @returns the fromWallet of the approval
       * @example approval.fromWallet // EvmAddress
       */
      get: function() {
        return this._data.fromWallet;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "contractAddress", {
      /**
       * @returns the contractAddress of the approval
       * @example approval.contractAddress // EvmAddress
       */
      get: function() {
        return this._data.contractAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "blockHash", {
      /**
       * @returns the block hash of the approval
       * @example approval.blockHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
       */
      get: function() {
        return this._data.blockHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "blockNumber", {
      /**
       * @returns the block number of the approval
       * @example approval.blockNumber // BigNumber
       */
      get: function() {
        return this._data.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "blockTimestamp", {
      /**
       * @returns the block timestamp of the approval
       * @example approval.blockTimestamp // Date
       */
      get: function() {
        return this._data.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "chain", {
      /**
       * @returns the chain of the approval
       * @example approval.chain // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "transactionHash", {
      /**
       * @returns the transaction hash of the approval
       * @example approval.transactionHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
       */
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "value", {
      /**
       * @returns the value of the approval
       * @example approval.value // BigNumber
       */
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "transactionIndex", {
      /**
       * @returns the transactionIndex of the approval
       * @example approval.transactionIndex // 3
       */
      get: function() {
        return this._data.transactionIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "logIndex", {
      /**
       * @returns the logIndex of the approval
       * @example approval.logIndex // 2
       */
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "possibleSpam", {
      /**
       * @returns possibility of the token being a spam token
       * @example transfer.possibleSpam // true
       */
      get: function() {
        return this._data.possibleSpam;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "tokenName", {
      /**
       * @returns The name of the token.
       * @example burn.tokenName // "Kylin Network"
       */
      get: function() {
        return this._data.tokenName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "tokenLogo", {
      /**
       * @returns The logo of the token
       * @example burn.tokenLogo // "https://cdn.moralis.io/eth/0x67b6d479c7bb412c54e03dca8e1bc6740ce6b99c.png"
       */
      get: function() {
        return this._data.tokenLogo;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "tokenSymbol", {
      /**
       * @returns The symbol of the token.
       * @example burn.tokenSymbol // "KYL"
       */
      get: function() {
        return this._data.tokenSymbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "tokenDecimals", {
      /**
       * @returns The decimals of the token.
       * @example burn.tokenDecimals // 18
       */
      get: function() {
        return this._data.tokenDecimals;
      },
      enumerable: false,
      configurable: true
    });
    Erc20Approval2.parse = function(data) {
      return __assign2(__assign2({}, data), { chain: EvmChain.create(data.chain), contractAddress: EvmAddress.create(data.contractAddress), fromWallet: EvmAddress.create(data.fromWallet), toWallet: EvmAddress.create(data.toWallet), blockTimestamp: dateInputToDate(data.blockTimestamp), blockNumber: BigNumber.create(data.blockNumber), value: BigNumber.create(data.value), transactionIndex: Number(data.transactionIndex), logIndex: Number(data.logIndex), tokenDecimals: Number(data.tokenDecimals) });
    };
    return Erc20Approval2;
  }()
);
var Erc20Burn = (
  /** @class */
  function() {
    function Erc20Burn2(data) {
      this._data = Erc20Burn2.parse(data);
    }
    Erc20Burn2.create = function(data) {
      if (data instanceof Erc20Burn2) {
        return data;
      }
      return new Erc20Burn2(data);
    };
    Erc20Burn2.equals = function(dataA, dataB) {
      var burnA = Erc20Burn2.create(dataA);
      var burnB = Erc20Burn2.create(dataB);
      return JSON.stringify(burnA.toJSON()) === JSON.stringify(burnB.toJSON());
    };
    Erc20Burn2.prototype.equals = function(data) {
      return Erc20Burn2.equals(this, data);
    };
    Erc20Burn2.prototype.toJSON = function() {
      var data = this._data;
      return __assign2(__assign2({}, data), { chain: data.chain.toJSON(), contractAddress: data.contractAddress.toJSON(), blockNumber: data.blockNumber.toString(), fromWallet: data.fromWallet.toJSON(), value: data.value.toString() });
    };
    Erc20Burn2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(Erc20Burn2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example burn.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "fromWallet", {
      /**
       * @returns the fromWallet of the burn
       * @example burn.fromWallet // EvmAddress
       */
      get: function() {
        return this._data.fromWallet;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "contractAddress", {
      /**
       * @returns the contractAddress of the burn
       * @example burn.contractAddress // EvmAddress
       */
      get: function() {
        return this._data.contractAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "blockHash", {
      /**
       * @returns the block hash of the burn
       * @example burn.blockHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
       */
      get: function() {
        return this._data.blockHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "blockNumber", {
      /**
       * @returns the block number of the burn
       * @example burn.blockNumber // BigNumber
       */
      get: function() {
        return this._data.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "blockTimestamp", {
      /**
       * @returns the block timestamp of the burn
       * @example burn.blockTimestamp // Date
       */
      get: function() {
        return this._data.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "chain", {
      /**
       * @returns the chain of the burn
       * @example burn.chain // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "transactionHash", {
      /**
       * @returns the transaction hash of the burn
       * @example burn.transactionHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
       */
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "value", {
      /**
       * @returns the value of the burn
       * @example burn.value // BigNumber
       */
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "transactionIndex", {
      /**
       * @returns the transactionIndex of the burn
       * @example burn.transactionIndex // 3
       */
      get: function() {
        return this._data.transactionIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "logIndex", {
      /**
       * @returns the logIndex of the burn
       * @example burn.logIndex // 2
       */
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "tokenName", {
      /**
       * @returns The name of the token.
       * @example burn.tokenName // "Kylin Network"
       */
      get: function() {
        return this._data.tokenName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "tokenLogo", {
      /**
       * @returns The logo of the token
       * @example burn.tokenLogo // "https://cdn.moralis.io/eth/0x67b6d479c7bb412c54e03dca8e1bc6740ce6b99c.png"
       */
      get: function() {
        return this._data.tokenLogo;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "tokenSymbol", {
      /**
       * @returns The symbol of the token.
       * @example burn.tokenSymbol // "KYL"
       */
      get: function() {
        return this._data.tokenSymbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "tokenDecimals", {
      /**
       * @returns The decimals of the token.
       * @example burn.tokenDecimals // 18
       */
      get: function() {
        return this._data.tokenDecimals;
      },
      enumerable: false,
      configurable: true
    });
    Erc20Burn2.parse = function(data) {
      return __assign2(__assign2({}, data), { chain: EvmChain.create(data.chain), contractAddress: EvmAddress.create(data.contractAddress), fromWallet: EvmAddress.create(data.fromWallet), blockTimestamp: dateInputToDate(data.blockTimestamp), blockNumber: BigNumber.create(data.blockNumber), value: BigNumber.create(data.value), transactionIndex: Number(data.transactionIndex), logIndex: Number(data.logIndex), tokenDecimals: Number(data.tokenDecimals) });
    };
    return Erc20Burn2;
  }()
);
var Erc20Mint = (
  /** @class */
  function() {
    function Erc20Mint2(data) {
      this._data = Erc20Mint2.parse(data);
    }
    Erc20Mint2.create = function(data) {
      if (data instanceof Erc20Mint2) {
        return data;
      }
      return new Erc20Mint2(data);
    };
    Erc20Mint2.equals = function(dataA, dataB) {
      var mintA = Erc20Mint2.create(dataA);
      var mintB = Erc20Mint2.create(dataB);
      return JSON.stringify(mintA.toJSON()) === JSON.stringify(mintB.toJSON());
    };
    Erc20Mint2.prototype.equals = function(data) {
      return Erc20Mint2.equals(this, data);
    };
    Erc20Mint2.prototype.toJSON = function() {
      var data = this._data;
      return __assign2(__assign2({}, data), { chain: data.chain.toJSON(), contractAddress: data.contractAddress.toJSON(), blockNumber: data.blockNumber.toString(), toWallet: data.toWallet.toJSON(), value: data.value.toString() });
    };
    Erc20Mint2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(Erc20Mint2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example mint.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "toWallet", {
      /**
       * @returns the toWallet of the mint
       * @example mint.toWallet // EvmAddress
       */
      get: function() {
        return this._data.toWallet;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "contractAddress", {
      /**
       * @returns the contractAddress of the mint
       * @example mint.contractAddress // EvmAddress
       */
      get: function() {
        return this._data.contractAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "blockHash", {
      /**
       * @returns the block hash of the mint
       * @example mint.blockHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
       */
      get: function() {
        return this._data.blockHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "blockNumber", {
      /**
       * @returns the block number of the mint
       * @example mint.blockNumber // BigNumber
       */
      get: function() {
        return this._data.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "blockTimestamp", {
      /**
       * @returns the block timestamp of the mint
       * @example mint.blockTimestamp // Date
       */
      get: function() {
        return this._data.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "chain", {
      /**
       * @returns the chain of the mint
       * @example mint.chain // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "transactionHash", {
      /**
       * @returns the transaction hash of the mint
       * @example mint.transactionHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
       */
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "value", {
      /**
       * @returns the value of the mint
       * @example mint.value // BigNumber
       */
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "transactionIndex", {
      /**
       * @returns the transactionIndex of the mint
       * @example mint.transactionIndex // 3
       */
      get: function() {
        return this._data.transactionIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "logIndex", {
      /**
       * @returns the logIndex of the mint
       * @example mint.logIndex // 2
       */
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "tokenName", {
      /**
       * @returns The name of the token.
       * @example burn.tokenName // "Kylin Network"
       */
      get: function() {
        return this._data.tokenName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "tokenLogo", {
      /**
       * @returns The logo of the token
       * @example burn.tokenLogo // "https://cdn.moralis.io/eth/0x67b6d479c7bb412c54e03dca8e1bc6740ce6b99c.png"
       */
      get: function() {
        return this._data.tokenLogo;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "tokenSymbol", {
      /**
       * @returns The symbol of the token.
       * @example burn.tokenSymbol // "KYL"
       */
      get: function() {
        return this._data.tokenSymbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "tokenDecimals", {
      /**
       * @returns The decimals of the token.
       * @example burn.tokenDecimals // 18
       */
      get: function() {
        return this._data.tokenDecimals;
      },
      enumerable: false,
      configurable: true
    });
    Erc20Mint2.parse = function(data) {
      return __assign2(__assign2({}, data), { chain: EvmChain.create(data.chain), contractAddress: EvmAddress.create(data.contractAddress), toWallet: EvmAddress.create(data.toWallet), blockTimestamp: dateInputToDate(data.blockTimestamp), blockNumber: BigNumber.create(data.blockNumber), value: BigNumber.create(data.value), transactionIndex: Number(data.transactionIndex), logIndex: Number(data.logIndex), tokenDecimals: Number(data.tokenDecimals) });
    };
    return Erc20Mint2;
  }()
);
var Erc20Transaction = (
  /** @class */
  function() {
    function Erc20Transaction2(data) {
      this._data = Erc20Transaction2.parse(data);
    }
    Erc20Transaction2.create = function(data) {
      if (data instanceof Erc20Transaction2) {
        return data;
      }
      return new Erc20Transaction2(data);
    };
    Erc20Transaction2.equals = function(dataA, dataB) {
      var tokenA = Erc20Transaction2.create(dataA);
      var tokenB = Erc20Transaction2.create(dataB);
      return JSON.stringify(tokenA.toJSON()) === JSON.stringify(tokenB.toJSON());
    };
    Erc20Transaction2.prototype.equals = function(data) {
      return Erc20Transaction2.equals(this, data);
    };
    Erc20Transaction2.prototype.toJSON = function() {
      var data = this._data;
      return __assign2(__assign2({}, data), { chain: data.chain.toJSON(), address: data.address.toJSON(), blockNumber: data.blockNumber.toString(), toAddress: data.toAddress.toJSON(), fromAddress: data.fromAddress.toJSON(), value: data.value.toString() });
    };
    Erc20Transaction2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(Erc20Transaction2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example transfer.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "address", {
      /**
       * @returns the contract address of the transfer
       * @example transfer.address // EvmAddress
       */
      get: function() {
        return this._data.address;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "contractAddress", {
      /**
       * @returns the contract address of the transfer
       * @example transfer.contractAddress // EvmAddress
       */
      // Used since /erc20/transfers endpoints that return toAddress under a different name
      get: function() {
        return this._data.address;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "blockHash", {
      /**
       * @returns the block hash of the transfer
       * @example transfer.blockHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
       */
      get: function() {
        return this._data.blockHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "blockNumber", {
      /**
       * @returns the block number of the transfer
       * @example transfer.blockNumber // BigNumber
       */
      get: function() {
        return this._data.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "blockTimestamp", {
      /**
       * @returns the block timestamp of the transfer
       * @example transfer.blockTimestamp // Date
       */
      get: function() {
        return this._data.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "chain", {
      /**
       * @returns the chain of the transfer
       * @example transfer.chain // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "fromAddress", {
      /**
       * @returns the from address of the transfer
       * @example transfer.fromAddress // EvmAddress
       */
      get: function() {
        return this._data.fromAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "fromWallet", {
      /**
       * @returns the from address of the transfer
       * @example transfer.fromWallet // EvmAddress
       */
      // Used since /erc20/transfers endpoints that return toAddress under a different name
      get: function() {
        return this._data.fromAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "toAddress", {
      /**
       * @returns the to address of the transfer
       * @example transfer.toAddress // EvmAddress
       */
      get: function() {
        return this._data.toAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "toWallet", {
      /**
       * @returns the to address of the transfer
       * @example transfer.toWallet // EvmAddress
       */
      // Used since /erc20/transfers endpoints that return toAddress under a different name
      get: function() {
        return this._data.toAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "transactionHash", {
      /**
       * @returns the transaction hash of the transfer
       * @example transfer.transactionHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
       */
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "value", {
      /**
       * @returns the value of the transfer
       * @example transfer.value // BigNumber
       */
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "transactionIndex", {
      /**
       * @returns the transactionIndex of the transfer
       * @example transfer.transactionIndex // 3
       */
      get: function() {
        return this._data.transactionIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "logIndex", {
      /**
       * @returns the logIndex of the transfer
       * @example transfer.logIndex // 2
       */
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "possibleSpam", {
      /**
       * @returns possibility of the token being a spam token
       * @example transfer.possibleSpam // true
       */
      get: function() {
        return this._data.possibleSpam;
      },
      enumerable: false,
      configurable: true
    });
    Erc20Transaction2.parse = function(data) {
      return __assign2(__assign2({}, data), { chain: EvmChain.create(data.chain), address: EvmAddress.create(data.address), blockTimestamp: dateInputToDate(data.blockTimestamp), blockNumber: BigNumber.create(data.blockNumber), toAddress: EvmAddress.create(data.toAddress), fromAddress: EvmAddress.create(data.fromAddress), value: BigNumber.create(data.value), transactionIndex: Number(data.transactionIndex), logIndex: Number(data.logIndex) });
    };
    return Erc20Transaction2;
  }()
);
var EVM_ERC20_DEFAULT_DECIMALS = 18;
var Erc20Value = (
  /** @class */
  function() {
    function Erc20Value2(amount, options) {
      var _this = this;
      var _a, _b, _c;
      this.display = function() {
        if (!_this._token) {
          return "".concat(_this.value);
        }
        return "".concat(_this.value, " ").concat(_this._token.symbol);
      };
      this._value = Erc20Value2.parse({
        amount,
        decimals: (_c = (_a = options === null || options === void 0 ? void 0 : options.decimals) !== null && _a !== void 0 ? _a : (_b = options === null || options === void 0 ? void 0 : options.token) === null || _b === void 0 ? void 0 : _b.decimals) !== null && _c !== void 0 ? _c : EVM_ERC20_DEFAULT_DECIMALS,
        token: options === null || options === void 0 ? void 0 : options.token
      });
      if (options === null || options === void 0 ? void 0 : options.token) {
        this._token = Erc20Token.create(options.token);
      }
    }
    Erc20Value2.create = function(value, options) {
      if (value instanceof Erc20Value2) {
        return value;
      }
      return new Erc20Value2(value, options);
    };
    Erc20Value2.equals = function(valueA, valueB) {
      var erc20ValueA = Erc20Value2.create(valueA);
      var erc20ValueB = Erc20Value2.create(valueB);
      return erc20ValueA.value === erc20ValueB.value;
    };
    Erc20Value2.prototype.equals = function(value) {
      return Erc20Value2.equals(this, value);
    };
    Erc20Value2.prototype.toNumber = function() {
      return +this.value;
    };
    Erc20Value2.prototype.toString = function() {
      return this.value;
    };
    Erc20Value2.prototype.format = function() {
      return this.toString();
    };
    Erc20Value2.prototype.toJSON = function() {
      if (this.token) {
        return { value: this.value, token: this.token.toJSON() };
      }
      return { value: this.value };
    };
    Object.defineProperty(Erc20Value2.prototype, "decimals", {
      /**
       * @returns the token decimals
       * @example value.decimals; // 15
       */
      get: function() {
        return this._value.decimals;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Value2.prototype, "amount", {
      /**
       * @returns the token amount
       * @example value.amount; // BigNumber
       */
      get: function() {
        return this._value.amount;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Value2.prototype, "value", {
      /**
       * @returns the token value
       * @example value.value; // "1000"
       */
      get: function() {
        return this._value.amount.toDecimal(this.decimals);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Value2.prototype, "token", {
      /**
       * @returns the token
       * @example value.token; // Erc20Token
       */
      get: function() {
        var _a;
        return (_a = this._token) !== null && _a !== void 0 ? _a : null;
      },
      enumerable: false,
      configurable: true
    });
    Erc20Value2.parse = function(_a) {
      var amount = _a.amount, decimals = _a.decimals, token = _a.token;
      if (token && token.decimals && +token.decimals !== +decimals) {
        throw new CoreError({
          code: CoreErrorCode.INVALID_DATA,
          message: "Decimals do not match"
        });
      }
      return {
        amount: BigNumber.create(amount),
        decimals: +decimals
      };
    };
    return Erc20Value2;
  }()
);
var unitToDecimals = {
  ether: 18,
  finney: 15,
  szabo: 12,
  gwei: 9,
  mwei: 6,
  kwei: 3,
  wei: 0
};
var EvmNative = (
  /** @class */
  function() {
    function EvmNative2(native, unit) {
      if (unit === void 0) {
        unit = "ether";
      }
      this.rawValue = EvmNative2.parse(native, unit);
    }
    Object.defineProperty(EvmNative2, "ONE_ETH", {
      /**
       * Returns value of one ether.
       *
       * @example EvmNative.ONE_ETH
       */
      get: function() {
        return EvmNative2.create(1, "ether");
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNative2, "ONE_GWEI", {
      /**
       * Returns value of one gwei.
       *
       * @example EvmNative.ONE_GWEI
       */
      get: function() {
        return EvmNative2.create(1, "gwei");
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNative2, "ONE_WEI", {
      /**
       * Returns value of one wei.
       *
       * @example EvmNative.ONE_WEI
       */
      get: function() {
        return EvmNative2.create(1, "wei");
      },
      enumerable: false,
      configurable: true
    });
    EvmNative2.create = function(native, unit) {
      if (native instanceof EvmNative2) {
        return native;
      }
      return new EvmNative2(native, unit);
    };
    EvmNative2.fromJSON = function(json) {
      return EvmNative2.create(json, "wei");
    };
    EvmNative2.parse = function(native, unit) {
      var decimals;
      if (typeof unit === "number") {
        decimals = unit;
      } else {
        if (unitToDecimals[unit] == null) {
          throw new CoreError({
            code: CoreErrorCode.INVALID_ARGUMENT,
            message: "Unit should be a decimal number or valid EvmNativeUnit string"
          });
        }
        decimals = unitToDecimals[unit];
      }
      return BigNumber.fromDecimal(native.toString(), decimals);
    };
    EvmNative2.equals = function(valueA, valueB) {
      var evmNativeA = EvmNative2.create(valueA);
      var evmNativeB = EvmNative2.create(valueB);
      return evmNativeA.rawValue.equals(evmNativeB.rawValue);
    };
    EvmNative2.prototype.equals = function(value) {
      return EvmNative2.equals(this, value);
    };
    EvmNative2.prototype.toString = function() {
      return this.wei;
    };
    EvmNative2.prototype.format = function() {
      return this.toString();
    };
    Object.defineProperty(EvmNative2.prototype, "value", {
      /**
       * @returns the value of the EvmNative as a BigNumber
       * @example `native.value`
       */
      get: function() {
        return this.rawValue;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNative2.prototype, "wei", {
      /**
       * Converts the EvmNative to a string representation of the value in wei.
       * @returns the value of the EvmNative as a string
       * @example `native.wei`
       */
      get: function() {
        return this.value.toString();
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNative2.prototype, "gwei", {
      /**
       * Converts the EvmNative to a string representation of the value in gwei.
       * @returns the value of the EvmNative as a string
       * @example `native.gwei`
       */
      get: function() {
        return this.rawValue.toDecimal(unitToDecimals["gwei"]);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNative2.prototype, "ether", {
      /**
       * Converts the EvmNative to a string representation of the value in ether.
       * @returns the value of the EvmNative as a string
       * @example `native.ether`
       */
      get: function() {
        return this.rawValue.toDecimal(unitToDecimals["ether"]);
      },
      enumerable: false,
      configurable: true
    });
    EvmNative2.prototype.toJSON = function() {
      return this.toString();
    };
    return EvmNative2;
  }()
);
var EvmTransactionLog = (
  /** @class */
  function() {
    function EvmTransactionLog2(value) {
      this._value = EvmTransactionLog2.parse(value);
    }
    EvmTransactionLog2.create = function(value) {
      if (value instanceof EvmTransactionLog2) {
        return value;
      }
      return new EvmTransactionLog2(value);
    };
    EvmTransactionLog2.parse = function(value) {
      return {
        chain: EvmChain.create(value.chain),
        logIndex: maybe(value.logIndex, function(index) {
          return +index;
        }),
        transactionHash: value.transactionHash,
        transactionIndex: maybe(value.transactionIndex),
        data: value.data,
        topics: value.topics,
        blockHash: value.blockHash,
        blockNumber: value.blockNumber,
        blockTimestamp: value.blockTimestamp,
        address: EvmAddress.create(value.address)
      };
    };
    EvmTransactionLog2.prototype.equals = function(value) {
      return value._value.transactionHash === this._value.transactionHash && value._value.address.equals(this._value.address) && value._value.logIndex === this._value.logIndex && value._value.chain.equals(this._value.chain);
    };
    EvmTransactionLog2.prototype.toJSON = function() {
      var value = this._value;
      return __assign2(__assign2({}, value), { address: value.address.toJSON(), chain: value.chain.toJSON() });
    };
    EvmTransactionLog2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmTransactionLog2.prototype, "result", {
      /**
       * Returns the processed Erc20Token.
       *
       * @returns the EvmTransactionLog value
       * @example
       * ```ts
       * log.result;
       *  ```
       */
      get: function() {
        return this._value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionLog2.prototype, "transactionHash", {
      /**
       * @returns the transaction hash of the log.
       *
       * @example
       * ```ts
       * log.transactionHash; // "0xdd9006489e46670e0e85d1fb88823099e7f596b08aeaac023e9da0851f26fdd5"
       * ```
       */
      get: function() {
        return this._value.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionLog2.prototype, "address", {
      /**
       * Returns the address of the log.
       *
       * @example
       * ```ts
       * log.address; // EvmAddress
       * ```
       */
      get: function() {
        return this._value.address;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionLog2.prototype, "chain", {
      /**
       * Returns the chain of the log.
       *
       * @example
       * ```ts
       * log.chain; // EvmChain
       * ```
       */
      get: function() {
        return this._value.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionLog2.prototype, "logIndex", {
      /**
       * @returns the log index of the log.
       *
       * @example
       * ```ts
       * log.logIndex; // 273
       * ```
       */
      get: function() {
        return this._value.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionLog2.prototype, "data", {
      /**
       * @returns the data of the log.
       *
       * @example
       * ```ts
       * log.data; // "0x00000000000000000000000000000000000000000000000de05239bccd4d537400000000000000000000000000024dbc80a9f80e3d5fc0a0ee30e2693781a443"
       * ```
       */
      get: function() {
        return this._value.data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionLog2.prototype, "topics", {
      /**
       * @returns the topics of the log.
       *
       * @example
       * ```ts
       * log.topic0; // ["0x0000000000000000000000000000000000000000000000000000000000000001", "0x0000000000000000000000000000000000000000000000000000000000000002"]
       * ```
       */
      get: function() {
        return this._value.topics;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionLog2.prototype, "blockHash", {
      /**
       * @returns the block hash of the log.
       *
       * @example
       * ```ts
       * log.blockHash; // "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
       * ```
       */
      get: function() {
        return this._value.blockHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionLog2.prototype, "blockNumber", {
      /**
       * @returns the block number of the log.
       *
       * @example
       * ```ts
       * log.blockNumber; // 12386788
       * ```
       */
      get: function() {
        return this._value.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionLog2.prototype, "blockTimestamp", {
      /**
       * @returns the block timestamp of the log.
       *
       * @example
       * ```ts
       * log.blockTimestamp; // "2021-05-07T11:08:35.000Z"
       * ```
       */
      get: function() {
        return this._value.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    return EvmTransactionLog2;
  }()
);
var EvmSignature = (
  /** @class */
  function() {
    function EvmSignature2(data) {
      this._data = EvmSignature2.parse(data);
    }
    EvmSignature2.create = function(data) {
      if (data instanceof EvmSignature2) {
        return data;
      }
      return new EvmSignature2(data);
    };
    EvmSignature2.equals = function(dataA, dataB) {
      var signatureA = EvmSignature2.create(dataA);
      var signatureB = EvmSignature2.create(dataB);
      return signatureA.serialized === signatureB.serialized;
    };
    EvmSignature2.prototype.equals = function(data) {
      return EvmSignature2.equals(this, data);
    };
    Object.defineProperty(EvmSignature2.prototype, "r", {
      get: function() {
        return this._data.r;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmSignature2.prototype, "s", {
      get: function() {
        return this._data.s;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmSignature2.prototype, "v", {
      get: function() {
        return this._data.v;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmSignature2.prototype, "serialized", {
      get: function() {
        return joinSignature(this._data);
      },
      enumerable: false,
      configurable: true
    });
    EvmSignature2.prototype.toJSON = function() {
      return {
        r: this.r,
        s: this.s,
        v: this.v.toString()
      };
    };
    EvmSignature2.prototype.format = function() {
      return this.serialized;
    };
    EvmSignature2.parse = function(data) {
      if (typeof data === "string") {
        return splitSignature(data);
      }
      return splitSignature({
        r: hexlify(BigNumber.create(data.r).toBigInt()),
        s: hexlify(BigNumber.create(data.s).toBigInt()),
        v: +data.v
      });
    };
    return EvmSignature2;
  }()
);
var EvmInternalTransaction = (
  /** @class */
  function() {
    function EvmInternalTransaction2(data) {
      this._data = EvmInternalTransaction2.parse(data);
    }
    EvmInternalTransaction2.create = function(data) {
      if (data instanceof EvmInternalTransaction2) {
        return data;
      }
      return new EvmInternalTransaction2(data);
    };
    EvmInternalTransaction2.equals = function(dataA, dataB) {
      var transactionA = EvmInternalTransaction2.create(dataA);
      var transactionB = EvmInternalTransaction2.create(dataB);
      if (!transactionA._data.chain.equals(transactionB._data.chain)) {
        return false;
      }
      if (transactionA._data.transactionHash !== transactionB._data.transactionHash) {
        return false;
      }
      return true;
    };
    EvmInternalTransaction2.prototype.equals = function(data) {
      return EvmInternalTransaction2.equals(this, data);
    };
    EvmInternalTransaction2.prototype.toJSON = function() {
      var _a, _b, _c, _d, _e, _f, _g;
      var data = this._data;
      return __assign2(__assign2({}, data), { to: (_a = data.to) === null || _a === void 0 ? void 0 : _a.toJSON(), from: (_b = data.from) === null || _b === void 0 ? void 0 : _b.toJSON(), gas: (_c = data.gas) === null || _c === void 0 ? void 0 : _c.toString(), gasUsed: (_d = data.gasUsed) === null || _d === void 0 ? void 0 : _d.toString(), value: (_e = data.value) === null || _e === void 0 ? void 0 : _e.toString(), chain: (_f = data.chain) === null || _f === void 0 ? void 0 : _f.toJSON(), blockNumber: (_g = data.blockNumber) === null || _g === void 0 ? void 0 : _g.toString() });
    };
    EvmInternalTransaction2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmInternalTransaction2.prototype, "result", {
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "transactionHash", {
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "blockNumber", {
      get: function() {
        return this._data.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "blockHash", {
      get: function() {
        return this._data.blockHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "type", {
      get: function() {
        return this._data.type;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "from", {
      get: function() {
        return this._data.from;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "to", {
      get: function() {
        return this._data.to;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "value", {
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "gas", {
      get: function() {
        return this._data.gas;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "gasUsed", {
      get: function() {
        return this._data.gasUsed;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "input", {
      get: function() {
        return this._data.input;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "output", {
      get: function() {
        return this._data.output;
      },
      enumerable: false,
      configurable: true
    });
    EvmInternalTransaction2.parse = function(data) {
      return {
        chain: EvmChain.create(data.chain),
        from: EvmAddress.create(data.from),
        to: EvmAddress.create(data.to),
        transactionHash: data.transactionHash,
        gas: BigNumber.create(data.gas),
        gasUsed: BigNumber.create(data.gasUsed),
        blockNumber: BigNumber.create(data.blockNumber),
        blockHash: data.blockHash,
        input: data.input,
        output: data.output,
        value: BigNumber.create(data.value),
        type: data.type
      };
    };
    return EvmInternalTransaction2;
  }()
);
var EvmTransaction = (
  /** @class */
  function() {
    function EvmTransaction2(data) {
      this._data = EvmTransaction2.parse(data);
    }
    EvmTransaction2.create = function(data) {
      if (data instanceof EvmTransaction2) {
        return data;
      }
      return new EvmTransaction2(data);
    };
    EvmTransaction2.parse = function(data) {
      var _a, _b;
      return {
        from: EvmAddress.create(data.from),
        to: maybe(data.to, function(to) {
          return EvmAddress.create(to);
        }),
        nonce: maybe(data.nonce, BigNumber.create),
        data: maybe(data.data),
        value: maybe(data.value, function(val) {
          return EvmNative.create(val, "wei");
        }),
        hash: data.hash,
        chain: EvmChain.create(data.chain),
        gas: maybe(data.gas, BigNumber.create),
        gasPrice: BigNumber.create(data.gasPrice),
        index: +data.index,
        blockNumber: BigNumber.create(data.blockNumber),
        blockHash: data.blockHash,
        blockTimestamp: dateInputToDate(data.blockTimestamp),
        cumulativeGasUsed: BigNumber.create(data.cumulativeGasUsed),
        gasUsed: BigNumber.create(data.gasUsed),
        contractAddress: maybe(data.contractAddress, function(address) {
          return EvmAddress.create(address);
        }),
        receiptRoot: maybe(data.receiptRoot),
        receiptStatus: maybe(data.receiptStatus, function(status) {
          return +status;
        }),
        logs: ((_a = data.logs) !== null && _a !== void 0 ? _a : []).map(function(log) {
          return EvmTransactionLog.create(log);
        }),
        internalTransactions: ((_b = data.internalTransactions) !== null && _b !== void 0 ? _b : []).map(function(transaction) {
          return EvmInternalTransaction.create(transaction);
        }),
        signature: maybe(data.signature, EvmSignature.create)
      };
    };
    EvmTransaction2.equals = function(dataA, dataB) {
      var transactionA = EvmTransaction2.create(dataA);
      var transactionB = EvmTransaction2.create(dataB);
      if (!transactionA._data.chain.equals(transactionB._data.chain)) {
        return false;
      }
      if (transactionA._data.hash !== transactionB._data.hash) {
        return false;
      }
      return true;
    };
    EvmTransaction2.prototype.equals = function(data) {
      return EvmTransaction2.equals(this, data);
    };
    EvmTransaction2.prototype.toJSON = function() {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
      var data = this._data;
      return __assign2(__assign2({}, data), { to: (_a = data.to) === null || _a === void 0 ? void 0 : _a.toJSON(), from: (_b = data.from) === null || _b === void 0 ? void 0 : _b.toJSON(), nonce: (_c = data.nonce) === null || _c === void 0 ? void 0 : _c.toString(), gas: (_d = data.gas) === null || _d === void 0 ? void 0 : _d.toString(), gasPrice: (_e = data.gasPrice) === null || _e === void 0 ? void 0 : _e.toString(), gasUsed: (_f = data.gasUsed) === null || _f === void 0 ? void 0 : _f.toString(), cumulativeGasUsed: (_g = data.cumulativeGasUsed) === null || _g === void 0 ? void 0 : _g.toString(), value: (_h = data.value) === null || _h === void 0 ? void 0 : _h.toString(), chain: (_j = data.chain) === null || _j === void 0 ? void 0 : _j.toJSON(), contractAddress: (_k = data.contractAddress) === null || _k === void 0 ? void 0 : _k.toJSON(), logs: data.logs.map(function(log) {
        return log.toJSON();
      }), internalTransactions: data.internalTransactions.map(function(transaction) {
        return transaction.toJSON();
      }), signature: (_l = data.signature) === null || _l === void 0 ? void 0 : _l.toJSON(), blockNumber: (_m = data.blockNumber) === null || _m === void 0 ? void 0 : _m.toString(), blockTimestamp: data.blockTimestamp.toString() });
    };
    EvmTransaction2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmTransaction2.prototype, "result", {
      /**
       * @returns the transaction
       * @example
       * ```
       * transaction.result
       * ```
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "to", {
      /**
       * @returns the transaction to address
       * @example
       * ```
       * transaction.to // EvmAddress
       * ```
       */
      get: function() {
        return this._data.to;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "from", {
      /**
       * @returns the transaction from address
       * @example
       * ```
       * transaction.address // EvmAddress
       * ```
       */
      get: function() {
        return this._data.from;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "nonce", {
      /**
       * @returns the transaction nonce
       * @example
       * ```
       * transaction.nonce // 326595425
       * ```
       */
      get: function() {
        return this._data.nonce;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "gas", {
      /**
       * @returns the transaction gas
       * @example
       * ```
       * transaction.gas // 6721975
       * ```
       */
      get: function() {
        return this._data.gas;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "gasPrice", {
      /**
       * @returns the transaction gas price
       * @example
       * ```
       * transaction.gasPrice // 20000000000
       * ```
       */
      get: function() {
        return this._data.gasPrice;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "gasUsed", {
      /**
       * @returns the transaction gas used
       * @example
       * ```
       * transaction.gasUsed // 1340925
       * ```
       */
      get: function() {
        return this._data.gasUsed;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "cumulativeGasUsed", {
      /**
       * @returns the transaction cumulative gas used
       * @example
       * ```
       * transaction.cumulativeGasUsed // 1340925
       * ```
       */
      get: function() {
        return this._data.cumulativeGasUsed;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "blockNumber", {
      /**
       * @returns the transaction block number
       * @example
       * ```
       * transaction.blockNumber // 12526958
       * ```
       */
      get: function() {
        return this._data.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "value", {
      /**
       * @returns the transaction value
       * @example
       * ```
       * transaction.value // EvmNative
       * ```
       */
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "chain", {
      /**
       * @returns the transaction chain
       * @example
       * ```
       * transaction.chain // EvmChain
       * ```
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "contractAddress", {
      /**
       * @returns the transaction contract address
       * @example
       * ```
       * transaction.contractAddress // EvmAddress
       * ```
       */
      get: function() {
        return this._data.contractAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "internalTransactions", {
      /**
       * @returns the internal transactions
       * @example
       * ```
       * transaction.logs // EvmInternalTransaction[]
       * ```
       */
      get: function() {
        return this._data.internalTransactions;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "logs", {
      /**
       * @returns the transaction logs
       * @example
       * ```
       * transaction.logs // EvmTransactionLog[]
       * ```
       */
      get: function() {
        return this._data.logs;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "receiptRoot", {
      /**
       * @returns the transaction receipt root
       * @example
       * ```
       * transaction.receiptRoot // string
       * ```
       */
      get: function() {
        return this._data.receiptRoot;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "receiptStatus", {
      /**
       * @returns the transaction receipt status
       * @example
       * ```
       * transaction.receiptStatus // 1
       * ```
       */
      get: function() {
        return this._data.receiptStatus;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "data", {
      /**
       * @returns the transaction data
       * @example
       * ```
       * transaction.data // 0x000000000000000000000000000000000000000000000000000000000000002
       * ```
       */
      get: function() {
        return this._data.data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "hash", {
      /**
       * @returns the transaction hash
       * @example
       * ```
       * transaction.hash // 0x057Ec652A4F150f7FF94f089A38008f49a0DF88e
       * ```
       */
      get: function() {
        return this._data.hash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "blockHash", {
      /**
       * @returns the transaction black hash
       * @example
       * ```
       * transaction.blockHash // 0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86
       * ```
       */
      get: function() {
        return this._data.blockHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "blockTimestamp", {
      /**
       * @returns the transaction block timestamp
       * @example
       * ```
       * transaction.blockTimestamp // Date
       * ```
       */
      get: function() {
        return this._data.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "signature", {
      /**
       * @returns the signature (if available)
       * @example
       * ```
       * transaction.signature // EvmSignature
       * ```
       */
      get: function() {
        return this._data.signature;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "index", {
      /**
       * @returns the index
       * @example
       * ```
       * transaction.index // 1
       * ```
       */
      get: function() {
        return this._data.index;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "v", {
      get: function() {
        var _a;
        return (_a = this._data.signature) === null || _a === void 0 ? void 0 : _a.v;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "r", {
      get: function() {
        var _a;
        return (_a = this._data.signature) === null || _a === void 0 ? void 0 : _a.r;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "s", {
      get: function() {
        var _a;
        return (_a = this._data.signature) === null || _a === void 0 ? void 0 : _a.s;
      },
      enumerable: false,
      configurable: true
    });
    return EvmTransaction2;
  }()
);
var EvmSimpleBlock = (
  /** @class */
  function() {
    function EvmSimpleBlock2(data) {
      this._data = EvmSimpleBlock2.parse(data);
    }
    EvmSimpleBlock2.create = function(data) {
      if (data instanceof EvmSimpleBlock2) {
        return data;
      }
      return new EvmSimpleBlock2(data);
    };
    EvmSimpleBlock2.equals = function(dataA, dataB) {
      var blockA = EvmSimpleBlock2.create(dataA);
      var blockB = EvmSimpleBlock2.create(dataB);
      if (!blockA.chain.equals(blockB.chain)) {
        return false;
      }
      if (blockA.hash !== blockB.hash) {
        return false;
      }
      if (!blockA.number.equals(blockB.number)) {
        return false;
      }
      return true;
    };
    EvmSimpleBlock2.prototype.equals = function(data) {
      return EvmSimpleBlock2.equals(this, data);
    };
    EvmSimpleBlock2.prototype.toJSON = function() {
      var data = this._data;
      return __assign2(__assign2({}, data), { number: data.number.toString(), chain: data.chain.toJSON() });
    };
    EvmSimpleBlock2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmSimpleBlock2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example block.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmSimpleBlock2.prototype, "number", {
      /**
       * @returns the block number.
       * @example block.number // BigNumber
       */
      get: function() {
        return this._data.number;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmSimpleBlock2.prototype, "hash", {
      /**
       * @returns the block hash.
       * @example block.hash // "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
       */
      get: function() {
        return this._data.hash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmSimpleBlock2.prototype, "timestamp", {
      /**
       * @returns the block timestamp.
       * @example block.timestamp // Date
       */
      get: function() {
        return this._data.timestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmSimpleBlock2.prototype, "chain", {
      /**
       * @returns the block chain.
       * @example block.chain // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    EvmSimpleBlock2.parse = function(data) {
      return {
        timestamp: dateInputToDate(data.timestamp),
        number: BigNumber.create(data.number),
        chain: EvmChain.create(data.chain),
        hash: data.hash
      };
    };
    return EvmSimpleBlock2;
  }()
);
var EvmBlock = (
  /** @class */
  function() {
    function EvmBlock2(data) {
      this._data = EvmBlock2.parse(data);
    }
    EvmBlock2.create = function(data) {
      if (data instanceof EvmBlock2) {
        return data;
      }
      return new EvmBlock2(data);
    };
    EvmBlock2.equals = function(dataA, dataB) {
      var blockA = EvmSimpleBlock.create(dataA);
      var blockB = EvmSimpleBlock.create(dataB);
      if (!blockA.chain.equals(blockB.chain)) {
        return false;
      }
      if (blockA.hash !== blockB.hash) {
        return false;
      }
      return true;
    };
    EvmBlock2.prototype.equals = function(data) {
      return EvmBlock2.equals(this, data);
    };
    EvmBlock2.prototype.toJSON = function() {
      var data = this._data;
      return __assign2(__assign2({}, data), { number: data.number.toString(), difficulty: data.difficulty.toString(), totalDifficulty: data.totalDifficulty.toString(), size: data.size.toString(), gasLimit: data.gasLimit.toString(), gasUsed: data.gasUsed.toString(), chain: data.chain.toJSON(), miner: data.miner.toJSON(), transactions: data.transactions.map(function(transaction) {
        return transaction.toJSON();
      }) });
    };
    EvmBlock2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmBlock2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example block.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "number", {
      /**
       * @returns the block number.
       * @example block.number // BigNumber
       */
      get: function() {
        return this._data.number;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "hash", {
      /**
       * @returns the block hash.
       * @example block.hash // "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
       */
      get: function() {
        return this._data.hash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "timestamp", {
      /**
       * @returns the block timestamp.
       * @example block.timestamp // Date
       */
      get: function() {
        return this._data.timestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "miner", {
      /**
       * @returns the block miner.
       * @example block.miner // EvmAddress
       */
      get: function() {
        return this._data.miner;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "difficulty", {
      /**
       * @returns the block difficulty.
       * @example block.difficulty // BigNumber
       */
      get: function() {
        return this._data.difficulty;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "totalDifficulty", {
      /**
       * @returns the block total difficulty.
       * @example block.totalDifficulty // BigNumber
       */
      get: function() {
        return this._data.totalDifficulty;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "size", {
      /**
       * @returns the block size.
       * @example block.size // BigNumber
       */
      get: function() {
        return this._data.size;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "gasLimit", {
      /**
       * @returns the block gas limit.
       * @example block.gasLimit // BigNumber
       */
      get: function() {
        return this._data.gasLimit;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "gasUsed", {
      /**
       * @returns the block gas used.
       * @example block.gasUsed // BigNumber
       */
      get: function() {
        return this._data.gasUsed;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "transactions", {
      /**
       * @returns the block transactions.
       * @example block.transactions // EvmTransaction[]
       */
      get: function() {
        return this._data.transactions;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "chain", {
      /**
       * @returns the block chain.
       * @example block.chain // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "transactionCount", {
      /**
       * @returns the block transaction count.
       * @example block.transactionCount // 252
       */
      get: function() {
        return this._data.transactionCount;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "transactionsRoot", {
      /**
       * @returns the block transactions root.
       * @example block.transactionsRoot // "0xe4c7bf3aff7ad07f9e80d57f7189f0252592fee6321c2a9bd9b09b6ce0690d27"
       */
      get: function() {
        return this._data.transactionsRoot;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "stateRoot", {
      /**
       * @returns the block state root.
       * @example block.stateRoot // "0x49e3bfe7b618e27fde8fa08884803a8458b502c6534af69873a3cc926a7c724b"
       */
      get: function() {
        return this._data.stateRoot;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "receiptsRoot", {
      /**
       * @returns the block receipts root.
       * @example block.receiptsRoot // "0x7cf43d7e837284f036cf92c56973f5e27bdd253ca46168fa195a6b07fa719f23"
       */
      get: function() {
        return this._data.receiptsRoot;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "logsBloom", {
      /**
       * @returns the block logs bloom.
       * @example block.logsBloom // "0xdde5fc46c5d8bcbd58207bc9f267bf43298e23791a326ff02661e99790da9996b3e0dd912c0b8202d389d282c56e4d11eb2dec4898a32b6b165f1f4cae6aa0079498eab50293f3b8defbf6af11bb75f0408a563ddfc26a3323d1ff5f9849e95d5f034d88a757ddea032c75c00708c9ff34d2207f997cc7d93fd1fa160a6bfaf62a54e31f9fe67ab95752106ba9d185bfdc9b6dc3e17427f844ee74e5c09b17b83ad6e8fc7360f5c7c3e4e1939e77a6374bee57d1fa6b2322b11ad56ad0398302de9b26d6fbfe414aa416bff141fad9d4af6aea19322e47595e342cd377403f417dfd396ab5f151095a5535f51cbc34a40ce9648927b7d1d72ab9daf253e31daf"
       */
      get: function() {
        return this._data.logsBloom;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "extraData", {
      /**
       * @returns the block extra data.
       * @example block.extraData // "0x65746865726d696e652d6575726f70652d7765737433"
       */
      get: function() {
        return this._data.extraData;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "parentHash", {
      /**
       * @returns the block parent hash.
       * @example block.parentHash // "0x011d1fc45839de975cc55d758943f9f1d204f80a90eb631f3bf064b80d53e045"
       */
      get: function() {
        return this._data.parentHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "sha3Uncles", {
      /**
       * @returns the block sha3Uncles.
       * @example block.sha3Uncles // "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347"
       */
      get: function() {
        return this._data.sha3Uncles;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "nonce", {
      /**
       * @returns the block nonce.
       * @example block.nonce // "0xedeb2d8fd2b2bdec"
       */
      get: function() {
        return this._data.nonce;
      },
      enumerable: false,
      configurable: true
    });
    EvmBlock2.parse = function(data) {
      return __assign2(__assign2({}, data), { miner: EvmAddress.create(data.miner), timestamp: dateInputToDate(data.timestamp), number: BigNumber.create(data.number), difficulty: BigNumber.create(data.difficulty), totalDifficulty: BigNumber.create(data.totalDifficulty), size: BigNumber.create(data.size), gasLimit: BigNumber.create(data.gasLimit), gasUsed: BigNumber.create(data.gasUsed), transactions: data.transactions.map(function(transaction) {
        return EvmTransaction.create(transaction);
      }), chain: EvmChain.create(data.chain), transactionCount: +data.transactionCount });
    };
    return EvmBlock2;
  }()
);
var EvmBlockDate = (
  /** @class */
  function() {
    function EvmBlockDate2(data) {
      this.data = data;
    }
    EvmBlockDate2.create = function(data) {
      if (data instanceof EvmBlockDate2) {
        return data;
      }
      return new EvmBlockDate2(EvmBlockDate2.parse(data));
    };
    EvmBlockDate2.parse = function(input) {
      return {
        block: input.block,
        date: new Date(input.date),
        timestamp: input.timestamp,
        // TODO: the swagger currently has wrong type for `block_timestamp`, should be `string`.
        blockTimestamp: String(input.block_timestamp),
        hash: input.hash,
        parentHash: input.parent_hash
      };
    };
    Object.defineProperty(EvmBlockDate2.prototype, "block", {
      /**
       * @description The block number.
       * @example `9193266`
       */
      get: function() {
        return this.data.block;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlockDate2.prototype, "date", {
      /**
       * @description The date of the block.
       * @example `2020-01-01T00:00:00+00:00`
       */
      get: function() {
        return this.data.date;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlockDate2.prototype, "timestamp", {
      /**
       * @description The timestamp of the block
       * @example `1577836811`
       */
      get: function() {
        return this.data.timestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlockDate2.prototype, "blockTimestamp", {
      /**
       * @description The timestamp of the block
       * @example `2022-01-03T22:59:39.000Z`
       */
      get: function() {
        return this.data.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlockDate2.prototype, "block_timestamp", {
      /**
       * @deprecated Use `blockTimestamp` instead.
       */
      get: function() {
        return this.data.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlockDate2.prototype, "hash", {
      /**
       * @description The block hash.
       * @example `0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171`
       */
      get: function() {
        return this.data.hash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlockDate2.prototype, "block_hash", {
      /**
       * @deprecated Use `hash` instead.
       */
      get: function() {
        return this.data.hash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlockDate2.prototype, "parentHash", {
      /**
       * @description The block hash of the parent block.
       * @example `0x011d1fc45839de975cc55d758943f9f1d204f80a90eb631f3bf064b80d53e045`
       */
      get: function() {
        return this.data.parentHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlockDate2.prototype, "parent_hash", {
      /**
       * @deprecated Use `parentHash` instead.
       */
      get: function() {
        return this.data.parentHash;
      },
      enumerable: false,
      configurable: true
    });
    return EvmBlockDate2;
  }()
);
var EvmEvent = (
  /** @class */
  function() {
    function EvmEvent2(_data) {
      this._data = _data;
    }
    EvmEvent2.create = function(data) {
      if (data instanceof EvmEvent2) {
        return data;
      }
      return new EvmEvent2(EvmEvent2.parse(data));
    };
    EvmEvent2.equals = function(dataA, dataB) {
      var eventA = EvmEvent2.create(dataA);
      var eventB = EvmEvent2.create(dataB);
      if (!eventA._data.chain.equals(eventB._data.chain)) {
        return false;
      }
      if (!eventA._data.blockNumber.equals(eventB._data.blockNumber)) {
        return false;
      }
      if (!eventA._data.address.equals(eventB._data.address)) {
        return false;
      }
      if (eventA._data.data !== eventB._data.data) {
        return false;
      }
      return true;
    };
    EvmEvent2.prototype.equals = function(data) {
      return EvmEvent2.equals(this, data);
    };
    EvmEvent2.prototype.toJSON = function() {
      var _a, _b, _c;
      var data = this._data;
      return __assign2(__assign2({}, data), { chain: data.chain.toJSON(), address: data.address.toJSON(), blockNumber: data.blockNumber.toString(), data: {
        from: (_a = data.data.from) === null || _a === void 0 ? void 0 : _a.toJSON(),
        to: (_b = data.data.to) === null || _b === void 0 ? void 0 : _b.toJSON(),
        value: (_c = data.data.value) === null || _c === void 0 ? void 0 : _c.format()
      } });
    };
    EvmEvent2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmEvent2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example event.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmEvent2.prototype, "chain", {
      /**
       * @returns the event chain
       * @example event.chain // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmEvent2.prototype, "address", {
      /**
       * @returns the event address
       * @example event.address // EvmAddress
       */
      get: function() {
        return this._data.address;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmEvent2.prototype, "blockNumber", {
      /**
       * @returns the event block number
       * @example event.blockNumber // BigNumber
       */
      get: function() {
        return this._data.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmEvent2.prototype, "blockTimestamp", {
      /**
       * @returns the event block timestamp
       * @example event.blockTimestamp // Date
       */
      get: function() {
        return this._data.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmEvent2.prototype, "data", {
      /**
       * @returns the event data with from address, to address and value
       * @example event.data
       */
      get: function() {
        return this._data.data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmEvent2.prototype, "transactionHash", {
      /**
       * @returns the event block trannsaciton hash
       * @example event.transactionHash // "0xc9f62f4f6ab505a96c1a84ec2899c6bfd86245ef1effaa689fc997798be763d5"
       */
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmEvent2.prototype, "blockHash", {
      /**
       * @returns the event block hash
       * @example event.blockHash // "0xc9f62f4f6ab505a96c1a84ec2899c6bfd86245ef1effaa689fc997798be763d5"
       */
      get: function() {
        return this._data.blockHash;
      },
      enumerable: false,
      configurable: true
    });
    EvmEvent2.parse = function(data) {
      return __assign2(__assign2({}, data), { chain: EvmChain.create(data.chain), address: EvmAddress.create(data.address), blockNumber: BigNumber.create(data.blockNumber), blockTimestamp: dateInputToDate(data.blockTimestamp), data: {
        from: maybe(data.data.from, function(from) {
          return EvmAddress.create(from);
        }),
        to: maybe(data.data.to, function(to) {
          return EvmAddress.create(to);
        }),
        value: maybe(data.data.value, EvmNative.create)
      } });
    };
    return EvmEvent2;
  }()
);
var EvmNftMedia = (
  /** @class */
  function() {
    function EvmNftMedia2(data) {
      this._data = EvmNftMedia2.parse(data);
    }
    EvmNftMedia2.create = function(data) {
      if (data instanceof EvmNftMedia2) {
        return data;
      }
      return new EvmNftMedia2(data);
    };
    EvmNftMedia2.equals = function(dataA, dataB) {
      var mediaA = EvmNftMedia2.create(dataA);
      var mediaB = EvmNftMedia2.create(dataB);
      if (!mediaA.chain.equals(mediaB.chain)) {
        return false;
      }
      if (mediaA.originalMediaUrl !== mediaB.originalMediaUrl) {
        return false;
      }
      return true;
    };
    EvmNftMedia2.prototype.equals = function(data) {
      return EvmNftMedia2.equals(this, data);
    };
    EvmNftMedia2.prototype.toJSON = function() {
      var data = this._data;
      return __assign2(__assign2({}, data), { chain: data.chain.toJSON() });
    };
    EvmNftMedia2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmNftMedia2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example media.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMedia2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMedia2.prototype, "status", {
      get: function() {
        return this._data.status;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMedia2.prototype, "updatedAt", {
      get: function() {
        return this._data.updatedAt;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMedia2.prototype, "originalMediaUrl", {
      get: function() {
        return this._data.originalMediaUrl;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMedia2.prototype, "category", {
      get: function() {
        return this._data.category;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMedia2.prototype, "mimetype", {
      get: function() {
        return this._data.mimetype;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMedia2.prototype, "parentHash", {
      get: function() {
        return this._data.parentHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMedia2.prototype, "mediaCollection", {
      get: function() {
        return this._data.mediaCollection;
      },
      enumerable: false,
      configurable: true
    });
    EvmNftMedia2.parse = function(data) {
      return __assign2(__assign2({}, data), { chain: EvmChain.create(data.chain), updatedAt: maybe(data.updatedAt, function(date) {
        return dateInputToDate(date);
      }) });
    };
    return EvmNftMedia2;
  }()
);
var EvmNft = (
  /** @class */
  function() {
    function EvmNft2(data) {
      this._data = EvmNft2.parse(data);
    }
    EvmNft2.create = function(data) {
      if (data instanceof EvmNft2) {
        return data;
      }
      return new EvmNft2(data);
    };
    EvmNft2.equals = function(valueA, valueB) {
      var nftA = EvmNft2.create(valueA);
      var nftB = EvmNft2.create(valueB);
      if (!nftA._data.chain.equals(nftB._data.chain)) {
        return false;
      }
      if (!nftA._data.tokenAddress.equals(nftB._data.tokenAddress)) {
        return false;
      }
      if (nftA._data.ownerOf && nftB._data.ownerOf && !nftA._data.ownerOf.equals(nftB._data.ownerOf)) {
        return false;
      }
      if (nftA._data.ownerOf && !nftB._data.ownerOf || !nftA._data.ownerOf && nftB._data.ownerOf) {
        return false;
      }
      return true;
    };
    EvmNft2.prototype.equals = function(value) {
      return EvmNft2.equals(this, value);
    };
    EvmNft2.prototype.toJSON = function() {
      var _b, _c, _d, _e;
      var data = this._data;
      return __assign2(__assign2({}, data), { tokenAddress: data.tokenAddress.toJSON(), chain: data.chain.toJSON(), ownerOf: (_b = data.ownerOf) === null || _b === void 0 ? void 0 : _b.toJSON(), blockNumberMinted: (_c = data.blockNumberMinted) === null || _c === void 0 ? void 0 : _c.toString(), blockNumber: (_d = data.blockNumber) === null || _d === void 0 ? void 0 : _d.toString(), media: (_e = data.media) === null || _e === void 0 ? void 0 : _e.format() });
    };
    EvmNft2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmNft2.prototype, "result", {
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "chain", {
      /**
       * @returns the NFT chain
       * @example
       * ```
       * nft.chain // EvmChain
       * ```
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "contractType", {
      /**
       * @returns the NFT contract type
       * @example
       * ```
       * nft.contractType // "ERC721" | "ERC1155"
       * ```
       */
      get: function() {
        return this._data.contractType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "tokenAddress", {
      /**
       * @returns the NFT token address
       * @example
       * ```
       * nft.tokenAddress // EvmAddress
       * ```
       */
      get: function() {
        return this._data.tokenAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "metadata", {
      /**
       * @returns the NFT metadata
       * @example
       * ```ts
       * nft.metadata
       * // {
       * // name: 'Pancake',
       * // description: 'The dessert series 1',
       * // image: 'ipfs://QmNQFXCZ6LGzvpMW9Q5PWbCrEnLknQrPwr2r8pbQAgzQ9A/4863BD6B-6C92-4B96-BF80-8020B2F7C3A5.jpeg',
       * // }
       * ```
       */
      get: function() {
        return this._data.metadata;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "tokenUri", {
      /**
       * @returns the NFT token URI
       * @example
       * ```
       * nft.tokenUri // "https://gateway.moralisipfs.com/ipfs/QmajSqgxY3cWBgBeRm38vasJAcTit1kp5EwqVHxszJYgUC/728.json"
       * ```
       */
      get: function() {
        return this._data.tokenUri;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "tokenHash", {
      /**
       * @returns the NFT token hash
       * @example
       * ```
       * nft.tokenHash // "QmajSqgxY3cWBgBeRm38vasJAcTit1kp5EwqVHxszJYgUC"
       * ```
       */
      get: function() {
        return this._data.tokenHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "name", {
      /**
       * @returns the NFT name
       * @example
       * ```
       * nft.name // "Tether USD"
       * ```
       */
      get: function() {
        return this._data.name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "symbol", {
      /**
       * @returns the NFT symbol
       * @example
       * ```
       * nft.symbol // "USDT"
       * ```
       */
      get: function() {
        return this._data.symbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "ownerOf", {
      /**
       * @returns the NFT owner of address
       * @example
       * ```
       * nft.ownerOf // EvmAddress
       * ```
       */
      get: function() {
        return this._data.ownerOf;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "blockNumberMinted", {
      /**
       * @returns the NFT block number minted from
       * @example
       * ```
       * nft.blockNumberMinted // BigNumber
       * ```
       */
      get: function() {
        return this._data.blockNumberMinted;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "blockNumber", {
      /**
       * @returns the NFT block number
       * @example
       * ```
       * nft.blockNumber // BigNumber
       * ```
       */
      get: function() {
        return this._data.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "lastMetadataSync", {
      /**
       * @returns the NFT latest metadata sync date
       * @example
       * ```
       * nft.latestMetadataSync // Date
       * ```
       */
      get: function() {
        return this._data.lastMetadataSync;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "lastTokenUriSync", {
      /**
       * @returns the NFT latest token URI sync date
       * @example
       * ```
       * nft.latestTokenUriSync // Date
       * ```
       */
      get: function() {
        return this._data.lastTokenUriSync;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "amount", {
      /**
       * @returns the NFT amount
       * @example
       * ```
       * nft.amount // 2
       * ```
       */
      get: function() {
        return this._data.amount;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "tokenId", {
      /**
       * @returns the token id
       * @example
       * ```
       * nft.tokenId // '1234'
       * ```
       */
      get: function() {
        return this._data.tokenId;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "media", {
      /**
       * @returns the processed media of the NFT
       * @example
       * ```
       * nft.media // EvmNftMedia
       * ```
       */
      get: function() {
        return this._data.media;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "possibleSpam", {
      /**
       * @returns possibility of the token being a spam token
       * @example transfer.possibleSpam // true
       */
      get: function() {
        return this._data.possibleSpam;
      },
      enumerable: false,
      configurable: true
    });
    var _a;
    _a = EvmNft2;
    EvmNft2.parse = function(data) {
      return __assign2(__assign2({}, data), { chain: EvmChain.create(data.chain), contractType: maybe(data.contractType), tokenAddress: EvmAddress.create(data.tokenAddress), metadata: maybe(data.metadata, _a.validateMetadata), tokenUri: maybe(data.tokenUri), tokenHash: maybe(data.tokenHash), name: maybe(data.name), symbol: maybe(data.symbol), ownerOf: maybe(data.ownerOf, function(ownerOf) {
        return EvmAddress.create(ownerOf);
      }), blockNumberMinted: maybe(data.blockNumberMinted, BigNumber.create), blockNumber: maybe(data.blockNumber, BigNumber.create), lastMetadataSync: maybe(data.lastMetadataSync, dateInputToDate), lastTokenUriSync: maybe(data.lastTokenUriSync, dateInputToDate), amount: maybe(data.amount, function(value) {
        return +value;
      }), media: maybe(data.media, function(value) {
        return EvmNftMedia.create(value);
      }) });
    };
    EvmNft2.validateMetadata = function(value) {
      try {
        return JSON.parse(value);
      } catch (error) {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Invalid metadata provided, cannot parse the value to JSON"
        });
      }
    };
    return EvmNft2;
  }()
);
var EvmNftCollection = (
  /** @class */
  function() {
    function EvmNftCollection2(data) {
      this._data = EvmNftCollection2.parse(data);
    }
    EvmNftCollection2.create = function(data) {
      if (data instanceof EvmNftCollection2) {
        return data;
      }
      return new EvmNftCollection2(data);
    };
    EvmNftCollection2.equals = function(dataA, dataB) {
      var collectionA = EvmNftCollection2.create(dataA);
      var collectionB = EvmNftCollection2.create(dataB);
      if (!collectionA.chain.equals(collectionB.chain)) {
        return false;
      }
      if (!collectionA.tokenAddress.equals(collectionB.tokenAddress)) {
        return false;
      }
      return true;
    };
    EvmNftCollection2.prototype.equals = function(data) {
      return EvmNftCollection2.equals(this, data);
    };
    EvmNftCollection2.prototype.toJSON = function() {
      var data = this._data;
      return __assign2(__assign2({}, data), { chain: data.chain.toJSON(), tokenAddress: data.tokenAddress.toJSON() });
    };
    EvmNftCollection2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmNftCollection2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example collection.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftCollection2.prototype, "chain", {
      /**
       * @returns the chain where the collection is deployed.
       * @example collection.chain // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftCollection2.prototype, "tokenAddress", {
      /**
       * @returns the token address of collection.
       * @example collection.tokenAddress // EvmAddress
       */
      get: function() {
        return this._data.tokenAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftCollection2.prototype, "contractType", {
      /**
       * @returns the token type of collection.
       * @example collection.tokenAddress // 'ERC721'
       */
      get: function() {
        return this._data.contractType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftCollection2.prototype, "name", {
      /**
       * @returns the token name of collection.
       * @example collection.tokenAddress // 'Test NFT'
       */
      get: function() {
        return this._data.name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftCollection2.prototype, "symbol", {
      /**
       * @returns the token symbol of collection.
       * @example collection.symbol // 'TEST'
       */
      get: function() {
        return this._data.symbol;
      },
      enumerable: false,
      configurable: true
    });
    EvmNftCollection2.parse = function(data) {
      return __assign2(__assign2({}, data), { tokenAddress: EvmAddress.create(data.tokenAddress), chain: EvmChain.create(data.chain), contractType: maybe(data.contractType) });
    };
    return EvmNftCollection2;
  }()
);
var EvmNftMetadata = (
  /** @class */
  function() {
    function EvmNftMetadata2(data) {
      this._data = EvmNftMetadata2.parse(data);
    }
    EvmNftMetadata2.create = function(data) {
      if (data instanceof EvmNftMetadata2) {
        return data;
      }
      return new EvmNftMetadata2(data);
    };
    EvmNftMetadata2.equals = function(dataA, dataB) {
      var metadataA = EvmNftMetadata2.create(dataA);
      var metadataB = EvmNftMetadata2.create(dataB);
      if (!metadataA._data.chain.equals(metadataB._data.chain)) {
        return false;
      }
      if (!metadataA._data.tokenAddress.equals(metadataB._data.tokenAddress)) {
        return false;
      }
      return true;
    };
    EvmNftMetadata2.prototype.equals = function(data) {
      return EvmNftMetadata2.equals(this, data);
    };
    EvmNftMetadata2.prototype.toJSON = function() {
      var data = this._data;
      return __assign2(__assign2({}, data), { chain: data.chain.toJSON(), tokenAddress: data.tokenAddress.toJSON() });
    };
    EvmNftMetadata2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmNftMetadata2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example metadata.result;
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMetadata2.prototype, "name", {
      /**
       * @returns the name in the metadata.
       * @example metadata.name; // "Baby Ape Mutant Club"
       */
      get: function() {
        return this._data.name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMetadata2.prototype, "symbol", {
      /**
       * @returns the symbol in the metadata.
       * @example metadata.symbol; // "BAMC"
       */
      get: function() {
        return this._data.symbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMetadata2.prototype, "contractType", {
      /**
       * @returns the contract type of the NFT.
       * @example metadata.contractType; // "ERC721"
       */
      get: function() {
        return this._data.contractType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMetadata2.prototype, "chain", {
      /**
       * @returns the chain in the metadata.
       * @example metadata.chain; // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMetadata2.prototype, "tokenAddress", {
      /**
       * @returns the token address in the metadata.
       * @example metadata.tokenAddress; // EvmAddress
       */
      get: function() {
        return this._data.tokenAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMetadata2.prototype, "syncedAt", {
      /**
       * @returns the date the metadata was synced.
       * @example metadata.syncedAt; // Date
       */
      get: function() {
        return this._data.syncedAt;
      },
      enumerable: false,
      configurable: true
    });
    EvmNftMetadata2.parse = function(data) {
      return __assign2(__assign2({}, data), { chain: EvmChain.create(data.chain), tokenAddress: EvmAddress.create(data.tokenAddress), syncedAt: maybe(data.syncedAt, dateInputToDate) });
    };
    return EvmNftMetadata2;
  }()
);
var EvmNftTransfer = (
  /** @class */
  function() {
    function EvmNftTransfer2(data) {
      this._data = EvmNftTransfer2.parse(data);
    }
    EvmNftTransfer2.create = function(data) {
      if (data instanceof EvmNftTransfer2) {
        return data;
      }
      return new EvmNftTransfer2(data);
    };
    EvmNftTransfer2.equals = function(dataA, dataB) {
      var transferA = EvmNftTransfer2.create(dataA);
      var transferB = EvmNftTransfer2.create(dataB);
      if (!transferA.chain.equals(transferB.chain)) {
        return false;
      }
      if (transferA.blockHash !== transferB.blockHash) {
        return false;
      }
      if (transferA.tokenId !== transferB.tokenId) {
        return false;
      }
      if (transferA.logIndex !== transferB.logIndex) {
        return false;
      }
      return true;
    };
    EvmNftTransfer2.prototype.equals = function(data) {
      return EvmNftTransfer2.equals(this, data);
    };
    EvmNftTransfer2.prototype.toJSON = function() {
      var data = this._data;
      return __assign2(__assign2({}, data), { chain: data.chain.toJSON(), fromAddress: data.fromAddress ? data.fromAddress.toJSON() : void 0, toAddress: data.toAddress.toJSON(), tokenAddress: data.tokenAddress.toJSON(), value: data.value ? data.value.format() : void 0, operator: data.operator ? data.operator.toJSON() : void 0, blockNumber: data.blockNumber.toString() });
    };
    EvmNftTransfer2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmNftTransfer2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example transfer.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "chain", {
      /**
       * @returns the chain of the transfer.
       * @example transfer.chain // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "blockHash", {
      /**
       * @returns the block hash of the transfer.
       * @example transfer.blockHash // "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
       */
      get: function() {
        return this._data.blockHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "blockNumber", {
      /**
       * @returns the block number of the transfer.
       * @example transfer.blockNumber // BigNumber
       */
      get: function() {
        return this._data.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "blockTimestamp", {
      /**
       * @returns the block timestamp of the transfer.
       * @example transfer.blockTimestamp // Date
       */
      get: function() {
        return this._data.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "fromAddress", {
      /**
       * @returns the from address of the transfer.
       * @example transfer.fromAddress // EvmAddress
       */
      get: function() {
        return this._data.fromAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "toAddress", {
      /**
       * @returns the to address of the transfer.
       * @example transfer.toAddress // EvmAddress
       */
      get: function() {
        return this._data.toAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "tokenAddress", {
      /**
       * @returns the token address of the transfer.
       * @example transfer.tokenAddress // EvmAddress
       */
      get: function() {
        return this._data.tokenAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "tokenId", {
      /**
       * @returns the token id of the transfer.
       * @example transfer.tokenId // "15"
       */
      get: function() {
        return this._data.tokenId;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "amount", {
      /**
       * @returns the amount of the transfer.
       * @example transfer.amount // 1
       */
      get: function() {
        return this._data.amount;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "value", {
      /**
       * @returns the value of the transfer.
       * @example transfer.value // EvmNative
       */
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "logIndex", {
      /**
       * @returns the log index of the transfer.
       * @example transfer.logIndex // 0
       */
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "transactionHash", {
      /**
       * @returns the transaction hash of the transfer.
       * @example transfer.transactionHash // "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
       */
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "transactionIndex", {
      /**
       * @returns the transaction index of the transfer.
       * @example transfer.transactionIndex // 123
       */
      get: function() {
        return this._data.transactionIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "transactionType", {
      /**
       * @returns the transaction type of the transfer.
       * @example transfer.transactionType // "1"
       */
      get: function() {
        return this._data.transactionType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "operator", {
      /**
       * @returns the operator of the transfer.
       * @example transfer.operator // EvmAddress
       */
      get: function() {
        return this._data.operator;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "contractType", {
      /**
       * @returns the contract type of the transfer.
       * @example transfer.contractType // "ERC721"
       */
      get: function() {
        return this._data.contractType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "possibleSpam", {
      /**
       * @returns possibility of the token being a spam token
       * @example transfer.possibleSpam // true
       */
      get: function() {
        return this._data.possibleSpam;
      },
      enumerable: false,
      configurable: true
    });
    EvmNftTransfer2.parse = function(data) {
      return __assign2(__assign2({}, data), { chain: EvmChain.create(data.chain), amount: maybe(data.amount, function(amount) {
        return +amount;
      }), blockNumber: BigNumber.create(data.blockNumber), blockTimestamp: dateInputToDate(data.blockTimestamp), transactionIndex: maybe(data.transactionIndex, function(index) {
        return +index;
      }), transactionType: maybe(data.transactionType), fromAddress: maybe(data.fromAddress, function(address) {
        return EvmAddress.create(address);
      }), toAddress: EvmAddress.create(data.toAddress), tokenAddress: EvmAddress.create(data.tokenAddress), value: maybe(data.value, EvmNative.create), operator: maybe(data.operator, function(operator) {
        return EvmAddress.create(operator);
      }), logIndex: +data.logIndex });
    };
    return EvmNftTransfer2;
  }()
);
var EvmTransactionLogDecoded = (
  /** @class */
  function(_super) {
    __extends2(EvmTransactionLogDecoded2, _super);
    function EvmTransactionLogDecoded2(value) {
      var _this = _super.call(this, value) || this;
      _this._value = EvmTransactionLogDecoded2.parse(value);
      return _this;
    }
    EvmTransactionLogDecoded2.create = function(value) {
      if (value instanceof EvmTransactionLogDecoded2) {
        return value;
      }
      return new EvmTransactionLogDecoded2(value);
    };
    EvmTransactionLogDecoded2.parse = function(value) {
      var data = _super.parse.call(this, value);
      return __assign2(__assign2({}, data), { decodedEvent: value.decodedEvent });
    };
    Object.defineProperty(EvmTransactionLogDecoded2.prototype, "decodedEvent", {
      get: function() {
        return this._value.decodedEvent;
      },
      enumerable: false,
      configurable: true
    });
    return EvmTransactionLogDecoded2;
  }(EvmTransactionLog)
);
var EvmTransactionVerbose = (
  /** @class */
  function(_super) {
    __extends2(EvmTransactionVerbose2, _super);
    function EvmTransactionVerbose2(data) {
      var _this = _super.call(this, data) || this;
      _this._data = EvmTransactionVerbose2.parse(data);
      return _this;
    }
    EvmTransactionVerbose2.create = function(data) {
      if (data instanceof EvmTransactionVerbose2) {
        return data;
      }
      return new EvmTransactionVerbose2(data);
    };
    Object.defineProperty(EvmTransactionVerbose2.prototype, "decodedCall", {
      get: function() {
        return this._data.decodedCall;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionVerbose2.prototype, "logs", {
      get: function() {
        return this._data.logs;
      },
      enumerable: false,
      configurable: true
    });
    var _a;
    _a = EvmTransactionVerbose2;
    EvmTransactionVerbose2.parse = function(data) {
      var parsed = _super.parse.call(_a, data);
      return __assign2(__assign2({}, parsed), { logs: data.logs.map(function(log) {
        return EvmTransactionLogDecoded.create(log);
      }), decodedCall: data.decodedCall });
    };
    return EvmTransactionVerbose2;
  }(EvmTransaction)
);
var EvmTrade = (
  /** @class */
  function() {
    function EvmTrade2(input) {
      this.transactionHash = input.transactionHash;
      this.transactionIndex = input.transactionIndex;
      this.tokenIds = input.tokenIds;
      this.sellerAddress = EvmAddress.create(input.sellerAddress);
      this.buyerAddress = EvmAddress.create(input.buyerAddress);
      this.tokenAddress = EvmAddress.create(input.tokenAddress);
      this.marketplaceAddress = EvmAddress.create(input.marketplaceAddress);
      this.priceTokenAddress = input.priceTokenAddress ? EvmAddress.create(input.priceTokenAddress) : void 0;
      this.price = EvmNative.create(input.price);
      this.blockTimestamp = input.blockTimestamp;
      this.blockNumber = BigNumber.create(input.blockNumber);
      this.blockHash = input.blockHash;
    }
    EvmTrade2.create = function(input) {
      if (input instanceof EvmTrade2) {
        return input;
      }
      return new EvmTrade2(input);
    };
    EvmTrade2.fromJSON = function(json) {
      var input = {
        transactionHash: json.transaction_hash,
        transactionIndex: Number(json.transaction_index),
        tokenIds: json.token_ids,
        sellerAddress: EvmAddress.fromJSON(json.seller_address),
        buyerAddress: EvmAddress.fromJSON(json.buyer_address),
        tokenAddress: EvmAddress.fromJSON(json.token_address),
        marketplaceAddress: EvmAddress.fromJSON(json.marketplace_address),
        priceTokenAddress: json.price_token_address ? EvmAddress.fromJSON(json.price_token_address) : void 0,
        price: EvmNative.fromJSON(json.price),
        blockTimestamp: new Date(json.block_timestamp),
        blockNumber: BigNumber.fromJSON(json.block_number),
        blockHash: json.block_hash
      };
      return EvmTrade2.create(input);
    };
    EvmTrade2.prototype.toJSON = function() {
      return {
        transaction_hash: this.transactionHash,
        transaction_index: String(this.transactionIndex),
        token_ids: this.tokenIds,
        seller_address: this.sellerAddress.toJSON(),
        buyer_address: this.buyerAddress.toJSON(),
        token_address: this.tokenAddress.toJSON(),
        marketplace_address: this.marketplaceAddress.toJSON(),
        price_token_address: this.priceTokenAddress ? this.priceTokenAddress.toJSON() : void 0,
        price: this.price.toJSON(),
        block_timestamp: this.blockTimestamp.toISOString(),
        block_number: this.blockNumber.toJSON(),
        block_hash: this.blockHash
      };
    };
    return EvmTrade2;
  }()
);
var EvmTradeCollection = (
  /** @class */
  function() {
    function EvmTradeCollection2(input) {
      this.page = input.page;
      this.pageSize = input.pageSize;
      this.cursor = input.cursor;
      this.result = input.result.map(function(item) {
        return EvmTrade.create(item);
      });
    }
    EvmTradeCollection2.create = function(input) {
      if (input instanceof EvmTradeCollection2) {
        return input;
      }
      return new EvmTradeCollection2(input);
    };
    EvmTradeCollection2.fromJSON = function(json) {
      var input = {
        page: json.page,
        pageSize: json.page_size,
        cursor: json.cursor,
        result: json.result.map(function(item) {
          return EvmTrade.fromJSON(item);
        })
      };
      return EvmTradeCollection2.create(input);
    };
    EvmTradeCollection2.prototype.toJSON = function() {
      return {
        page: this.page,
        page_size: this.pageSize,
        cursor: this.cursor,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return EvmTradeCollection2;
  }()
);
var EvmNativeErc20Price = (
  /** @class */
  function() {
    function EvmNativeErc20Price2(input) {
      this.value = input.value;
      this.decimals = input.decimals;
      this.name = input.name;
      this.symbol = input.symbol;
      this.address = input.address;
    }
    EvmNativeErc20Price2.create = function(input) {
      if (input instanceof EvmNativeErc20Price2) {
        return input;
      }
      return new EvmNativeErc20Price2(input);
    };
    EvmNativeErc20Price2.fromJSON = function(json) {
      var input = {
        value: json.value,
        decimals: json.decimals,
        name: json.name,
        symbol: json.symbol,
        address: json.address
      };
      return EvmNativeErc20Price2.create(input);
    };
    EvmNativeErc20Price2.prototype.toJSON = function() {
      return {
        value: this.value,
        decimals: this.decimals,
        name: this.name,
        symbol: this.symbol,
        address: this.address
      };
    };
    return EvmNativeErc20Price2;
  }()
);
var EvmErc20Price = (
  /** @class */
  function() {
    function EvmErc20Price2(input) {
      this.tokenName = input.tokenName;
      this.tokenSymbol = input.tokenSymbol;
      this.tokenLogo = input.tokenLogo;
      this.tokenDecimals = input.tokenDecimals;
      this.nativePrice = input.nativePrice ? EvmNativeErc20Price.create(input.nativePrice) : void 0;
      this.usdPrice = input.usdPrice;
      this.usdPriceFormatted = input.usdPriceFormatted;
      this["24hrPercentChange"] = input["24hrPercentChange"];
      this.exchangeAddress = input.exchangeAddress;
      this.exchangeName = input.exchangeName;
      this.tokenAddress = input.tokenAddress;
      this.toBlock = input.toBlock;
      this.verifiedContract = input.verifiedContract;
    }
    EvmErc20Price2.create = function(input) {
      if (input instanceof EvmErc20Price2) {
        return input;
      }
      return new EvmErc20Price2(input);
    };
    EvmErc20Price2.fromJSON = function(json) {
      var input = {
        tokenName: json.tokenName,
        tokenSymbol: json.tokenSymbol,
        tokenLogo: json.tokenLogo,
        tokenDecimals: json.tokenDecimals,
        nativePrice: json.nativePrice ? EvmNativeErc20Price.fromJSON(json.nativePrice) : void 0,
        usdPrice: json.usdPrice,
        usdPriceFormatted: json.usdPriceFormatted,
        "24hrPercentChange": json["24hrPercentChange"],
        exchangeAddress: json.exchangeAddress,
        exchangeName: json.exchangeName,
        tokenAddress: json.tokenAddress,
        toBlock: json.toBlock,
        verifiedContract: json.verifiedContract
      };
      return EvmErc20Price2.create(input);
    };
    EvmErc20Price2.prototype.toJSON = function() {
      return {
        tokenName: this.tokenName,
        tokenSymbol: this.tokenSymbol,
        tokenLogo: this.tokenLogo,
        tokenDecimals: this.tokenDecimals,
        nativePrice: this.nativePrice ? this.nativePrice.toJSON() : void 0,
        usdPrice: this.usdPrice,
        usdPriceFormatted: this.usdPriceFormatted,
        "24hrPercentChange": this["24hrPercentChange"],
        exchangeAddress: this.exchangeAddress,
        exchangeName: this.exchangeName,
        tokenAddress: this.tokenAddress,
        toBlock: this.toBlock,
        verifiedContract: this.verifiedContract
      };
    };
    return EvmErc20Price2;
  }()
);
var EvmTokenPriceItem = (
  /** @class */
  function() {
    function EvmTokenPriceItem2(input) {
      this.tokenAddress = EvmAddress.create(input.tokenAddress);
      this.exchange = input.exchange;
      this.toBlock = input.toBlock;
    }
    EvmTokenPriceItem2.create = function(input) {
      if (input instanceof EvmTokenPriceItem2) {
        return input;
      }
      return new EvmTokenPriceItem2(input);
    };
    EvmTokenPriceItem2.fromJSON = function(json) {
      var input = {
        tokenAddress: EvmAddress.fromJSON(json.token_address),
        exchange: json.exchange,
        toBlock: json.to_block
      };
      return EvmTokenPriceItem2.create(input);
    };
    EvmTokenPriceItem2.prototype.toJSON = function() {
      return {
        token_address: this.tokenAddress.toJSON(),
        exchange: this.exchange,
        to_block: this.toBlock
      };
    };
    return EvmTokenPriceItem2;
  }()
);
var EvmGetMultipleTokenPricesDto = (
  /** @class */
  function() {
    function EvmGetMultipleTokenPricesDto2(input) {
      this.tokens = input.tokens.map(function(item) {
        return EvmTokenPriceItem.create(item);
      });
    }
    EvmGetMultipleTokenPricesDto2.create = function(input) {
      if (input instanceof EvmGetMultipleTokenPricesDto2) {
        return input;
      }
      return new EvmGetMultipleTokenPricesDto2(input);
    };
    EvmGetMultipleTokenPricesDto2.fromJSON = function(json) {
      var input = {
        tokens: json.tokens.map(function(item) {
          return EvmTokenPriceItem.fromJSON(item);
        })
      };
      return EvmGetMultipleTokenPricesDto2.create(input);
    };
    EvmGetMultipleTokenPricesDto2.prototype.toJSON = function() {
      return {
        tokens: this.tokens.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return EvmGetMultipleTokenPricesDto2;
  }()
);
var EvmErc20TokenBalanceWithPrice = (
  /** @class */
  function() {
    function EvmErc20TokenBalanceWithPrice2(input) {
      this.tokenAddress = input.tokenAddress ? EvmAddress.create(input.tokenAddress) : void 0;
      this.name = input.name;
      this.symbol = input.symbol;
      this.logo = input.logo;
      this.thumbnail = input.thumbnail;
      this.decimals = input.decimals;
      this.balance = EvmNative.create(input.balance);
      this.possibleSpam = input.possibleSpam;
      this.verifiedContract = input.verifiedContract;
      this.usdPrice = input.usdPrice;
      this.usdPrice24hrPercentChange = input.usdPrice24hrPercentChange;
      this.usdPrice24hrUsdChange = input.usdPrice24hrUsdChange;
      this.usdValue24hrUsdChange = input.usdValue24hrUsdChange;
      this.usdValue = input.usdValue;
      this.portfolioPercentage = input.portfolioPercentage;
      this.balanceFormatted = input.balanceFormatted;
      this.nativeToken = input.nativeToken;
    }
    EvmErc20TokenBalanceWithPrice2.create = function(input) {
      if (input instanceof EvmErc20TokenBalanceWithPrice2) {
        return input;
      }
      return new EvmErc20TokenBalanceWithPrice2(input);
    };
    EvmErc20TokenBalanceWithPrice2.fromJSON = function(json) {
      var input = {
        tokenAddress: json.token_address ? EvmAddress.fromJSON(json.token_address) : void 0,
        name: json.name,
        symbol: json.symbol,
        logo: json.logo,
        thumbnail: json.thumbnail,
        decimals: json.decimals,
        balance: EvmNative.fromJSON(json.balance),
        possibleSpam: json.possible_spam,
        verifiedContract: json.verified_contract,
        usdPrice: json.usd_price,
        usdPrice24hrPercentChange: json.usd_price_24hr_percent_change,
        usdPrice24hrUsdChange: json.usd_price_24hr_usd_change,
        usdValue24hrUsdChange: json.usd_value_24hr_usd_change,
        usdValue: json.usd_value,
        portfolioPercentage: json.portfolio_percentage,
        balanceFormatted: json.balance_formatted,
        nativeToken: json.native_token
      };
      return EvmErc20TokenBalanceWithPrice2.create(input);
    };
    EvmErc20TokenBalanceWithPrice2.prototype.toJSON = function() {
      return {
        token_address: this.tokenAddress ? this.tokenAddress.toJSON() : void 0,
        name: this.name,
        symbol: this.symbol,
        logo: this.logo,
        thumbnail: this.thumbnail,
        decimals: this.decimals,
        balance: this.balance.toJSON(),
        possible_spam: this.possibleSpam,
        verified_contract: this.verifiedContract,
        usd_price: this.usdPrice,
        usd_price_24hr_percent_change: this.usdPrice24hrPercentChange,
        usd_price_24hr_usd_change: this.usdPrice24hrUsdChange,
        usd_value_24hr_usd_change: this.usdValue24hrUsdChange,
        usd_value: this.usdValue,
        portfolio_percentage: this.portfolioPercentage,
        balance_formatted: this.balanceFormatted,
        native_token: this.nativeToken
      };
    };
    return EvmErc20TokenBalanceWithPrice2;
  }()
);
var EvmErc20TokenBalanceWithPriceResult = (
  /** @class */
  function() {
    function EvmErc20TokenBalanceWithPriceResult2(input) {
      this.page = input.page;
      this.pageSize = input.pageSize;
      this.cursor = input.cursor;
      this.result = input.result.map(function(item) {
        return EvmErc20TokenBalanceWithPrice.create(item);
      });
    }
    EvmErc20TokenBalanceWithPriceResult2.create = function(input) {
      if (input instanceof EvmErc20TokenBalanceWithPriceResult2) {
        return input;
      }
      return new EvmErc20TokenBalanceWithPriceResult2(input);
    };
    EvmErc20TokenBalanceWithPriceResult2.fromJSON = function(json) {
      var input = {
        page: json.page,
        pageSize: json.page_size,
        cursor: json.cursor,
        result: json.result.map(function(item) {
          return EvmErc20TokenBalanceWithPrice.fromJSON(item);
        })
      };
      return EvmErc20TokenBalanceWithPriceResult2.create(input);
    };
    EvmErc20TokenBalanceWithPriceResult2.prototype.toJSON = function() {
      return {
        page: this.page,
        page_size: this.pageSize,
        cursor: this.cursor,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return EvmErc20TokenBalanceWithPriceResult2;
  }()
);
var EvmChainNetWorth = (
  /** @class */
  function() {
    function EvmChainNetWorth2(input) {
      this.chain = input.chain;
      this.nativeBalance = EvmNative.create(input.nativeBalance);
      this.nativeBalanceFormatted = input.nativeBalanceFormatted;
      this.nativeBalanceUsd = input.nativeBalanceUsd;
      this.tokenBalanceUsd = input.tokenBalanceUsd;
      this.networthUsd = input.networthUsd;
    }
    EvmChainNetWorth2.create = function(input) {
      if (input instanceof EvmChainNetWorth2) {
        return input;
      }
      return new EvmChainNetWorth2(input);
    };
    EvmChainNetWorth2.fromJSON = function(json) {
      var input = {
        chain: json.chain,
        nativeBalance: EvmNative.fromJSON(json.native_balance),
        nativeBalanceFormatted: json.native_balance_formatted,
        nativeBalanceUsd: json.native_balance_usd,
        tokenBalanceUsd: json.token_balance_usd,
        networthUsd: json.networth_usd
      };
      return EvmChainNetWorth2.create(input);
    };
    EvmChainNetWorth2.prototype.toJSON = function() {
      return {
        chain: this.chain,
        native_balance: this.nativeBalance.toJSON(),
        native_balance_formatted: this.nativeBalanceFormatted,
        native_balance_usd: this.nativeBalanceUsd,
        token_balance_usd: this.tokenBalanceUsd,
        networth_usd: this.networthUsd
      };
    };
    return EvmChainNetWorth2;
  }()
);
var EvmNetWorthResult = (
  /** @class */
  function() {
    function EvmNetWorthResult2(input) {
      this.totalNetworthUsd = input.totalNetworthUsd;
      this.chains = input.chains.map(function(item) {
        return EvmChainNetWorth.create(item);
      });
    }
    EvmNetWorthResult2.create = function(input) {
      if (input instanceof EvmNetWorthResult2) {
        return input;
      }
      return new EvmNetWorthResult2(input);
    };
    EvmNetWorthResult2.fromJSON = function(json) {
      var input = {
        totalNetworthUsd: json.total_networth_usd,
        chains: json.chains.map(function(item) {
          return EvmChainNetWorth.fromJSON(item);
        })
      };
      return EvmNetWorthResult2.create(input);
    };
    EvmNetWorthResult2.prototype.toJSON = function() {
      return {
        total_networth_usd: this.totalNetworthUsd,
        chains: this.chains.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return EvmNetWorthResult2;
  }()
);
var EvmWeb3version = (
  /** @class */
  function() {
    function EvmWeb3version2(input) {
      this.version = input.version;
    }
    EvmWeb3version2.create = function(input) {
      if (input instanceof EvmWeb3version2) {
        return input;
      }
      return new EvmWeb3version2(input);
    };
    EvmWeb3version2.fromJSON = function(json) {
      var input = {
        version: json.version
      };
      return EvmWeb3version2.create(input);
    };
    EvmWeb3version2.prototype.toJSON = function() {
      return {
        version: this.version
      };
    };
    return EvmWeb3version2;
  }()
);
var EvmEndpointWeights = (
  /** @class */
  function() {
    function EvmEndpointWeights2(input) {
      this.endpoint = input.endpoint;
      this.path = input.path;
      this.rateLimitCost = input.rateLimitCost;
      this.price = input.price;
    }
    EvmEndpointWeights2.create = function(input) {
      if (input instanceof EvmEndpointWeights2) {
        return input;
      }
      return new EvmEndpointWeights2(input);
    };
    EvmEndpointWeights2.fromJSON = function(json) {
      var input = {
        endpoint: json.endpoint,
        path: json.path,
        rateLimitCost: json.rateLimitCost,
        price: json.price
      };
      return EvmEndpointWeights2.create(input);
    };
    EvmEndpointWeights2.prototype.toJSON = function() {
      return {
        endpoint: this.endpoint,
        path: this.path,
        rateLimitCost: this.rateLimitCost,
        price: this.price
      };
    };
    return EvmEndpointWeights2;
  }()
);
var EvmUnstoppableDomain = (
  /** @class */
  function() {
    function EvmUnstoppableDomain2(input) {
      this.name = input.name;
    }
    EvmUnstoppableDomain2.create = function(input) {
      if (input instanceof EvmUnstoppableDomain2) {
        return input;
      }
      return new EvmUnstoppableDomain2(input);
    };
    EvmUnstoppableDomain2.fromJSON = function(json) {
      var input = {
        name: json.name
      };
      return EvmUnstoppableDomain2.create(input);
    };
    EvmUnstoppableDomain2.prototype.toJSON = function() {
      return {
        name: this.name
      };
    };
    return EvmUnstoppableDomain2;
  }()
);
var EvmErc20Metadata = (
  /** @class */
  function() {
    function EvmErc20Metadata2(input) {
      this.address = input.address;
      this.addressLabel = input.addressLabel;
      this.name = input.name;
      this.symbol = input.symbol;
      this.decimals = input.decimals;
      this.logo = input.logo;
      this.logoHash = input.logoHash;
      this.thumbnail = input.thumbnail;
      this.blockNumber = input.blockNumber ? BigNumber.create(input.blockNumber) : void 0;
      this.validated = input.validated;
      this.createdAt = input.createdAt;
      this.possibleSpam = input.possibleSpam;
      this.verifiedContract = input.verifiedContract;
    }
    EvmErc20Metadata2.create = function(input) {
      if (input instanceof EvmErc20Metadata2) {
        return input;
      }
      return new EvmErc20Metadata2(input);
    };
    EvmErc20Metadata2.fromJSON = function(json) {
      var input = {
        address: json.address,
        addressLabel: json.address_label,
        name: json.name,
        symbol: json.symbol,
        decimals: Number(json.decimals),
        logo: json.logo,
        logoHash: json.logo_hash,
        thumbnail: json.thumbnail,
        blockNumber: json.block_number ? BigNumber.fromJSON(json.block_number) : void 0,
        validated: json.validated,
        createdAt: json.created_at,
        possibleSpam: json.possible_spam,
        verifiedContract: json.verified_contract
      };
      return EvmErc20Metadata2.create(input);
    };
    EvmErc20Metadata2.prototype.toJSON = function() {
      return {
        address: this.address,
        address_label: this.addressLabel,
        name: this.name,
        symbol: this.symbol,
        decimals: String(this.decimals),
        logo: this.logo,
        logo_hash: this.logoHash,
        thumbnail: this.thumbnail,
        block_number: this.blockNumber ? this.blockNumber.toJSON() : void 0,
        validated: this.validated,
        created_at: this.createdAt,
        possible_spam: this.possibleSpam,
        verified_contract: this.verifiedContract
      };
    };
    return EvmErc20Metadata2;
  }()
);
var EvmGetPairPrice = (
  /** @class */
  function() {
    function EvmGetPairPrice2(input) {
      this.pairAddress = input.pairAddress;
      this.pairLabel = input.pairLabel;
      this.exchange = input.exchange;
      this.quotePrice = input.quotePrice;
      this.priceUsd = input.priceUsd;
      this.baseToken = input.baseToken ? EvmErc20Metadata.create(input.baseToken) : void 0;
      this.quoteToken = input.quoteToken ? EvmErc20Metadata.create(input.quoteToken) : void 0;
    }
    EvmGetPairPrice2.create = function(input) {
      if (input instanceof EvmGetPairPrice2) {
        return input;
      }
      return new EvmGetPairPrice2(input);
    };
    EvmGetPairPrice2.fromJSON = function(json) {
      var input = {
        pairAddress: json.pair_address,
        pairLabel: json.pair_label,
        exchange: json.exchange,
        quotePrice: json.quote_price,
        priceUsd: json.price_usd,
        baseToken: json.base_token ? EvmErc20Metadata.fromJSON(json.base_token) : void 0,
        quoteToken: json.quote_token ? EvmErc20Metadata.fromJSON(json.quote_token) : void 0
      };
      return EvmGetPairPrice2.create(input);
    };
    EvmGetPairPrice2.prototype.toJSON = function() {
      return {
        pair_address: this.pairAddress,
        pair_label: this.pairLabel,
        exchange: this.exchange,
        quote_price: this.quotePrice,
        price_usd: this.priceUsd,
        base_token: this.baseToken ? this.baseToken.toJSON() : void 0,
        quote_token: this.quoteToken ? this.quoteToken.toJSON() : void 0
      };
    };
    return EvmGetPairPrice2;
  }()
);
var EvmMarketDataERC20TokenItem = (
  /** @class */
  function() {
    function EvmMarketDataERC20TokenItem2(input) {
      this.rank = input.rank;
      this.tokenName = input.tokenName;
      this.tokenSymbol = input.tokenSymbol;
      this.tokenLogo = input.tokenLogo;
      this.tokenDecimals = input.tokenDecimals;
      this.contractAddress = EvmAddress.create(input.contractAddress);
      this.priceUsd = input.priceUsd;
      this.price24hPercentChange = input.price24hPercentChange;
      this.price7dPercentChange = input.price7dPercentChange;
      this.marketCapUsd = input.marketCapUsd;
    }
    EvmMarketDataERC20TokenItem2.create = function(input) {
      if (input instanceof EvmMarketDataERC20TokenItem2) {
        return input;
      }
      return new EvmMarketDataERC20TokenItem2(input);
    };
    EvmMarketDataERC20TokenItem2.fromJSON = function(json) {
      var input = {
        rank: json.rank,
        tokenName: json.token_name,
        tokenSymbol: json.token_symbol,
        tokenLogo: json.token_logo,
        tokenDecimals: Number(json.token_decimals),
        contractAddress: EvmAddress.fromJSON(json.contract_address),
        priceUsd: json.price_usd,
        price24hPercentChange: json.price_24h_percent_change,
        price7dPercentChange: json.price_7d_percent_change,
        marketCapUsd: json.market_cap_usd
      };
      return EvmMarketDataERC20TokenItem2.create(input);
    };
    EvmMarketDataERC20TokenItem2.prototype.toJSON = function() {
      return {
        rank: this.rank,
        token_name: this.tokenName,
        token_symbol: this.tokenSymbol,
        token_logo: this.tokenLogo,
        token_decimals: String(this.tokenDecimals),
        contract_address: this.contractAddress.toJSON(),
        price_usd: this.priceUsd,
        price_24h_percent_change: this.price24hPercentChange,
        price_7d_percent_change: this.price7dPercentChange,
        market_cap_usd: this.marketCapUsd
      };
    };
    return EvmMarketDataERC20TokenItem2;
  }()
);
var EvmMarketDataERC20TokensByPriceMovers = (
  /** @class */
  function() {
    function EvmMarketDataERC20TokensByPriceMovers2(input) {
      this.gainers = input.gainers.map(function(item) {
        return EvmMarketDataERC20TokenItem.create(item);
      });
      this.losers = input.losers.map(function(item) {
        return EvmMarketDataERC20TokenItem.create(item);
      });
    }
    EvmMarketDataERC20TokensByPriceMovers2.create = function(input) {
      if (input instanceof EvmMarketDataERC20TokensByPriceMovers2) {
        return input;
      }
      return new EvmMarketDataERC20TokensByPriceMovers2(input);
    };
    EvmMarketDataERC20TokensByPriceMovers2.fromJSON = function(json) {
      var input = {
        gainers: json.gainers.map(function(item) {
          return EvmMarketDataERC20TokenItem.fromJSON(item);
        }),
        losers: json.losers.map(function(item) {
          return EvmMarketDataERC20TokenItem.fromJSON(item);
        })
      };
      return EvmMarketDataERC20TokensByPriceMovers2.create(input);
    };
    EvmMarketDataERC20TokensByPriceMovers2.prototype.toJSON = function() {
      return {
        gainers: this.gainers.map(function(item) {
          return item.toJSON();
        }),
        losers: this.losers.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return EvmMarketDataERC20TokensByPriceMovers2;
  }()
);
var EvmMarketDataTopNFTCollectionByMarketCapItem = (
  /** @class */
  function() {
    function EvmMarketDataTopNFTCollectionByMarketCapItem2(input) {
      this.rank = input.rank;
      this.collectionTitle = input.collectionTitle;
      this.collectionImage = input.collectionImage;
      this.floorPriceUsd = input.floorPriceUsd;
      this.floorPrice24hrPercentChange = input.floorPrice24hrPercentChange;
      this.marketCapUsd = input.marketCapUsd;
      this.marketCap24hrPercentChange = input.marketCap24hrPercentChange;
      this.volumeUsd = input.volumeUsd;
      this.volume24hrPercentChange = input.volume24hrPercentChange;
      this.collectionAddress = EvmAddress.create(input.collectionAddress);
    }
    EvmMarketDataTopNFTCollectionByMarketCapItem2.create = function(input) {
      if (input instanceof EvmMarketDataTopNFTCollectionByMarketCapItem2) {
        return input;
      }
      return new EvmMarketDataTopNFTCollectionByMarketCapItem2(input);
    };
    EvmMarketDataTopNFTCollectionByMarketCapItem2.fromJSON = function(json) {
      var input = {
        rank: json.rank,
        collectionTitle: json.collection_title,
        collectionImage: json.collection_image,
        floorPriceUsd: json.floor_price_usd,
        floorPrice24hrPercentChange: json.floor_price_24hr_percent_change,
        marketCapUsd: json.market_cap_usd,
        marketCap24hrPercentChange: json.market_cap_24hr_percent_change,
        volumeUsd: json.volume_usd,
        volume24hrPercentChange: json.volume_24hr_percent_change,
        collectionAddress: EvmAddress.fromJSON(json.collection_address)
      };
      return EvmMarketDataTopNFTCollectionByMarketCapItem2.create(input);
    };
    EvmMarketDataTopNFTCollectionByMarketCapItem2.prototype.toJSON = function() {
      return {
        rank: this.rank,
        collection_title: this.collectionTitle,
        collection_image: this.collectionImage,
        floor_price_usd: this.floorPriceUsd,
        floor_price_24hr_percent_change: this.floorPrice24hrPercentChange,
        market_cap_usd: this.marketCapUsd,
        market_cap_24hr_percent_change: this.marketCap24hrPercentChange,
        volume_usd: this.volumeUsd,
        volume_24hr_percent_change: this.volume24hrPercentChange,
        collection_address: this.collectionAddress.toJSON()
      };
    };
    return EvmMarketDataTopNFTCollectionByMarketCapItem2;
  }()
);
var EvmMarketDataHottestNFTCollectionByTradingVolumeItem = (
  /** @class */
  function() {
    function EvmMarketDataHottestNFTCollectionByTradingVolumeItem2(input) {
      this.rank = input.rank;
      this.collectionTitle = input.collectionTitle;
      this.collectionImage = input.collectionImage;
      this.floorPriceUsd = input.floorPriceUsd;
      this.floorPrice24hrPercentChange = input.floorPrice24hrPercentChange;
      this.volumeUsd = input.volumeUsd;
      this.volume24hrPercentChange = input.volume24hrPercentChange;
      this.averagePriceUsd = input.averagePriceUsd;
      this.collectionAddress = EvmAddress.create(input.collectionAddress);
    }
    EvmMarketDataHottestNFTCollectionByTradingVolumeItem2.create = function(input) {
      if (input instanceof EvmMarketDataHottestNFTCollectionByTradingVolumeItem2) {
        return input;
      }
      return new EvmMarketDataHottestNFTCollectionByTradingVolumeItem2(input);
    };
    EvmMarketDataHottestNFTCollectionByTradingVolumeItem2.fromJSON = function(json) {
      var input = {
        rank: json.rank,
        collectionTitle: json.collection_title,
        collectionImage: json.collection_image,
        floorPriceUsd: json.floor_price_usd,
        floorPrice24hrPercentChange: json.floor_price_24hr_percent_change,
        volumeUsd: json.volume_usd,
        volume24hrPercentChange: json.volume_24hr_percent_change,
        averagePriceUsd: json.average_price_usd,
        collectionAddress: EvmAddress.fromJSON(json.collection_address)
      };
      return EvmMarketDataHottestNFTCollectionByTradingVolumeItem2.create(input);
    };
    EvmMarketDataHottestNFTCollectionByTradingVolumeItem2.prototype.toJSON = function() {
      return {
        rank: this.rank,
        collection_title: this.collectionTitle,
        collection_image: this.collectionImage,
        floor_price_usd: this.floorPriceUsd,
        floor_price_24hr_percent_change: this.floorPrice24hrPercentChange,
        volume_usd: this.volumeUsd,
        volume_24hr_percent_change: this.volume24hrPercentChange,
        average_price_usd: this.averagePriceUsd,
        collection_address: this.collectionAddress.toJSON()
      };
    };
    return EvmMarketDataHottestNFTCollectionByTradingVolumeItem2;
  }()
);
var EvmMarketDataTopCryptoCurrenciesByMarketCapItem = (
  /** @class */
  function() {
    function EvmMarketDataTopCryptoCurrenciesByMarketCapItem2(input) {
      this.symbol = input.symbol;
      this.name = input.name;
      this.logo = input.logo;
      this.circulatingSupply = input.circulatingSupply;
      this.totalSupply = input.totalSupply;
      this.maxSupply = input.maxSupply;
      this.marketCapUsd = input.marketCapUsd;
      this.marketCapRank = input.marketCapRank;
      this.marketCap24hChange = input.marketCap24hChange;
      this.marketCap24hPercentChange = input.marketCap24hPercentChange;
      this.totalVolume = input.totalVolume;
      this.priceUsd = input.priceUsd;
      this.usdPrice24hHigh = input.usdPrice24hHigh;
      this.usdPrice24hLow = input.usdPrice24hLow;
      this.usdPrice24hChange = input.usdPrice24hChange;
      this.usdPrice24hPercentChange = input.usdPrice24hPercentChange;
      this.usdPriceAth = input.usdPriceAth;
      this.athPercentChange = input.athPercentChange;
      this.athDate = input.athDate;
    }
    EvmMarketDataTopCryptoCurrenciesByMarketCapItem2.create = function(input) {
      if (input instanceof EvmMarketDataTopCryptoCurrenciesByMarketCapItem2) {
        return input;
      }
      return new EvmMarketDataTopCryptoCurrenciesByMarketCapItem2(input);
    };
    EvmMarketDataTopCryptoCurrenciesByMarketCapItem2.fromJSON = function(json) {
      var input = {
        symbol: json.symbol,
        name: json.name,
        logo: json.logo,
        circulatingSupply: json.circulating_supply,
        totalSupply: json.total_supply,
        maxSupply: json.max_supply,
        marketCapUsd: json.market_cap_usd,
        marketCapRank: json.market_cap_rank,
        marketCap24hChange: json.market_cap_24h_change,
        marketCap24hPercentChange: json.market_cap_24h_percent_change,
        totalVolume: json.total_volume,
        priceUsd: json.price_usd,
        usdPrice24hHigh: json.usd_price_24h_high,
        usdPrice24hLow: json.usd_price_24h_low,
        usdPrice24hChange: json.usd_price_24h_change,
        usdPrice24hPercentChange: json.usd_price_24h_percent_change,
        usdPriceAth: json.usd_price_ath,
        athPercentChange: json.ath_percent_change,
        athDate: json.ath_date
      };
      return EvmMarketDataTopCryptoCurrenciesByMarketCapItem2.create(input);
    };
    EvmMarketDataTopCryptoCurrenciesByMarketCapItem2.prototype.toJSON = function() {
      return {
        symbol: this.symbol,
        name: this.name,
        logo: this.logo,
        circulating_supply: this.circulatingSupply,
        total_supply: this.totalSupply,
        max_supply: this.maxSupply,
        market_cap_usd: this.marketCapUsd,
        market_cap_rank: this.marketCapRank,
        market_cap_24h_change: this.marketCap24hChange,
        market_cap_24h_percent_change: this.marketCap24hPercentChange,
        total_volume: this.totalVolume,
        price_usd: this.priceUsd,
        usd_price_24h_high: this.usdPrice24hHigh,
        usd_price_24h_low: this.usdPrice24hLow,
        usd_price_24h_change: this.usdPrice24hChange,
        usd_price_24h_percent_change: this.usdPrice24hPercentChange,
        usd_price_ath: this.usdPriceAth,
        ath_percent_change: this.athPercentChange,
        ath_date: this.athDate
      };
    };
    return EvmMarketDataTopCryptoCurrenciesByMarketCapItem2;
  }()
);
var EvmReviewContracts = (
  /** @class */
  function() {
    function EvmReviewContracts2(input) {
      this.message = input.message;
    }
    EvmReviewContracts2.create = function(input) {
      if (input instanceof EvmReviewContracts2) {
        return input;
      }
      return new EvmReviewContracts2(input);
    };
    EvmReviewContracts2.fromJSON = function(json) {
      var input = {
        message: json.message
      };
      return EvmReviewContracts2.create(input);
    };
    EvmReviewContracts2.prototype.toJSON = function() {
      return {
        message: this.message
      };
    };
    return EvmReviewContracts2;
  }()
);
var EvmContractsReviewItem = (
  /** @class */
  function() {
    function EvmContractsReviewItem2(input) {
      this.contractAddress = EvmAddress.create(input.contractAddress);
      this.reason = input.reason;
      this.reportType = EvmContractsReviewItemReportTypeEnum.create(input.reportType);
      this.contractType = EvmContractsReviewItemContractTypeEnum.create(input.contractType);
    }
    EvmContractsReviewItem2.create = function(input) {
      if (input instanceof EvmContractsReviewItem2) {
        return input;
      }
      return new EvmContractsReviewItem2(input);
    };
    EvmContractsReviewItem2.fromJSON = function(json) {
      var input = {
        contractAddress: EvmAddress.fromJSON(json.contract_address),
        reason: json.reason,
        reportType: EvmContractsReviewItemReportTypeEnum.fromJSON(json.report_type),
        contractType: EvmContractsReviewItemContractTypeEnum.fromJSON(json.contract_type)
      };
      return EvmContractsReviewItem2.create(input);
    };
    EvmContractsReviewItem2.prototype.toJSON = function() {
      return {
        contract_address: this.contractAddress.toJSON(),
        reason: this.reason,
        report_type: this.reportType,
        contract_type: this.contractType
      };
    };
    return EvmContractsReviewItem2;
  }()
);
var EvmContractsReviewDto = (
  /** @class */
  function() {
    function EvmContractsReviewDto2(input) {
      this.contracts = input.contracts.map(function(item) {
        return EvmContractsReviewItem.create(item);
      });
    }
    EvmContractsReviewDto2.create = function(input) {
      if (input instanceof EvmContractsReviewDto2) {
        return input;
      }
      return new EvmContractsReviewDto2(input);
    };
    EvmContractsReviewDto2.fromJSON = function(json) {
      var input = {
        contracts: json.contracts.map(function(item) {
          return EvmContractsReviewItem.fromJSON(item);
        })
      };
      return EvmContractsReviewDto2.create(input);
    };
    EvmContractsReviewDto2.prototype.toJSON = function() {
      return {
        contracts: this.contracts.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return EvmContractsReviewDto2;
  }()
);
var EvmTransactionTimestamp = (
  /** @class */
  function() {
    function EvmTransactionTimestamp2(input) {
      this.blockNumber = BigNumber.create(input.blockNumber);
      this.blockTimestamp = input.blockTimestamp;
      this.transactionHash = input.transactionHash;
    }
    EvmTransactionTimestamp2.create = function(input) {
      if (input instanceof EvmTransactionTimestamp2) {
        return input;
      }
      return new EvmTransactionTimestamp2(input);
    };
    EvmTransactionTimestamp2.fromJSON = function(json) {
      var input = {
        blockNumber: BigNumber.fromJSON(json.block_number),
        blockTimestamp: json.block_timestamp,
        transactionHash: json.transaction_hash
      };
      return EvmTransactionTimestamp2.create(input);
    };
    EvmTransactionTimestamp2.prototype.toJSON = function() {
      return {
        block_number: this.blockNumber.toJSON(),
        block_timestamp: this.blockTimestamp,
        transaction_hash: this.transactionHash
      };
    };
    return EvmTransactionTimestamp2;
  }()
);
var EvmWalletActiveChain = (
  /** @class */
  function() {
    function EvmWalletActiveChain2(input) {
      this.chain = input.chain;
      this.chainId = input.chainId;
      this.firstTransaction = input.firstTransaction ? EvmTransactionTimestamp.create(input.firstTransaction) : void 0;
      this.lastTransaction = input.lastTransaction ? EvmTransactionTimestamp.create(input.lastTransaction) : void 0;
    }
    EvmWalletActiveChain2.create = function(input) {
      if (input instanceof EvmWalletActiveChain2) {
        return input;
      }
      return new EvmWalletActiveChain2(input);
    };
    EvmWalletActiveChain2.fromJSON = function(json) {
      var input = {
        chain: json.chain,
        chainId: json.chain_id,
        firstTransaction: json.first_transaction ? EvmTransactionTimestamp.fromJSON(json.first_transaction) : void 0,
        lastTransaction: json.last_transaction ? EvmTransactionTimestamp.fromJSON(json.last_transaction) : void 0
      };
      return EvmWalletActiveChain2.create(input);
    };
    EvmWalletActiveChain2.prototype.toJSON = function() {
      return {
        chain: this.chain,
        chain_id: this.chainId,
        first_transaction: this.firstTransaction ? this.firstTransaction.toJSON() : void 0,
        last_transaction: this.lastTransaction ? this.lastTransaction.toJSON() : void 0
      };
    };
    return EvmWalletActiveChain2;
  }()
);
var EvmWalletActiveChains = (
  /** @class */
  function() {
    function EvmWalletActiveChains2(input) {
      this.address = input.address;
      this.activeChains = input.activeChains.map(function(item) {
        return EvmWalletActiveChain.create(item);
      });
    }
    EvmWalletActiveChains2.create = function(input) {
      if (input instanceof EvmWalletActiveChains2) {
        return input;
      }
      return new EvmWalletActiveChains2(input);
    };
    EvmWalletActiveChains2.fromJSON = function(json) {
      var input = {
        address: json.address,
        activeChains: json.active_chains.map(function(item) {
          return EvmWalletActiveChain.fromJSON(item);
        })
      };
      return EvmWalletActiveChains2.create(input);
    };
    EvmWalletActiveChains2.prototype.toJSON = function() {
      return {
        address: this.address,
        active_chains: this.activeChains.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return EvmWalletActiveChains2;
  }()
);
var EvmWalletStatTransactions = (
  /** @class */
  function() {
    function EvmWalletStatTransactions2(input) {
      this.total = input.total;
    }
    EvmWalletStatTransactions2.create = function(input) {
      if (input instanceof EvmWalletStatTransactions2) {
        return input;
      }
      return new EvmWalletStatTransactions2(input);
    };
    EvmWalletStatTransactions2.fromJSON = function(json) {
      var input = {
        total: json.total
      };
      return EvmWalletStatTransactions2.create(input);
    };
    EvmWalletStatTransactions2.prototype.toJSON = function() {
      return {
        total: this.total
      };
    };
    return EvmWalletStatTransactions2;
  }()
);
var EvmWalletStatNftTransfers = (
  /** @class */
  function() {
    function EvmWalletStatNftTransfers2(input) {
      this.total = input.total;
    }
    EvmWalletStatNftTransfers2.create = function(input) {
      if (input instanceof EvmWalletStatNftTransfers2) {
        return input;
      }
      return new EvmWalletStatNftTransfers2(input);
    };
    EvmWalletStatNftTransfers2.fromJSON = function(json) {
      var input = {
        total: json.total
      };
      return EvmWalletStatNftTransfers2.create(input);
    };
    EvmWalletStatNftTransfers2.prototype.toJSON = function() {
      return {
        total: this.total
      };
    };
    return EvmWalletStatNftTransfers2;
  }()
);
var EvmWalletStatTokenTransfers = (
  /** @class */
  function() {
    function EvmWalletStatTokenTransfers2(input) {
      this.total = input.total;
    }
    EvmWalletStatTokenTransfers2.create = function(input) {
      if (input instanceof EvmWalletStatTokenTransfers2) {
        return input;
      }
      return new EvmWalletStatTokenTransfers2(input);
    };
    EvmWalletStatTokenTransfers2.fromJSON = function(json) {
      var input = {
        total: json.total
      };
      return EvmWalletStatTokenTransfers2.create(input);
    };
    EvmWalletStatTokenTransfers2.prototype.toJSON = function() {
      return {
        total: this.total
      };
    };
    return EvmWalletStatTokenTransfers2;
  }()
);
var EvmWalletStat = (
  /** @class */
  function() {
    function EvmWalletStat2(input) {
      this.nfts = input.nfts;
      this.collections = input.collections;
      this.transactions = EvmWalletStatTransactions.create(input.transactions);
      this.nftTransfers = EvmWalletStatNftTransfers.create(input.nftTransfers);
      this.tokenTransfers = EvmWalletStatTokenTransfers.create(input.tokenTransfers);
    }
    EvmWalletStat2.create = function(input) {
      if (input instanceof EvmWalletStat2) {
        return input;
      }
      return new EvmWalletStat2(input);
    };
    EvmWalletStat2.fromJSON = function(json) {
      var input = {
        nfts: json.nfts,
        collections: json.collections,
        transactions: EvmWalletStatTransactions.fromJSON(json.transactions),
        nftTransfers: EvmWalletStatNftTransfers.fromJSON(json.nft_transfers),
        tokenTransfers: EvmWalletStatTokenTransfers.fromJSON(json.token_transfers)
      };
      return EvmWalletStat2.create(input);
    };
    EvmWalletStat2.prototype.toJSON = function() {
      return {
        nfts: this.nfts,
        collections: this.collections,
        transactions: this.transactions.toJSON(),
        nft_transfers: this.nftTransfers.toJSON(),
        token_transfers: this.tokenTransfers.toJSON()
      };
    };
    return EvmWalletStat2;
  }()
);
var EvmNftCollectionStatOwners = (
  /** @class */
  function() {
    function EvmNftCollectionStatOwners2(input) {
      this.current = input.current;
    }
    EvmNftCollectionStatOwners2.create = function(input) {
      if (input instanceof EvmNftCollectionStatOwners2) {
        return input;
      }
      return new EvmNftCollectionStatOwners2(input);
    };
    EvmNftCollectionStatOwners2.fromJSON = function(json) {
      var input = {
        current: json.current
      };
      return EvmNftCollectionStatOwners2.create(input);
    };
    EvmNftCollectionStatOwners2.prototype.toJSON = function() {
      return {
        current: this.current
      };
    };
    return EvmNftCollectionStatOwners2;
  }()
);
var EvmNftCollectionStatTransfers = (
  /** @class */
  function() {
    function EvmNftCollectionStatTransfers2(input) {
      this.total = input.total;
    }
    EvmNftCollectionStatTransfers2.create = function(input) {
      if (input instanceof EvmNftCollectionStatTransfers2) {
        return input;
      }
      return new EvmNftCollectionStatTransfers2(input);
    };
    EvmNftCollectionStatTransfers2.fromJSON = function(json) {
      var input = {
        total: json.total
      };
      return EvmNftCollectionStatTransfers2.create(input);
    };
    EvmNftCollectionStatTransfers2.prototype.toJSON = function() {
      return {
        total: this.total
      };
    };
    return EvmNftCollectionStatTransfers2;
  }()
);
var EvmNftCollectionStat = (
  /** @class */
  function() {
    function EvmNftCollectionStat2(input) {
      this.totalTokens = input.totalTokens;
      this.owners = EvmNftCollectionStatOwners.create(input.owners);
      this.transfers = EvmNftCollectionStatTransfers.create(input.transfers);
    }
    EvmNftCollectionStat2.create = function(input) {
      if (input instanceof EvmNftCollectionStat2) {
        return input;
      }
      return new EvmNftCollectionStat2(input);
    };
    EvmNftCollectionStat2.fromJSON = function(json) {
      var input = {
        totalTokens: json.total_tokens,
        owners: EvmNftCollectionStatOwners.fromJSON(json.owners),
        transfers: EvmNftCollectionStatTransfers.fromJSON(json.transfers)
      };
      return EvmNftCollectionStat2.create(input);
    };
    EvmNftCollectionStat2.prototype.toJSON = function() {
      return {
        total_tokens: this.totalTokens,
        owners: this.owners.toJSON(),
        transfers: this.transfers.toJSON()
      };
    };
    return EvmNftCollectionStat2;
  }()
);
var EvmNftTokenStatOwners = (
  /** @class */
  function() {
    function EvmNftTokenStatOwners2(input) {
      this.current = input.current;
    }
    EvmNftTokenStatOwners2.create = function(input) {
      if (input instanceof EvmNftTokenStatOwners2) {
        return input;
      }
      return new EvmNftTokenStatOwners2(input);
    };
    EvmNftTokenStatOwners2.fromJSON = function(json) {
      var input = {
        current: json.current
      };
      return EvmNftTokenStatOwners2.create(input);
    };
    EvmNftTokenStatOwners2.prototype.toJSON = function() {
      return {
        current: this.current
      };
    };
    return EvmNftTokenStatOwners2;
  }()
);
var EvmNftTokenStatTransfers = (
  /** @class */
  function() {
    function EvmNftTokenStatTransfers2(input) {
      this.total = input.total;
    }
    EvmNftTokenStatTransfers2.create = function(input) {
      if (input instanceof EvmNftTokenStatTransfers2) {
        return input;
      }
      return new EvmNftTokenStatTransfers2(input);
    };
    EvmNftTokenStatTransfers2.fromJSON = function(json) {
      var input = {
        total: json.total
      };
      return EvmNftTokenStatTransfers2.create(input);
    };
    EvmNftTokenStatTransfers2.prototype.toJSON = function() {
      return {
        total: this.total
      };
    };
    return EvmNftTokenStatTransfers2;
  }()
);
var EvmNftTokenStat = (
  /** @class */
  function() {
    function EvmNftTokenStat2(input) {
      this.owners = EvmNftTokenStatOwners.create(input.owners);
      this.transfers = EvmNftTokenStatTransfers.create(input.transfers);
    }
    EvmNftTokenStat2.create = function(input) {
      if (input instanceof EvmNftTokenStat2) {
        return input;
      }
      return new EvmNftTokenStat2(input);
    };
    EvmNftTokenStat2.fromJSON = function(json) {
      var input = {
        owners: EvmNftTokenStatOwners.fromJSON(json.owners),
        transfers: EvmNftTokenStatTransfers.fromJSON(json.transfers)
      };
      return EvmNftTokenStat2.create(input);
    };
    EvmNftTokenStat2.prototype.toJSON = function() {
      return {
        owners: this.owners.toJSON(),
        transfers: this.transfers.toJSON()
      };
    };
    return EvmNftTokenStat2;
  }()
);
var EvmErc20TokenStatTransfers = (
  /** @class */
  function() {
    function EvmErc20TokenStatTransfers2(input) {
      this.total = input.total;
    }
    EvmErc20TokenStatTransfers2.create = function(input) {
      if (input instanceof EvmErc20TokenStatTransfers2) {
        return input;
      }
      return new EvmErc20TokenStatTransfers2(input);
    };
    EvmErc20TokenStatTransfers2.fromJSON = function(json) {
      var input = {
        total: json.total
      };
      return EvmErc20TokenStatTransfers2.create(input);
    };
    EvmErc20TokenStatTransfers2.prototype.toJSON = function() {
      return {
        total: this.total
      };
    };
    return EvmErc20TokenStatTransfers2;
  }()
);
var EvmErc20TokenStat = (
  /** @class */
  function() {
    function EvmErc20TokenStat2(input) {
      this.transfers = EvmErc20TokenStatTransfers.create(input.transfers);
    }
    EvmErc20TokenStat2.create = function(input) {
      if (input instanceof EvmErc20TokenStat2) {
        return input;
      }
      return new EvmErc20TokenStat2(input);
    };
    EvmErc20TokenStat2.fromJSON = function(json) {
      var input = {
        transfers: EvmErc20TokenStatTransfers.fromJSON(json.transfers)
      };
      return EvmErc20TokenStat2.create(input);
    };
    EvmErc20TokenStat2.prototype.toJSON = function() {
      return {
        transfers: this.transfers.toJSON()
      };
    };
    return EvmErc20TokenStat2;
  }()
);
var EvmBlockTokenStatTransactions = (
  /** @class */
  function() {
    function EvmBlockTokenStatTransactions2(input) {
      this.total = input.total;
    }
    EvmBlockTokenStatTransactions2.create = function(input) {
      if (input instanceof EvmBlockTokenStatTransactions2) {
        return input;
      }
      return new EvmBlockTokenStatTransactions2(input);
    };
    EvmBlockTokenStatTransactions2.fromJSON = function(json) {
      var input = {
        total: json.total
      };
      return EvmBlockTokenStatTransactions2.create(input);
    };
    EvmBlockTokenStatTransactions2.prototype.toJSON = function() {
      return {
        total: this.total
      };
    };
    return EvmBlockTokenStatTransactions2;
  }()
);
var EvmBlockTokenStatNftTransfers = (
  /** @class */
  function() {
    function EvmBlockTokenStatNftTransfers2(input) {
      this.total = input.total;
    }
    EvmBlockTokenStatNftTransfers2.create = function(input) {
      if (input instanceof EvmBlockTokenStatNftTransfers2) {
        return input;
      }
      return new EvmBlockTokenStatNftTransfers2(input);
    };
    EvmBlockTokenStatNftTransfers2.fromJSON = function(json) {
      var input = {
        total: json.total
      };
      return EvmBlockTokenStatNftTransfers2.create(input);
    };
    EvmBlockTokenStatNftTransfers2.prototype.toJSON = function() {
      return {
        total: this.total
      };
    };
    return EvmBlockTokenStatNftTransfers2;
  }()
);
var EvmBlockTokenStat = (
  /** @class */
  function() {
    function EvmBlockTokenStat2(input) {
      this.transactions = EvmBlockTokenStatTransactions.create(input.transactions);
      this.nftTransfers = EvmBlockTokenStatNftTransfers.create(input.nftTransfers);
    }
    EvmBlockTokenStat2.create = function(input) {
      if (input instanceof EvmBlockTokenStat2) {
        return input;
      }
      return new EvmBlockTokenStat2(input);
    };
    EvmBlockTokenStat2.fromJSON = function(json) {
      var input = {
        transactions: EvmBlockTokenStatTransactions.fromJSON(json.transactions),
        nftTransfers: EvmBlockTokenStatNftTransfers.fromJSON(json.nft_transfers)
      };
      return EvmBlockTokenStat2.create(input);
    };
    EvmBlockTokenStat2.prototype.toJSON = function() {
      return {
        transactions: this.transactions.toJSON(),
        nft_transfers: this.nftTransfers.toJSON()
      };
    };
    return EvmBlockTokenStat2;
  }()
);
var GetNFTTradesOperation = {
  operationId: "getNFTTrades",
  groupName: "nft",
  httpMethod: "get",
  routePattern: "/nft/{address}/trades",
  parameterNames: ["chain", "from_block", "to_block", "from_date", "to_date", "marketplace", "cursor", "limit", "address"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmTradeCollection.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var fromBlock = request.fromBlock;
    var toBlock = request.toBlock;
    var fromDate = request.fromDate;
    var toDate = request.toDate;
    var marketplace = request.marketplace ? EvmGetNFTTradesMarketplaceEnum.create(request.marketplace) : void 0;
    var cursor = request.cursor;
    var limit = request.limit;
    var address = EvmAddress.create(request.address);
    return {
      chain: chain ? chain.toJSON() : void 0,
      from_block: fromBlock,
      to_block: toBlock !== void 0 ? String(toBlock) : void 0,
      from_date: fromDate,
      to_date: toDate !== void 0 ? toDate.toISOString() : void 0,
      marketplace: marketplace ? marketplace : void 0,
      cursor,
      limit,
      address: address.toJSON()
    };
  }
};
var GetMultipleTokenPricesOperation = {
  operationId: "getMultipleTokenPrices",
  groupName: "token",
  httpMethod: "post",
  routePattern: "/erc20/prices",
  parameterNames: ["chain", "include"],
  hasResponse: true,
  hasBody: true,
  parseResponse: function(json) {
    return json.map(function(item) {
      return EvmErc20Price.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var include = request.include ? EvmGetMultipleTokenPricesIncludeEnum.create(request.include) : void 0;
    return {
      chain: chain ? chain.toJSON() : void 0,
      include: include ? include : void 0
    };
  },
  serializeBody: function(body) {
    var value = EvmGetMultipleTokenPricesDto.create(body);
    return value.toJSON();
  }
};
var GetWalletTokenBalancesPriceOperation = {
  operationId: "getWalletTokenBalancesPrice",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/{address}/tokens",
  parameterNames: ["chain", "address", "to_block", "token_addresses", "exclude_spam", "exclude_unverified_contracts", "cursor", "limit", "exclude_native"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmErc20TokenBalanceWithPriceResult.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var address = EvmAddress.create(request.address);
    var toBlock = request.toBlock;
    var tokenAddresses = request.tokenAddresses ? request.tokenAddresses.map(function(item) {
      return EvmAddress.create(item);
    }) : void 0;
    var excludeSpam = request.excludeSpam;
    var excludeUnverifiedContracts = request.excludeUnverifiedContracts;
    var cursor = request.cursor;
    var limit = request.limit;
    var excludeNative = request.excludeNative;
    return {
      chain: chain ? chain.toJSON() : void 0,
      address: address.toJSON(),
      to_block: toBlock,
      token_addresses: tokenAddresses ? tokenAddresses.map(function(item) {
        return item.toJSON();
      }) : void 0,
      exclude_spam: excludeSpam,
      exclude_unverified_contracts: excludeUnverifiedContracts,
      cursor,
      limit,
      exclude_native: excludeNative
    };
  }
};
var GetWalletNetWorthOperation = {
  operationId: "getWalletNetWorth",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/{address}/net-worth",
  parameterNames: ["chains", "address", "exclude_spam", "exclude_unverified_contracts"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmNetWorthResult.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chains = request.chains ? request.chains.map(function(item) {
      return EvmChain.create(item);
    }) : void 0;
    var address = EvmAddress.create(request.address);
    var excludeSpam = request.excludeSpam;
    var excludeUnverifiedContracts = request.excludeUnverifiedContracts;
    return {
      chains: chains ? chains.map(function(item) {
        return item.toJSON();
      }) : void 0,
      address: address.toJSON(),
      exclude_spam: excludeSpam,
      exclude_unverified_contracts: excludeUnverifiedContracts
    };
  }
};
var Web3ApiVersionOperation = {
  operationId: "web3ApiVersion",
  groupName: "utils",
  httpMethod: "get",
  routePattern: "/web3/version",
  parameterNames: [],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmWeb3version.fromJSON(json);
  },
  serializeRequest: function(request) {
    return {};
  }
};
var EndpointWeightsOperation = {
  operationId: "endpointWeights",
  groupName: "utils",
  httpMethod: "get",
  routePattern: "/info/endpointWeights",
  parameterNames: [],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return EvmEndpointWeights.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    return {};
  }
};
var ResolveAddressToDomainOperation = {
  operationId: "resolveAddressToDomain",
  groupName: "resolve",
  httpMethod: "get",
  routePattern: "/resolve/{address}/domain",
  parameterNames: ["currency", "address"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmUnstoppableDomain.fromJSON(json);
  },
  serializeRequest: function(request) {
    var currency = request.currency ? EvmResolveAddressToDomainCurrencyEnum.create(request.currency) : void 0;
    var address = EvmAddress.create(request.address);
    return {
      currency: currency ? currency : void 0,
      address: address.toJSON()
    };
  }
};
var GetPairPriceOperation = {
  operationId: "getPairPrice",
  groupName: "defi",
  httpMethod: "get",
  routePattern: "/{token0_address}/{token1_address}/price",
  parameterNames: ["chain", "to_block", "to_date", "token0_address", "token1_address", "exchange"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmGetPairPrice.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var toBlock = request.toBlock;
    var toDate = request.toDate;
    var token0Address = EvmAddress.create(request.token0Address);
    var token1Address = EvmAddress.create(request.token1Address);
    var exchange = request.exchange;
    return {
      chain: chain ? chain.toJSON() : void 0,
      to_block: toBlock !== void 0 ? String(toBlock) : void 0,
      to_date: toDate !== void 0 ? toDate.toISOString() : void 0,
      token0_address: token0Address.toJSON(),
      token1_address: token1Address.toJSON(),
      exchange
    };
  }
};
var GetTopERC20TokensByMarketCapOperation = {
  operationId: "getTopERC20TokensByMarketCap",
  groupName: "marketData",
  httpMethod: "get",
  routePattern: "/market-data/erc20s/top-tokens",
  parameterNames: [],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return EvmMarketDataERC20TokenItem.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    return {};
  }
};
var GetTopERC20TokensByPriceMoversOperation = {
  operationId: "getTopERC20TokensByPriceMovers",
  groupName: "marketData",
  httpMethod: "get",
  routePattern: "/market-data/erc20s/top-movers",
  parameterNames: [],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmMarketDataERC20TokensByPriceMovers.fromJSON(json);
  },
  serializeRequest: function(request) {
    return {};
  }
};
var GetTopNFTCollectionsByMarketCapOperation = {
  operationId: "getTopNFTCollectionsByMarketCap",
  groupName: "marketData",
  httpMethod: "get",
  routePattern: "/market-data/nfts/top-collections",
  parameterNames: [],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return EvmMarketDataTopNFTCollectionByMarketCapItem.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    return {};
  }
};
var GetHottestNFTCollectionsByTradingVolumeOperation = {
  operationId: "getHottestNFTCollectionsByTradingVolume",
  groupName: "marketData",
  httpMethod: "get",
  routePattern: "/market-data/nfts/hottest-collections",
  parameterNames: [],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return EvmMarketDataHottestNFTCollectionByTradingVolumeItem.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    return {};
  }
};
var GetTopCryptoCurrenciesByMarketCapOperation = {
  operationId: "getTopCryptoCurrenciesByMarketCap",
  groupName: "marketData",
  httpMethod: "get",
  routePattern: "/market-data/global/market-cap",
  parameterNames: [],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return EvmMarketDataTopCryptoCurrenciesByMarketCapItem.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    return {};
  }
};
var GetTopCryptoCurrenciesByTradingVolumeOperation = {
  operationId: "getTopCryptoCurrenciesByTradingVolume",
  groupName: "marketData",
  httpMethod: "get",
  routePattern: "/market-data/global/volume",
  parameterNames: [],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return EvmMarketDataTopCryptoCurrenciesByMarketCapItem.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    return {};
  }
};
var ReviewContractsOperation = {
  operationId: "reviewContracts",
  groupName: "utils",
  httpMethod: "post",
  routePattern: "/contracts-review",
  parameterNames: ["chain"],
  hasResponse: true,
  hasBody: true,
  parseResponse: function(json) {
    return EvmReviewContracts.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    return {
      chain: chain ? chain.toJSON() : void 0
    };
  },
  serializeBody: function(body) {
    var value = EvmContractsReviewDto.create(body);
    return value.toJSON();
  }
};
var GetWalletActiveChainsOperation = {
  operationId: "getWalletActiveChains",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/{address}/chains",
  parameterNames: ["address", "chains"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmWalletActiveChains.fromJSON(json);
  },
  serializeRequest: function(request) {
    var address = EvmAddress.create(request.address);
    var chains = request.chains ? request.chains.map(function(item) {
      return EvmChain.create(item);
    }) : void 0;
    return {
      address: address.toJSON(),
      chains: chains ? chains.map(function(item) {
        return item.toJSON();
      }) : void 0
    };
  }
};
var GetWalletStatsOperation = {
  operationId: "getWalletStats",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/{address}/stats",
  parameterNames: ["chain", "address"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmWalletStat.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var address = EvmAddress.create(request.address);
    return {
      chain: chain ? chain.toJSON() : void 0,
      address: address.toJSON()
    };
  }
};
var GetNFTCollectionStatsOperation = {
  operationId: "getNFTCollectionStats",
  groupName: "nft",
  httpMethod: "get",
  routePattern: "/nft/{address}/stats",
  parameterNames: ["chain", "address"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmNftCollectionStat.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var address = EvmAddress.create(request.address);
    return {
      chain: chain ? chain.toJSON() : void 0,
      address: address.toJSON()
    };
  }
};
var GetNFTTokenStatsOperation = {
  operationId: "getNFTTokenStats",
  groupName: "nft",
  httpMethod: "get",
  routePattern: "/nft/{address}/{token_id}/stats",
  parameterNames: ["chain", "address", "token_id"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmNftTokenStat.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var address = EvmAddress.create(request.address);
    var tokenId = request.tokenId;
    return {
      chain: chain ? chain.toJSON() : void 0,
      address: address.toJSON(),
      token_id: tokenId
    };
  }
};
var GetTokenStatsOperation = {
  operationId: "getTokenStats",
  groupName: "token",
  httpMethod: "get",
  routePattern: "/erc20/{address}/stats",
  parameterNames: ["chain", "address"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmErc20TokenStat.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var address = EvmAddress.create(request.address);
    return {
      chain: chain ? chain.toJSON() : void 0,
      address: address.toJSON()
    };
  }
};
var GetBlockStatsOperation = {
  operationId: "getBlockStats",
  groupName: "block",
  httpMethod: "get",
  routePattern: "/block/{block_number_or_hash}/stats",
  parameterNames: ["chain", "block_number_or_hash"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmBlockTokenStat.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var blockNumberOrHash = request.blockNumberOrHash;
    return {
      chain: chain ? chain.toJSON() : void 0,
      block_number_or_hash: blockNumberOrHash
    };
  }
};
var operations = [
  GetNFTTradesOperation,
  GetMultipleTokenPricesOperation,
  GetWalletTokenBalancesPriceOperation,
  GetWalletNetWorthOperation,
  Web3ApiVersionOperation,
  EndpointWeightsOperation,
  ResolveAddressToDomainOperation,
  GetPairPriceOperation,
  GetTopERC20TokensByMarketCapOperation,
  GetTopERC20TokensByPriceMoversOperation,
  GetTopNFTCollectionsByMarketCapOperation,
  GetHottestNFTCollectionsByTradingVolumeOperation,
  GetTopCryptoCurrenciesByMarketCapOperation,
  GetTopCryptoCurrenciesByTradingVolumeOperation,
  ReviewContractsOperation,
  GetWalletActiveChainsOperation,
  GetWalletStatsOperation,
  GetNFTCollectionStatsOperation,
  GetNFTTokenStatsOperation,
  GetTokenStatsOperation,
  GetBlockStatsOperation
];
var CommonEvmUtilsConfig = {
  defaultEvmApiChain: {
    name: "defaultEvmApiChain",
    defaultValue: "0x1"
  }
};
var CommonEvmUtilsConfigSetup = (
  /** @class */
  function() {
    function CommonEvmUtilsConfigSetup2() {
    }
    CommonEvmUtilsConfigSetup2.register = function(config) {
      config.registerKey(CommonEvmUtilsConfig.defaultEvmApiChain);
    };
    return CommonEvmUtilsConfigSetup2;
  }()
);
var CommonEvmUtils = (
  /** @class */
  function(_super) {
    __extends2(CommonEvmUtils2, _super);
    function CommonEvmUtils2(core) {
      return _super.call(this, CommonEvmUtils2.moduleName, core) || this;
    }
    CommonEvmUtils2.create = function(core) {
      return new CommonEvmUtils2(core !== null && core !== void 0 ? core : CoreProvider.getDefault());
    };
    CommonEvmUtils2.prototype.setup = function() {
      CommonEvmUtilsConfigSetup.register(this.core.config);
    };
    CommonEvmUtils2.prototype.start = function() {
    };
    Object.defineProperty(CommonEvmUtils2.prototype, "EvmAddress", {
      get: function() {
        return EvmAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(CommonEvmUtils2.prototype, "EvmChain", {
      get: function() {
        return EvmChain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(CommonEvmUtils2.prototype, "EvmNative", {
      get: function() {
        return EvmNative;
      },
      enumerable: false,
      configurable: true
    });
    CommonEvmUtils2.moduleName = "evmUtils";
    return CommonEvmUtils2;
  }(Module)
);
var EvmChainResolver = (
  /** @class */
  function() {
    function EvmChainResolver2() {
    }
    EvmChainResolver2.resolve = function(chain, core) {
      if (chain) {
        return EvmChain.create(chain);
      }
      var defaultEvmChain = core.config.get(CommonEvmUtilsConfig.defaultEvmApiChain);
      return EvmChain.create(defaultEvmChain);
    };
    return EvmChainResolver2;
  }()
);
var getNativeBalanceOperation = {
  method: "GET",
  name: "getNativeBalance",
  id: "getNativeBalance",
  groupName: "balance",
  urlPathPattern: "/{address}/balance",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "toBlock"],
  getRequestUrlParams: getRequestUrlParams$H,
  serializeRequest: serializeRequest$H,
  deserializeRequest: deserializeRequest$H,
  deserializeResponse: deserializeResponse$H
};
function getRequestUrlParams$H(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    to_block: maybe(request.toBlock, String),
    address: EvmAddress.create(request.address).checksum
  };
}
function deserializeResponse$H(jsonResponse) {
  return {
    balance: EvmNative.create(jsonResponse.balance, "wei")
  };
}
function serializeRequest$H(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    toBlock: request.toBlock,
    address: EvmAddress.create(request.address).lowercase
  };
}
function deserializeRequest$H(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    toBlock: jsonRequest.toBlock,
    address: EvmAddress.create(jsonRequest.address)
  };
}
var getNativeBalancesForAddressesOperation = {
  method: "GET",
  name: "getNativeBalancesForAddresses",
  id: "getNativeBalancesForAddresses",
  groupName: "balance",
  urlPathPattern: "/wallets/balances",
  urlSearchParamNames: ["chain", "toBlock", "walletAddresses"],
  getRequestUrlParams: getRequestUrlParams$G,
  serializeRequest: serializeRequest$G,
  deserializeRequest: deserializeRequest$G,
  deserializeResponse: deserializeResponse$G
};
function getRequestUrlParams$G(request, core) {
  var _a;
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    to_block: maybe(request.toBlock, String),
    wallet_addresses: (_a = request.walletAddresses) === null || _a === void 0 ? void 0 : _a.map(function(address) {
      return EvmAddress.create(address).checksum;
    })
  };
}
function deserializeResponse$G(jsonResponse, request, core) {
  return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function(chainBalances) {
    return {
      chain: EvmChainResolver.resolve(request.chain, core),
      blockNumber: chainBalances.block_number,
      blockTimestamp: chainBalances.block_timestamp,
      totalBalance: EvmNative.create(chainBalances.total_balance, "wei"),
      walletBalances: chainBalances.wallet_balances.map(function(walletBalance) {
        return {
          address: EvmAddress.create(walletBalance.address),
          balance: EvmNative.create(walletBalance.balance, "wei")
        };
      })
    };
  });
}
function serializeRequest$G(request, core) {
  var _a;
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    toBlock: request.toBlock,
    walletAddresses: (_a = request.walletAddresses) === null || _a === void 0 ? void 0 : _a.map(function(address) {
      return EvmAddress.create(address).checksum;
    })
  };
}
function deserializeRequest$G(jsonRequest, core) {
  var _a;
  return {
    chain: EvmChainResolver.resolve(jsonRequest.chain, core),
    toBlock: jsonRequest.toBlock,
    walletAddresses: (_a = jsonRequest.walletAddresses) === null || _a === void 0 ? void 0 : _a.map(function(address) {
      return EvmAddress.create(address);
    })
  };
}
var getBlockOperation = {
  method: "GET",
  name: "getBlock",
  id: "getBlock",
  groupName: "block",
  isNullable: true,
  urlPathPattern: "/block/{blockNumberOrHash}",
  urlPathParamNames: ["blockNumberOrHash"],
  urlSearchParamNames: ["chain", "include"],
  getRequestUrlParams: getRequestUrlParams$F,
  serializeRequest: serializeRequest$F,
  deserializeRequest: deserializeRequest$F,
  deserializeResponse: deserializeResponse$F
};
function getRequestUrlParams$F(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    blockNumberOrHash: request.blockNumberOrHash,
    include: request.include
  };
}
function deserializeResponse$F(jsonResponse, request, core) {
  var _a;
  var data = toCamelCase(jsonResponse);
  var chain = EvmChainResolver.resolve(request.chain, core);
  return EvmBlock.create(__assign2(__assign2({}, data), { chain, transactions: ((_a = data.transactions) !== null && _a !== void 0 ? _a : []).map(function(transaction) {
    var _a2, _b;
    return EvmTransaction.create({
      cumulativeGasUsed: transaction.receiptCumulativeGasUsed,
      gasPrice: transaction.gasPrice,
      gasUsed: transaction.receiptGasUsed,
      index: transaction.transactionIndex,
      contractAddress: transaction.receiptContractAddress,
      receiptRoot: transaction.receiptRoot,
      receiptStatus: +transaction.receiptStatus,
      chain,
      data: transaction.input,
      from: transaction.fromAddress,
      hash: transaction.hash,
      nonce: transaction.nonce,
      value: transaction.value,
      blockHash: transaction.blockHash,
      blockNumber: +transaction.blockNumber,
      blockTimestamp: new Date(transaction.blockTimestamp),
      gas: transaction.gas,
      to: transaction.toAddress,
      logs: ((_a2 = transaction.logs) !== null && _a2 !== void 0 ? _a2 : []).map(function(jsonLog) {
        var log = toCamelCase(jsonLog);
        return EvmTransactionLog.create({
          chain,
          address: log.address,
          blockHash: log.blockHash,
          blockNumber: +log.blockNumber,
          data: log.data,
          topics: [log.topic0, log.topic1, log.topic2, log.topic3],
          transactionHash: log.transactionHash,
          blockTimestamp: log.blockTimestamp,
          logIndex: +log.logIndex,
          transactionIndex: +log.transactionIndex
        });
      }),
      internalTransactions: ((_b = transaction.internalTransactions) !== null && _b !== void 0 ? _b : []).map(function(jsonInternalTransaction) {
        var internalTransaction = toCamelCase(jsonInternalTransaction);
        return EvmInternalTransaction.create(__assign2({ chain }, internalTransaction));
      })
    });
  }) }));
}
function serializeRequest$F(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    blockNumberOrHash: request.blockNumberOrHash,
    include: request.include
  };
}
function deserializeRequest$F(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    blockNumberOrHash: jsonRequest.blockNumberOrHash,
    include: jsonRequest.include
  };
}
var getDateToBlockOperation = {
  method: "GET",
  name: "getDateToBlock",
  id: "getDateToBlock",
  groupName: "block",
  urlPathPattern: "/dateToBlock",
  urlSearchParamNames: ["chain", "date"],
  getRequestUrlParams: getRequestUrlParams$E,
  serializeRequest: serializeRequest$E,
  deserializeRequest: deserializeRequest$E,
  deserializeResponse: deserializeResponse$E
};
function getRequestUrlParams$E(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    date: new Date(request.date).toISOString()
  };
}
function deserializeResponse$E(jsonResponse) {
  return EvmBlockDate.create(jsonResponse);
}
function serializeRequest$E(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    date: new Date(request.date).toISOString()
  };
}
function deserializeRequest$E(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    date: new Date(jsonRequest.date)
  };
}
var getPairAddressOperation = {
  method: "GET",
  name: "getPairAddress",
  id: "getPairAddress",
  groupName: "defi",
  urlPathPattern: "/{token0Address}/{token1Address}/pairAddress",
  urlPathParamNames: ["token0Address", "token1Address"],
  urlSearchParamNames: ["chain", "toBlock", "toDate", "exchange"],
  getRequestUrlParams: getRequestUrlParams$D,
  serializeRequest: serializeRequest$D,
  deserializeRequest: deserializeRequest$D,
  deserializeResponse: deserializeResponse$D
};
function getRequestUrlParams$D(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    to_block: request.toBlock,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    exchange: request.exchange,
    token0Address: EvmAddress.create(request.token0Address).lowercase,
    token1Address: EvmAddress.create(request.token1Address).lowercase
  };
}
function createErc20Token(token, core, chain) {
  var _a, _b, _c;
  return Erc20Token.create({
    contractAddress: (token === null || token === void 0 ? void 0 : token.address) ? EvmAddress.create(token === null || token === void 0 ? void 0 : token.address) : "",
    decimals: (_a = token === null || token === void 0 ? void 0 : token.decimals) !== null && _a !== void 0 ? _a : 0,
    name: (_b = token === null || token === void 0 ? void 0 : token.name) !== null && _b !== void 0 ? _b : "",
    symbol: (_c = token === null || token === void 0 ? void 0 : token.symbol) !== null && _c !== void 0 ? _c : "",
    logo: token === null || token === void 0 ? void 0 : token.logo,
    thumbnail: token === null || token === void 0 ? void 0 : token.thumbnail,
    chain: EvmChainResolver.resolve(chain, core)
  });
}
function deserializeResponse$D(jsonResponse, request, core) {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  return {
    //   ApiResult types generated all come as undefined which should not be the case TODO:
    token0: {
      token: createErc20Token(jsonResponse.token0, core, request.chain),
      blockNumber: (_a = jsonResponse.token0) === null || _a === void 0 ? void 0 : _a.block_number,
      validated: (_b = jsonResponse.token0) === null || _b === void 0 ? void 0 : _b.validated,
      createdAt: ((_c = jsonResponse.token0) === null || _c === void 0 ? void 0 : _c.created_at) ? new Date((_d = jsonResponse.token0) === null || _d === void 0 ? void 0 : _d.created_at) : void 0
    },
    token1: {
      token: createErc20Token(jsonResponse.token1, core, request.chain),
      blockNumber: (_e = jsonResponse.token1) === null || _e === void 0 ? void 0 : _e.block_number,
      validated: (_f = jsonResponse.token1) === null || _f === void 0 ? void 0 : _f.validated,
      createdAt: ((_g = jsonResponse.token1) === null || _g === void 0 ? void 0 : _g.created_at) ? new Date((_h = jsonResponse.token1) === null || _h === void 0 ? void 0 : _h.created_at) : void 0
    },
    pairAddress: jsonResponse.pairAddress ? EvmAddress.create(jsonResponse.pairAddress) : void 0
  };
}
function serializeRequest$D(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    toBlock: request.toBlock,
    toDate: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    exchange: request.exchange,
    token0Address: EvmAddress.create(request.token0Address).lowercase,
    token1Address: EvmAddress.create(request.token1Address).lowercase
  };
}
function deserializeRequest$D(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    toBlock: jsonRequest.toBlock,
    toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : void 0,
    exchange: jsonRequest.exchange,
    token0Address: EvmAddress.create(jsonRequest.token0Address),
    token1Address: EvmAddress.create(jsonRequest.token1Address)
  };
}
var getPairReservesOperation = {
  method: "GET",
  name: "getPairReserves",
  id: "getPairReserves",
  groupName: "defi",
  urlPathPattern: "/{pairAddress}/reserves",
  urlPathParamNames: ["pairAddress"],
  urlSearchParamNames: ["chain", "toBlock", "toDate"],
  getRequestUrlParams: getRequestUrlParams$C,
  serializeRequest: serializeRequest$C,
  deserializeRequest: deserializeRequest$C,
  deserializeResponse: deserializeResponse$C
};
function getRequestUrlParams$C(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    pairAddress: EvmAddress.create(request.pairAddress).lowercase,
    to_block: request.toBlock,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0
  };
}
function serializeRequest$C(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    toBlock: request.toBlock,
    toDate: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    pairAddress: EvmAddress.create(request.pairAddress).lowercase
  };
}
function deserializeRequest$C(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    toBlock: jsonRequest.toBlock,
    toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : void 0,
    pairAddress: EvmAddress.create(jsonRequest.pairAddress)
  };
}
function deserializeResponse$C(jsonResponse) {
  return jsonResponse;
}
var getContractEventsOperation = {
  method: "POST",
  name: "getContractEvents",
  id: "getContractEvents",
  groupName: "events",
  urlPathPattern: "/{address}/events",
  urlPathParamNames: ["address"],
  urlSearchParamNames: [
    "chain",
    "fromBlock",
    "toBlock",
    "fromDate",
    "toDate",
    "topic",
    "offset",
    "limit",
    "cursor",
    "order"
  ],
  bodyParamNames: ["abi"],
  bodyType: "raw",
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$B,
  getRequestBody: getRequestBody$3,
  serializeRequest: serializeRequest$B,
  deserializeRequest: deserializeRequest$B,
  deserializeResponse: deserializeResponse$B
};
function getRequestUrlParams$B(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    from_block: maybe(request.fromBlock, String),
    to_block: maybe(request.toBlock, String),
    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    topic: request.topic,
    offset: maybe(request.offset, String),
    limit: maybe(request.limit, String),
    address: EvmAddress.create(request.address).lowercase,
    cursor: request.cursor,
    order: request.order
  };
}
function getRequestBody$3(request) {
  return request.abi;
}
function deserializeResponse$B(jsonResponse, request, core) {
  var _a, _b;
  return (_b = (_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []) === null || _b === void 0 ? void 0 : _b.map(function(event) {
    return EvmEvent.create({
      chain: EvmChainResolver.resolve(request.chain, core),
      address: request.address,
      blockHash: event.block_hash,
      blockNumber: event.block_number,
      blockTimestamp: event.block_timestamp,
      transactionHash: event.transaction_hash,
      data: {
        to: event.data.to,
        from: event.data.from,
        value: maybe(event.data.value, function(value) {
          return EvmNative.create(value, "wei");
        })
      }
    });
  });
}
function serializeRequest$B(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    fromDate: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    toDate: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    topic: request.topic,
    offset: request.offset,
    limit: request.limit,
    address: EvmAddress.create(request.address).lowercase,
    abi: request.abi,
    cursor: request.cursor,
    order: request.order
  };
}
function deserializeRequest$B(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    fromDate: jsonRequest.fromDate ? new Date(jsonRequest.fromDate) : void 0,
    toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : void 0,
    topic: jsonRequest.topic,
    offset: jsonRequest.offset,
    limit: jsonRequest.limit,
    address: EvmAddress.create(jsonRequest.address),
    abi: jsonRequest.abi,
    cursor: jsonRequest.cursor,
    order: jsonRequest.order
  };
}
var getContractLogsOperation = {
  method: "GET",
  name: "getContractLogs",
  id: "getContractLogs",
  groupName: "events",
  urlPathPattern: "/{address}/logs",
  urlPathParamNames: ["address"],
  urlSearchParamNames: [
    "chain",
    "blockNumber",
    "fromBlock",
    "toBlock",
    "fromDate",
    "toDate",
    "topic0",
    "limit",
    "cursor",
    "order"
  ],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$A,
  serializeRequest: serializeRequest$A,
  deserializeRequest: deserializeRequest$A,
  deserializeResponse: deserializeResponse$A
};
function getRequestUrlParams$A(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    block_number: request.blockNumber,
    from_block: request.fromBlock,
    to_block: request.toBlock,
    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    topic0: request.topic0,
    limit: maybe(request.limit, String),
    cursor: request.cursor,
    address: EvmAddress.create(request.address).lowercase,
    order: request.order
  };
}
function serializeRequest$A(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    blockNumber: request.blockNumber,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    fromDate: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    toDate: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    topic0: request.topic0,
    limit: request.limit,
    cursor: request.cursor,
    address: EvmAddress.create(request.address).lowercase,
    order: request.order
  };
}
function deserializeRequest$A(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    blockNumber: jsonRequest.blockNumber,
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    fromDate: jsonRequest.fromDate ? new Date(jsonRequest.fromDate) : void 0,
    toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : void 0,
    topic0: jsonRequest.topic0,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    address: EvmAddress.create(jsonRequest.address),
    order: jsonRequest.order
  };
}
function deserializeResponse$A(jsonResponse, request, core) {
  var _a, _b;
  return (_b = (_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []) === null || _b === void 0 ? void 0 : _b.map(function(log) {
    return EvmTransactionLog.create(__assign2(__assign2({}, toCamelCase(log)), { topics: [log.topic0, log.topic1, log.topic2, log.topic3], blockNumber: Number(log.block_number), chain: EvmChainResolver.resolve(request.chain, core) }));
  });
}
var uploadFolderOperation = {
  method: "POST",
  name: "uploadFolder",
  id: "uploadFolder",
  groupName: "ipfs",
  urlPathPattern: "/ipfs/uploadFolder",
  bodyType: "raw",
  bodyParamNames: ["abi"],
  getRequestUrlParams: getRequestUrlParams$z,
  serializeRequest: serializeRequest$z,
  deserializeRequest: deserializeRequest$z,
  deserializeResponse: deserializeResponse$z,
  getRequestBody: getRequestBody$2
};
function getRequestUrlParams$z(_) {
  return {};
}
function getRequestBody$2(request) {
  return request.abi;
}
function deserializeResponse$z(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$z(request) {
  return {
    abi: JSON.stringify(request.abi)
  };
}
function deserializeRequest$z(jsonRequest) {
  return {
    abi: JSON.parse(jsonRequest.abi)
  };
}
var getContractNFTsOperation = {
  method: "GET",
  name: "getContractNFTs",
  id: "getContractNFTs",
  groupName: "nft",
  urlPathPattern: "/nft/{address}",
  urlPathParamNames: ["address"],
  urlSearchParamNames: [
    "chain",
    "format",
    "limit",
    "totalRanges",
    "range",
    "cursor",
    "normalizeMetadata",
    "mediaItems"
  ],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$y,
  serializeRequest: serializeRequest$y,
  deserializeRequest: deserializeRequest$y,
  deserializeResponse: deserializeResponse$y
};
function getRequestUrlParams$y(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    format: request.format,
    limit: maybe(request.limit, String),
    totalRanges: maybe(request.totalRanges, String),
    range: maybe(request.range, String),
    cursor: request.cursor,
    normalizeMetadata: request.normalizeMetadata,
    media_items: request.mediaItems
  };
}
function deserializeResponse$y(jsonResponse, request, core) {
  var _a;
  return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function(data) {
    var chain = EvmChainResolver.resolve(request.chain, core);
    var nft = toCamelCase(data);
    return EvmNft.create(__assign2(__assign2({}, toCamelCase(nft)), { chain, ownerOf: nft.ownerOf ? EvmAddress.create(nft.ownerOf) : void 0, lastMetadataSync: nft.lastMetadataSync ? new Date(nft.lastMetadataSync) : void 0, lastTokenUriSync: nft.lastTokenUriSync ? new Date(nft.lastTokenUriSync) : void 0, media: maybe(nft.media, function(media) {
      return EvmNftMedia.create(__assign2({ chain }, toCamelCase(media)));
    }) }));
  });
}
function serializeRequest$y(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    format: request.format,
    limit: request.limit,
    totalRanges: request.totalRanges,
    range: request.range,
    cursor: request.cursor,
    address: EvmAddress.create(request.address).checksum,
    normalizeMetadata: request.normalizeMetadata,
    mediaItems: request.mediaItems
  };
}
function deserializeRequest$y(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    format: jsonRequest.format,
    limit: jsonRequest.limit,
    totalRanges: jsonRequest.totalRanges,
    range: jsonRequest.range,
    cursor: jsonRequest.cursor,
    address: EvmAddress.create(jsonRequest.address),
    normalizeMetadata: jsonRequest.normalizeMetadata,
    mediaItems: jsonRequest.mediaItems
  };
}
var getMultipleNFTsOperation = {
  method: "POST",
  name: "getMultipleNFTs",
  id: "getMultipleNFTs",
  groupName: "nft",
  urlPathPattern: "/nft/getMultipleNFTs",
  urlSearchParamNames: ["chain"],
  bodyType: "properties",
  bodyParamNames: ["tokens", "normalizeMetadata", "mediaItems"],
  getRequestUrlParams: getRequestUrlParams$x,
  getRequestBody: getRequestBody$1,
  serializeRequest: serializeRequest$x,
  deserializeRequest: deserializeRequest$x,
  deserializeResponse: deserializeResponse$x
};
function getRequestUrlParams$x(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex
  };
}
function getRequestBody$1(request) {
  return {
    tokens: request.tokens.map(function(token) {
      return {
        token_address: EvmAddress.create(token.tokenAddress).lowercase,
        token_id: token.tokenId
      };
    }),
    normalizeMetadata: request.normalizeMetadata,
    media_items: request.mediaItems
  };
}
function deserializeResponse$x(jsonResponse, request, core) {
  return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function(data) {
    if (data === null) {
      return null;
    }
    var chain = EvmChainResolver.resolve(request.chain, core);
    var nft = toCamelCase(data);
    return EvmNft.create(__assign2(__assign2({}, toCamelCase(nft)), { chain: EvmChainResolver.resolve(request.chain, core), amount: nft.amount ? parseInt(nft.amount, 10) : void 0, ownerOf: EvmAddress.create(nft.ownerOf), lastMetadataSync: dateInputToDate(nft.lastMetadataSync), lastTokenUriSync: dateInputToDate(nft.lastTokenUriSync), media: maybe(nft.media, function(media) {
      return EvmNftMedia.create(__assign2({ chain }, toCamelCase(media)));
    }) }));
  });
}
function serializeRequest$x(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    normalizeMetadata: request.normalizeMetadata,
    tokens: request.tokens.map(function(token) {
      return {
        tokenAddress: EvmAddress.create(token.tokenAddress).lowercase,
        tokenId: token.tokenId
      };
    }),
    mediaItems: request.mediaItems
  };
}
function deserializeRequest$x(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    normalizeMetadata: jsonRequest.normalizeMetadata,
    tokens: jsonRequest.tokens.map(function(token) {
      return {
        tokenAddress: EvmAddress.create(token.tokenAddress),
        tokenId: token.tokenId
      };
    }),
    mediaItems: jsonRequest.mediaItems
  };
}
var getNFTContractMetadataOperation = {
  method: "GET",
  name: "getNFTContractMetadata",
  id: "getNFTContractMetadata",
  groupName: "nft",
  isNullable: true,
  urlPathPattern: "/nft/{address}/metadata",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain"],
  getRequestUrlParams: getRequestUrlParams$w,
  serializeRequest: serializeRequest$w,
  deserializeRequest: deserializeRequest$w,
  deserializeResponse: deserializeResponse$w
};
function getRequestUrlParams$w(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    address: EvmAddress.create(request.address).lowercase
  };
}
function deserializeResponse$w(jsonResponse, request, core) {
  return EvmNftMetadata.create(__assign2(__assign2({}, toCamelCase(jsonResponse)), { chain: EvmChainResolver.resolve(request.chain, core), tokenAddress: EvmAddress.create(jsonResponse.token_address), syncedAt: jsonResponse.synced_at ? new Date(jsonResponse.synced_at) : null, contractType: maybe(jsonResponse.contract_type) }));
}
function serializeRequest$w(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    address: EvmAddress.create(request.address).checksum
  };
}
function deserializeRequest$w(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    address: EvmAddress.create(jsonRequest.address)
  };
}
var getNFTContractTransfersOperation = {
  method: "GET",
  name: "getNFTContractTransfers",
  id: "getNFTContractTransfers",
  groupName: "nft",
  urlPathPattern: "/nft/{address}/transfers",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "format", "limit", "cursor", "fromBlock", "fromDate", "toBlock", "toDate", "order"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$v,
  serializeRequest: serializeRequest$v,
  deserializeRequest: deserializeRequest$v,
  deserializeResponse: deserializeResponse$v
};
function getRequestUrlParams$v(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    format: request.format,
    limit: maybe(request.limit, String),
    from_block: maybe(request.fromBlock, String),
    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    to_block: maybe(request.toBlock, String),
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    cursor: request.cursor,
    order: request.order
  };
}
function deserializeResponse$v(jsonResponse, request, core) {
  var _a;
  return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function(transfer) {
    return EvmNftTransfer.create(__assign2(__assign2({}, toCamelCase(transfer)), { chain: EvmChainResolver.resolve(request.chain, core), tokenAddress: EvmAddress.create(transfer.to_address), toAddress: EvmAddress.create(transfer.to_address), operator: transfer.operator ? EvmAddress.create(transfer.operator) : null, fromAddress: transfer.from_address ? EvmAddress.create(transfer.from_address) : null, value: transfer.value ? EvmNative.create(transfer.value, "wei") : null, blockTimestamp: new Date(transfer.block_timestamp) }));
  });
}
function serializeRequest$v(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    format: request.format,
    limit: request.limit,
    cursor: request.cursor,
    address: EvmAddress.create(request.address).checksum,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    fromDate: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    toDate: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    order: request.order
  };
}
function deserializeRequest$v(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    format: jsonRequest.format,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    address: EvmAddress.create(jsonRequest.address),
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    fromDate: jsonRequest.fromDate ? new Date(jsonRequest.fromDate) : void 0,
    toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : void 0,
    order: jsonRequest.order
  };
}
var getNFTLowestPriceOperation = {
  method: "GET",
  name: "getNFTLowestPrice",
  id: "getNFTLowestPrice",
  groupName: "nft",
  isNullable: true,
  urlPathPattern: "/nft/{address}/lowestprice",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "days", "marketplace"],
  getRequestUrlParams: getRequestUrlParams$u,
  serializeRequest: serializeRequest$u,
  deserializeRequest: deserializeRequest$u,
  deserializeResponse: deserializeResponse$u
};
function getRequestUrlParams$u(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    days: maybe(request.days, String),
    marketplace: request.marketplace
  };
}
function deserializeResponse$u(jsonResponse) {
  return EvmTrade.fromJSON(jsonResponse);
}
function serializeRequest$u(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    days: request.days,
    marketplace: request.marketplace,
    address: EvmAddress.create(request.address).checksum
  };
}
function deserializeRequest$u(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    days: jsonRequest.days,
    marketplace: jsonRequest.marketplace,
    address: EvmAddress.create(jsonRequest.address)
  };
}
var getNFTMetadataOperation = {
  method: "GET",
  name: "getNFTMetadata",
  id: "getNFTMetadata",
  groupName: "nft",
  isNullable: true,
  urlPathPattern: "/nft/{address}/{tokenId}",
  urlPathParamNames: ["address", "tokenId"],
  urlSearchParamNames: ["chain", "format", "normalizeMetadata", "mediaItems"],
  getRequestUrlParams: getRequestUrlParams$t,
  serializeRequest: serializeRequest$t,
  deserializeRequest: deserializeRequest$t,
  deserializeResponse: deserializeResponse$t
};
function getRequestUrlParams$t(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    tokenId: request.tokenId,
    format: request.format,
    normalizeMetadata: request.normalizeMetadata,
    media_items: request.mediaItems
  };
}
function deserializeResponse$t(jsonResponse, request, core) {
  var chain = EvmChainResolver.resolve(request.chain, core);
  var nft = toCamelCase(jsonResponse);
  return EvmNft.create(__assign2(__assign2({}, nft), { chain: EvmChainResolver.resolve(request.chain, core), ownerOf: nft.ownerOf ? EvmAddress.create(nft.ownerOf) : void 0, lastMetadataSync: nft.lastMetadataSync ? new Date(nft.lastMetadataSync) : void 0, lastTokenUriSync: nft.lastTokenUriSync ? new Date(nft.lastTokenUriSync) : void 0, media: maybe(nft.media, function(media) {
    return EvmNftMedia.create(__assign2({ chain }, toCamelCase(media)));
  }) }));
}
function serializeRequest$t(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    format: request.format,
    address: EvmAddress.create(request.address).checksum,
    tokenId: request.tokenId,
    normalizeMetadata: request.normalizeMetadata,
    mediaItems: request.mediaItems
  };
}
function deserializeRequest$t(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    format: jsonRequest.format,
    address: EvmAddress.create(jsonRequest.address),
    tokenId: jsonRequest.tokenId,
    normalizeMetadata: jsonRequest.normalizeMetadata,
    mediaItems: jsonRequest.mediaItems
  };
}
var getNFTOwnersOperation = {
  method: "GET",
  name: "getNFTOwners",
  id: "getNFTOwners",
  groupName: "nft",
  urlPathPattern: "/nft/{address}/owners",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "format", "limit", "cursor", "normalizeMetadata", "mediaItems"],
  firstPageIndex: 1,
  getRequestUrlParams: getRequestUrlParams$s,
  serializeRequest: serializeRequest$s,
  deserializeRequest: deserializeRequest$s,
  deserializeResponse: deserializeResponse$s
};
function getRequestUrlParams$s(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    format: request.format,
    limit: maybe(request.limit, String),
    cursor: request.cursor,
    normalizeMetadata: request.normalizeMetadata,
    media_items: request.mediaItems
  };
}
function deserializeResponse$s(jsonResponse, request, core) {
  var _a;
  return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function(data) {
    var chain = EvmChainResolver.resolve(request.chain, core);
    var nft = toCamelCase(data);
    return EvmNft.create(__assign2(__assign2({}, nft), { chain: EvmChainResolver.resolve(request.chain, core), ownerOf: EvmAddress.create(nft.ownerOf), lastMetadataSync: new Date(nft.lastMetadataSync), lastTokenUriSync: new Date(nft.lastTokenUriSync), media: maybe(nft.media, function(media) {
      return EvmNftMedia.create(__assign2({ chain }, toCamelCase(media)));
    }) }));
  });
}
function serializeRequest$s(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    format: request.format,
    limit: request.limit,
    cursor: request.cursor,
    address: EvmAddress.create(request.address).checksum,
    normalizeMetadata: request.normalizeMetadata,
    mediaItems: request.mediaItems
  };
}
function deserializeRequest$s(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    format: jsonRequest.format,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    address: EvmAddress.create(jsonRequest.address),
    normalizeMetadata: jsonRequest.normalizeMetadata,
    mediaItems: jsonRequest.mediaItems
  };
}
var getNFTTokenIdOwnersOperation = {
  method: "GET",
  name: "getNFTTokenIdOwners",
  id: "getNFTTokenIdOwners",
  groupName: "nft",
  urlPathPattern: "/nft/{address}/{tokenId}/owners",
  urlPathParamNames: ["address", "tokenId"],
  urlSearchParamNames: ["chain", "format", "limit", "cursor", "normalizeMetadata", "mediaItems"],
  firstPageIndex: 1,
  getRequestUrlParams: getRequestUrlParams$r,
  serializeRequest: serializeRequest$r,
  deserializeRequest: deserializeRequest$r,
  deserializeResponse: deserializeResponse$r
};
function getRequestUrlParams$r(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    format: request.format,
    limit: maybe(request.limit, String),
    cursor: request.cursor,
    tokenId: request.tokenId,
    normalizeMetadata: request.normalizeMetadata,
    media_items: request.mediaItems
  };
}
function deserializeResponse$r(jsonResponse, request, core) {
  var _a;
  return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function(data) {
    var chain = EvmChainResolver.resolve(request.chain, core);
    var nft = toCamelCase(data);
    return EvmNft.create(__assign2(__assign2({}, toCamelCase(nft)), { chain: EvmChainResolver.resolve(request.chain, core), ownerOf: EvmAddress.create(nft.ownerOf), lastMetadataSync: new Date(nft.lastMetadataSync), lastTokenUriSync: new Date(nft.lastTokenUriSync), media: maybe(nft.media, function(media) {
      return EvmNftMedia.create(__assign2({ chain }, toCamelCase(media)));
    }) }));
  });
}
function serializeRequest$r(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    format: request.format,
    limit: request.limit,
    cursor: request.cursor,
    address: EvmAddress.create(request.address).checksum,
    tokenId: request.tokenId,
    normalizeMetadata: request.normalizeMetadata,
    mediaItems: request.mediaItems
  };
}
function deserializeRequest$r(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    format: jsonRequest.format,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    address: EvmAddress.create(jsonRequest.address),
    tokenId: jsonRequest.tokenId,
    normalizeMetadata: jsonRequest.normalizeMetadata,
    mediaItems: jsonRequest.mediaItems
  };
}
var getNFTTradesOperation = {
  method: "GET",
  name: "getNFTTrades",
  id: "getNFTTrades",
  groupName: "nft",
  urlPathPattern: "/nft/{address}/trades",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "fromBlock", "toBlock", "fromDate", "toDate", "marketplace", "cursor", "limit"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$q,
  serializeRequest: serializeRequest$q,
  deserializeRequest: deserializeRequest$q,
  deserializeResponse: deserializeResponse$q
};
function getRequestUrlParams$q(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    from_block: maybe(request.fromBlock, String),
    to_block: maybe(request.toBlock, String),
    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    marketplace: request.marketplace,
    cursor: request.cursor,
    limit: maybe(request.limit, String)
  };
}
function deserializeResponse$q(jsonResponse) {
  var _a;
  return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function(trade) {
    return EvmTrade.fromJSON(trade);
  });
}
function serializeRequest$q(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    fromDate: request.fromDate,
    toDate: request.toDate,
    marketplace: request.marketplace,
    cursor: request.cursor,
    limit: request.limit,
    address: EvmAddress.create(request.address).checksum
  };
}
function deserializeRequest$q(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    fromDate: jsonRequest.fromDate,
    toDate: jsonRequest.toDate,
    marketplace: jsonRequest.marketplace,
    cursor: jsonRequest.cursor,
    limit: jsonRequest.limit,
    address: EvmAddress.create(jsonRequest.address)
  };
}
var getNFTTransfersByBlockOperation = {
  method: "GET",
  name: "getNFTTransfersByBlock",
  id: "getNFTTransfersByBlock",
  groupName: "nft",
  urlPathPattern: "/block/{blockNumberOrHash}/nft/transfers",
  urlPathParamNames: ["blockNumberOrHash"],
  urlSearchParamNames: ["chain", "limit", "cursor", "order"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$p,
  serializeRequest: serializeRequest$p,
  deserializeRequest: deserializeRequest$p,
  deserializeResponse: deserializeResponse$p
};
function getRequestUrlParams$p(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    limit: maybe(request.limit, String),
    cursor: request.cursor,
    blockNumberOrHash: request.blockNumberOrHash,
    order: request.order
  };
}
function deserializeResponse$p(jsonResponse, request, core) {
  var _a;
  return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function(transfer) {
    return EvmNftTransfer.create(__assign2(__assign2({}, toCamelCase(transfer)), { chain: EvmChainResolver.resolve(request.chain, core), tokenAddress: EvmAddress.create(transfer.token_address), toAddress: EvmAddress.create(transfer.to_address), operator: transfer.operator ? EvmAddress.create(transfer.operator) : null, fromAddress: transfer.from_address ? EvmAddress.create(transfer.from_address) : null, value: transfer.value ? EvmNative.create(transfer.value, "wei") : null, blockTimestamp: new Date(transfer.block_timestamp) }));
  });
}
function serializeRequest$p(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    limit: request.limit,
    cursor: request.cursor,
    blockNumberOrHash: request.blockNumberOrHash,
    order: request.order
  };
}
function deserializeRequest$p(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    blockNumberOrHash: jsonRequest.blockNumberOrHash,
    order: jsonRequest.order
  };
}
var getNFTTransfersFromToBlockOperation = {
  method: "GET",
  name: "getNFTTransfersFromToBlock",
  id: "getNFTTransfersFromToBlock",
  groupName: "nft",
  urlPathPattern: "/nft/transfers",
  urlSearchParamNames: ["chain", "fromBlock", "toBlock", "fromDate", "toDate", "format", "limit", "cursor", "order"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$o,
  serializeRequest: serializeRequest$o,
  deserializeRequest: deserializeRequest$o,
  deserializeResponse: deserializeResponse$o
};
function getRequestUrlParams$o(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    from_block: maybe(request.fromBlock, String),
    to_block: maybe(request.toBlock, String),
    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    format: request.format,
    limit: maybe(request.limit, String),
    cursor: request.cursor,
    order: request.order
  };
}
function deserializeResponse$o(jsonResponse, request, core) {
  var _a;
  return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function(transfer) {
    return EvmNftTransfer.create(__assign2(__assign2({}, toCamelCase(transfer)), { chain: EvmChainResolver.resolve(request.chain, core), tokenAddress: EvmAddress.create(transfer.to_address), toAddress: EvmAddress.create(transfer.to_address), operator: transfer.operator ? EvmAddress.create(transfer.operator) : null, fromAddress: transfer.from_address ? EvmAddress.create(transfer.from_address) : null, value: transfer.value ? EvmNative.create(transfer.value, "wei") : null, blockTimestamp: new Date(transfer.block_timestamp) }));
  });
}
function serializeRequest$o(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    fromDate: request.fromDate,
    toDate: request.toDate,
    format: request.format,
    limit: request.limit,
    cursor: request.cursor,
    order: request.order
  };
}
function deserializeRequest$o(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    fromDate: jsonRequest.fromDate,
    toDate: jsonRequest.toDate,
    format: jsonRequest.format,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    order: jsonRequest.order
  };
}
var getNFTTransfersOperation = {
  method: "GET",
  name: "getNFTTransfers",
  id: "getNFTTransfers",
  groupName: "nft",
  urlPathPattern: "/nft/{address}/{tokenId}/transfers",
  urlPathParamNames: ["address", "tokenId"],
  urlSearchParamNames: ["chain", "format", "limit", "cursor", "order"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$n,
  serializeRequest: serializeRequest$n,
  deserializeRequest: deserializeRequest$n,
  deserializeResponse: deserializeResponse$n
};
function getRequestUrlParams$n(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    format: request.format,
    limit: maybe(request.limit, String),
    cursor: request.cursor,
    tokenId: request.tokenId,
    order: request.order
  };
}
function deserializeResponse$n(jsonResponse, request, core) {
  var _a;
  return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function(transfer) {
    return EvmNftTransfer.create(__assign2(__assign2({}, toCamelCase(transfer)), { chain: EvmChainResolver.resolve(request.chain, core), tokenAddress: EvmAddress.create(transfer.to_address), toAddress: EvmAddress.create(transfer.to_address), operator: transfer.operator ? EvmAddress.create(transfer.operator) : null, fromAddress: transfer.from_address ? EvmAddress.create(transfer.from_address) : null, value: transfer.value ? EvmNative.create(transfer.value, "wei") : null, blockTimestamp: new Date(transfer.block_timestamp) }));
  });
}
function serializeRequest$n(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    format: request.format,
    limit: request.limit,
    cursor: request.cursor,
    address: EvmAddress.create(request.address).checksum,
    tokenId: request.tokenId,
    order: request.order
  };
}
function deserializeRequest$n(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    format: jsonRequest.format,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    address: EvmAddress.create(jsonRequest.address),
    tokenId: jsonRequest.tokenId,
    order: jsonRequest.order
  };
}
var getWalletNFTCollectionsOperation = {
  method: "GET",
  name: "getWalletNFTCollections",
  id: "getWalletNFTCollections",
  groupName: "nft",
  urlPathPattern: "/{address}/nft/collections",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "limit", "cursor", "excludeSpam", "tokenCounts"],
  firstPageIndex: 1,
  getRequestUrlParams: getRequestUrlParams$m,
  serializeRequest: serializeRequest$m,
  deserializeRequest: deserializeRequest$m,
  deserializeResponse: deserializeResponse$m
};
function getRequestUrlParams$m(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    limit: maybe(request.limit, String),
    cursor: request.cursor,
    exclude_spam: request.excludeSpam,
    token_counts: request.tokenCounts
  };
}
function deserializeResponse$m(jsonResponse, request, core) {
  var _a;
  return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function(collection) {
    return EvmNftCollection.create(__assign2(__assign2({}, toCamelCase(collection)), { chain: EvmChainResolver.resolve(request.chain, core), tokenAddress: EvmAddress.create(collection.token_address) }));
  });
}
function serializeRequest$m(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    limit: request.limit,
    cursor: request.cursor,
    address: EvmAddress.create(request.address).checksum,
    excludeSpam: request.excludeSpam,
    tokenCounts: request.tokenCounts
  };
}
function deserializeRequest$m(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    address: EvmAddress.create(jsonRequest.address),
    excludeSpam: jsonRequest.excludeSpam,
    tokenCounts: jsonRequest.tokenCounts
  };
}
var getWalletNFTsOperation = {
  method: "GET",
  name: "getWalletNFTs",
  id: "getWalletNFTs",
  groupName: "nft",
  firstPageIndex: 1,
  urlPathPattern: "/{address}/nft",
  urlPathParamNames: ["address"],
  urlSearchParamNames: [
    "chain",
    "format",
    "limit",
    "tokenAddresses",
    "cursor",
    "normalizeMetadata",
    "mediaItems",
    "excludeSpam"
  ],
  getRequestUrlParams: getRequestUrlParams$l,
  serializeRequest: serializeRequest$l,
  deserializeRequest: deserializeRequest$l,
  deserializeResponse: deserializeResponse$l
};
function getRequestUrlParams$l(request, core) {
  var _a;
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    format: request.format,
    limit: maybe(request.limit, String),
    token_addresses: (_a = request.tokenAddresses) === null || _a === void 0 ? void 0 : _a.map(function(address) {
      return EvmAddress.create(address).lowercase;
    }),
    cursor: request.cursor,
    normalizeMetadata: request.normalizeMetadata,
    media_items: request.mediaItems,
    exclude_spam: request.excludeSpam
  };
}
function deserializeResponse$l(jsonResponse, request, core) {
  var _a;
  return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function(data) {
    var nft = toCamelCase(data);
    var chain = EvmChainResolver.resolve(request.chain, core);
    return EvmNft.create({
      chain,
      contractType: nft.contractType,
      tokenAddress: nft.tokenAddress,
      tokenId: nft.tokenId,
      tokenUri: nft.tokenUri,
      metadata: nft.metadata,
      name: nft.name,
      symbol: nft.symbol,
      amount: nft.amount ? parseInt(nft.amount, 10) : void 0,
      blockNumberMinted: nft.blockNumberMinted,
      blockNumber: nft.blockNumber,
      ownerOf: EvmAddress.create(nft.ownerOf),
      tokenHash: nft.tokenHash,
      lastMetadataSync: dateInputToDate(nft.lastMetadataSync),
      lastTokenUriSync: dateInputToDate(nft.lastTokenUriSync),
      possibleSpam: nft.possibleSpam,
      media: maybe(nft.media, function(media) {
        return EvmNftMedia.create(__assign2({ chain }, toCamelCase(media)));
      })
    });
  });
}
function serializeRequest$l(request, core) {
  var _a;
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    format: request.format,
    limit: request.limit,
    tokenAddresses: (_a = request.tokenAddresses) === null || _a === void 0 ? void 0 : _a.map(function(address) {
      return EvmAddress.create(address).checksum;
    }),
    cursor: request.cursor,
    address: EvmAddress.create(request.address).checksum,
    normalizeMetadata: request.normalizeMetadata,
    mediaItems: request.mediaItems,
    excludeSpam: request.excludeSpam
  };
}
function deserializeRequest$l(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    format: jsonRequest.format,
    limit: jsonRequest.limit,
    tokenAddresses: maybe(jsonRequest.tokenAddresses, function(addresses) {
      return addresses.map(function(address) {
        return EvmAddress.create(address);
      });
    }),
    cursor: jsonRequest.cursor,
    address: EvmAddress.create(jsonRequest.address),
    normalizeMetadata: jsonRequest.normalizeMetadata,
    mediaItems: jsonRequest.mediaItems,
    excludeSpam: jsonRequest.excludeSpam
  };
}
var getWalletNFTTransfersOperation = {
  method: "GET",
  name: "getWalletNFTTransfers",
  id: "getWalletNFTTransfers",
  groupName: "nft",
  urlPathPattern: "/{address}/nft/transfers",
  urlPathParamNames: ["address"],
  urlSearchParamNames: [
    "chain",
    "format",
    "fromBlock",
    "toBlock",
    "limit",
    "cursor",
    "fromDate",
    "toDate",
    "order",
    "contractAddresses"
  ],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$k,
  serializeRequest: serializeRequest$k,
  deserializeRequest: deserializeRequest$k,
  deserializeResponse: deserializeResponse$k
};
function getRequestUrlParams$k(request, core) {
  var _a;
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    format: request.format,
    from_block: maybe(request.fromBlock, String),
    to_block: request.toBlock,
    limit: maybe(request.limit, String),
    cursor: request.cursor,
    from_date: maybe(request.fromDate, function(date) {
      return new Date(date).toISOString();
    }),
    to_date: maybe(request.toDate, function(date) {
      return new Date(date).toISOString();
    }),
    order: request.order,
    contract_addresses: (_a = request.contractAddresses) === null || _a === void 0 ? void 0 : _a.map(function(address) {
      return EvmAddress.create(address).lowercase;
    })
  };
}
function deserializeResponse$k(jsonResponse, request, core) {
  var _a;
  return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function(transfer) {
    return EvmNftTransfer.create(__assign2(__assign2({}, toCamelCase(transfer)), { chain: EvmChainResolver.resolve(request.chain, core), tokenAddress: EvmAddress.create(transfer.token_address), toAddress: EvmAddress.create(transfer.to_address), operator: transfer.operator ? EvmAddress.create(transfer.operator) : null, fromAddress: transfer.from_address ? EvmAddress.create(transfer.from_address) : null, value: transfer.value ? EvmNative.create(transfer.value, "wei") : null, blockTimestamp: new Date(transfer.block_timestamp) }));
  });
}
function serializeRequest$k(request, core) {
  var _a;
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    format: request.format,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    limit: request.limit,
    cursor: request.cursor,
    address: EvmAddress.create(request.address).checksum,
    fromDate: maybe(request.fromDate, function(date) {
      return new Date(date).toISOString();
    }),
    toDate: maybe(request.toDate, function(date) {
      return new Date(date).toISOString();
    }),
    order: request.order,
    contractAddresses: (_a = request.contractAddresses) === null || _a === void 0 ? void 0 : _a.map(function(address) {
      return EvmAddress.create(address).lowercase;
    })
  };
}
function deserializeRequest$k(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    format: jsonRequest.format,
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    address: EvmAddress.create(jsonRequest.address),
    fromDate: jsonRequest.fromDate,
    toDate: jsonRequest.toDate,
    order: jsonRequest.order,
    contractAddresses: jsonRequest.contractAddresses ? jsonRequest.contractAddresses.map(EvmAddress.create) : void 0
  };
}
var reSyncMetadataOperation = {
  method: "GET",
  name: "reSyncMetadata",
  id: "reSyncMetadata",
  groupName: "nft",
  urlPathPattern: "/nft/{address}/{tokenId}/metadata/resync",
  urlPathParamNames: ["address", "tokenId"],
  urlSearchParamNames: ["chain", "flag", "mode"],
  getRequestUrlParams: getRequestUrlParams$j,
  serializeRequest: serializeRequest$j,
  deserializeRequest: deserializeRequest$j,
  deserializeResponse: deserializeResponse$j
};
function getRequestUrlParams$j(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    flag: request.flag,
    mode: request.mode,
    tokenId: request.tokenId
  };
}
function serializeRequest$j(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    flag: request.flag,
    mode: request.mode,
    address: EvmAddress.create(request.address).checksum,
    tokenId: request.tokenId
  };
}
function deserializeRequest$j(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    flag: jsonRequest.flag,
    mode: jsonRequest.mode,
    address: EvmAddress.create(jsonRequest.address),
    tokenId: jsonRequest.tokenId
  };
}
function deserializeResponse$j(jsonResponse) {
  return jsonResponse;
}
var syncNFTContractOperation = {
  method: "PUT",
  name: "syncNFTContract",
  id: "syncNFTContract",
  groupName: "nft",
  urlPathPattern: "/nft/{address}/sync",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain"],
  getRequestUrlParams: getRequestUrlParams$i,
  serializeRequest: serializeRequest$i,
  deserializeRequest: deserializeRequest$i,
  deserializeResponse: deserializeResponse$i
};
function getRequestUrlParams$i(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    address: EvmAddress.create(request.address).lowercase
  };
}
function deserializeResponse$i() {
  return {
    success: true
  };
}
function serializeRequest$i(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    address: EvmAddress.create(request.address).checksum
  };
}
function deserializeRequest$i(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    address: EvmAddress.create(jsonRequest.address)
  };
}
var resolveAddressOperation = {
  method: "GET",
  name: "resolveAddress",
  id: "resolveAddress",
  groupName: "resolve",
  isNullable: true,
  urlPathPattern: "/resolve/{address}/reverse",
  urlPathParamNames: ["address"],
  getRequestUrlParams: getRequestUrlParams$h,
  serializeRequest: serializeRequest$h,
  deserializeRequest: deserializeRequest$h,
  deserializeResponse: deserializeResponse$h
};
function getRequestUrlParams$h(request) {
  return {
    address: maybe(request.address, function(address) {
      return EvmAddress.create(address).checksum;
    })
  };
}
function deserializeResponse$h(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$h(request) {
  return {
    address: maybe(request.address, function(address) {
      return EvmAddress.create(address).checksum;
    })
  };
}
function deserializeRequest$h(jsonRequest) {
  return {
    address: maybe(jsonRequest.address, function(address) {
      return EvmAddress.create(address);
    })
  };
}
var resolveDomainOperation = {
  method: "GET",
  name: "resolveDomain",
  id: "resolveDomain",
  groupName: "resolve",
  isNullable: true,
  urlPathPattern: "/resolve/{domain}",
  urlPathParamNames: ["domain"],
  urlSearchParamNames: ["currency"],
  getRequestUrlParams: getRequestUrlParams$g,
  serializeRequest: serializeRequest$g,
  deserializeRequest: deserializeRequest$g,
  deserializeResponse: deserializeResponse$g
};
function getRequestUrlParams$g(request) {
  return {
    currency: request.currency,
    domain: request.domain
  };
}
function serializeRequest$g(request) {
  return {
    currency: request.currency,
    domain: request.domain
  };
}
function deserializeRequest$g(jsonRequest) {
  return {
    currency: jsonRequest.currency,
    domain: jsonRequest.domain
  };
}
function deserializeResponse$g(jsonResponse) {
  return {
    address: EvmAddress.create(jsonResponse.address)
  };
}
var resolveENSDomainOperation = {
  method: "GET",
  name: "resolveENSDomain",
  id: "resolveENSDomain",
  groupName: "resolve",
  isNullable: true,
  urlPathPattern: "/resolve/ens/{domain}",
  urlPathParamNames: ["domain"],
  getRequestUrlParams: getRequestUrlParams$f,
  serializeRequest: serializeRequest$f,
  deserializeRequest: deserializeRequest$f,
  deserializeResponse: deserializeResponse$f
};
function getRequestUrlParams$f(request) {
  return {
    domain: request.domain
  };
}
function serializeRequest$f(request) {
  return {
    domain: request.domain
  };
}
function deserializeRequest$f(jsonRequest) {
  return {
    domain: jsonRequest.domain
  };
}
function deserializeResponse$f(jsonResponse) {
  return {
    address: EvmAddress.create(jsonResponse.address)
  };
}
var getTokenAllowanceOperation = {
  method: "GET",
  name: "getTokenAllowance",
  id: "getTokenAllowance",
  groupName: "token",
  urlPathPattern: "/erc20/{address}/allowance",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "ownerAddress", "spenderAddress"],
  getRequestUrlParams: getRequestUrlParams$e,
  serializeRequest: serializeRequest$e,
  deserializeRequest: deserializeRequest$e,
  deserializeResponse: deserializeResponse$e
};
function getRequestUrlParams$e(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    owner_address: EvmAddress.create(request.ownerAddress).lowercase,
    spender_address: EvmAddress.create(request.spenderAddress).lowercase,
    address: EvmAddress.create(request.address).lowercase
  };
}
function deserializeResponse$e(jsonResponse) {
  return {
    allowance: BigNumber.create(jsonResponse.allowance)
  };
}
function serializeRequest$e(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    ownerAddress: EvmAddress.create(request.ownerAddress).checksum,
    spenderAddress: EvmAddress.create(request.spenderAddress).checksum,
    address: EvmAddress.create(request.address).checksum
  };
}
function deserializeRequest$e(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    ownerAddress: EvmAddress.create(jsonRequest.ownerAddress),
    spenderAddress: EvmAddress.create(jsonRequest.spenderAddress),
    address: EvmAddress.create(jsonRequest.address)
  };
}
var getTokenMetadataBySymbolOperation = {
  method: "GET",
  name: "getTokenMetadataBySymbol",
  id: "getTokenMetadataBySymbol",
  groupName: "token",
  urlPathPattern: "/erc20/metadata/symbols",
  urlSearchParamNames: ["chain", "symbols"],
  getRequestUrlParams: getRequestUrlParams$d,
  serializeRequest: serializeRequest$d,
  deserializeRequest: deserializeRequest$d,
  deserializeResponse: deserializeResponse$d
};
function getRequestUrlParams$d(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    symbols: request.symbols
  };
}
function deserializeResponse$d(jsonResponse, request, core) {
  return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function(token) {
    return {
      token: Erc20Token.create(__assign2(__assign2({}, toCamelCase(token)), { contractAddress: token.address, chain: EvmChainResolver.resolve(request.chain, core) })),
      blockNumber: token.block_number,
      validated: token.validated
    };
  });
}
function serializeRequest$d(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    symbols: request.symbols
  };
}
function deserializeRequest$d(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    symbols: jsonRequest.symbols
  };
}
var getTokenMetadataOperation = {
  method: "GET",
  name: "getTokenMetadata",
  id: "getTokenMetadata",
  groupName: "token",
  urlPathPattern: "/erc20/metadata",
  urlSearchParamNames: ["chain", "addresses"],
  getRequestUrlParams: getRequestUrlParams$c,
  serializeRequest: serializeRequest$c,
  deserializeRequest: deserializeRequest$c,
  deserializeResponse: deserializeResponse$c
};
function getRequestUrlParams$c(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    addresses: request.addresses.map(function(address) {
      return EvmAddress.create(address).lowercase;
    })
  };
}
function deserializeResponse$c(jsonResponse, request, core) {
  return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function(token) {
    return {
      token: Erc20Token.create(__assign2(__assign2({}, toCamelCase(token)), { contractAddress: token.address, chain: EvmChainResolver.resolve(request.chain, core) })),
      blockNumber: token.block_number,
      validated: token.validated
    };
  });
}
function serializeRequest$c(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    addresses: request.addresses.map(function(address) {
      return EvmAddress.create(address).checksum;
    })
  };
}
function deserializeRequest$c(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    addresses: jsonRequest.addresses.map(function(address) {
      return EvmAddress.create(address);
    })
  };
}
var getTokenPriceOperation = {
  method: "GET",
  name: "getTokenPrice",
  id: "getTokenPrice",
  groupName: "token",
  urlPathPattern: "/erc20/{address}/price",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "exchange", "toBlock", "include"],
  getRequestUrlParams: getRequestUrlParams$b,
  serializeRequest: serializeRequest$b,
  deserializeRequest: deserializeRequest$b,
  deserializeResponse: deserializeResponse$b
};
function getRequestUrlParams$b(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    exchange: request.exchange,
    to_block: maybe(request.toBlock, String),
    address: EvmAddress.create(request.address).lowercase,
    include: request.include
  };
}
function deserializeResponse$b(jsonResponse) {
  var _a, _b, _c;
  return __assign2(__assign2({}, toCamelCase(jsonResponse)), { nativePrice: ((_a = jsonResponse.nativePrice) === null || _a === void 0 ? void 0 : _a.value) ? EvmNative.create((_b = jsonResponse.nativePrice) === null || _b === void 0 ? void 0 : _b.value, (_c = jsonResponse.nativePrice) === null || _c === void 0 ? void 0 : _c.decimals) : null, exchangeAddress: jsonResponse.exchangeAddress ? EvmAddress.create(jsonResponse.exchangeAddress) : null });
}
function serializeRequest$b(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    exchange: request.exchange,
    toBlock: request.toBlock,
    address: EvmAddress.create(request.address).checksum,
    include: request.include
  };
}
function deserializeRequest$b(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    exchange: jsonRequest.exchange,
    toBlock: jsonRequest.toBlock,
    address: EvmAddress.create(jsonRequest.address),
    include: jsonRequest.include
  };
}
var getTokenTransfersOperation = {
  method: "GET",
  name: "getTokenTransfers",
  id: "getTokenTransfers",
  groupName: "token",
  urlPathPattern: "/erc20/{address}/transfers",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "fromBlock", "toBlock", "fromDate", "toDate", "limit", "cursor", "order"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$a,
  serializeRequest: serializeRequest$a,
  deserializeRequest: deserializeRequest$a,
  deserializeResponse: deserializeResponse$a
};
function getRequestUrlParams$a(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    from_block: maybe(request.fromBlock, String),
    to_block: maybe(request.toBlock, String),
    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    limit: maybe(request.limit, String),
    address: EvmAddress.create(request.address).lowercase,
    cursor: request.cursor,
    order: request.order
  };
}
function deserializeResponse$a(jsonResponse, request, core) {
  var _a;
  return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function(transfer) {
    return Erc20Transaction.create(__assign2(__assign2({}, toCamelCase(transfer)), { chain: EvmChainResolver.resolve(request.chain, core), address: EvmAddress.create(transfer.address), toAddress: EvmAddress.create(transfer.to_address), fromAddress: EvmAddress.create(transfer.from_address), value: BigNumber.create(transfer.value), blockTimestamp: new Date(transfer.block_timestamp) }));
  });
}
function serializeRequest$a(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    fromDate: request.fromDate,
    toDate: request.toDate,
    limit: request.limit,
    address: EvmAddress.create(request.address).checksum,
    cursor: request.cursor,
    order: request.order
  };
}
function deserializeRequest$a(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    fromDate: jsonRequest.fromDate,
    toDate: jsonRequest.toDate,
    limit: jsonRequest.limit,
    address: EvmAddress.create(jsonRequest.address),
    cursor: jsonRequest.cursor,
    order: jsonRequest.order
  };
}
var getWalletTokenBalancesOperation = {
  method: "GET",
  name: "getWalletTokenBalances",
  id: "getWalletTokenBalances",
  groupName: "token",
  urlPathPattern: "/{address}/erc20",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "toBlock", "tokenAddresses", "excludeSpam"],
  getRequestUrlParams: getRequestUrlParams$9,
  serializeRequest: serializeRequest$9,
  deserializeRequest: deserializeRequest$9,
  deserializeResponse: deserializeResponse$9
};
function getRequestUrlParams$9(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    to_block: maybe(request.toBlock, String),
    token_addresses: maybe(request.tokenAddresses, function(addresses) {
      return addresses.map(function(address) {
        return EvmAddress.create(address).lowercase;
      });
    }),
    address: EvmAddress.create(request.address).lowercase,
    exclude_spam: request.excludeSpam
  };
}
function deserializeResponse$9(jsonResponse, request, core) {
  return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function(token) {
    return Erc20Value.create(token.balance, {
      decimals: token.decimals,
      token: {
        decimals: token.decimals,
        name: token.name,
        symbol: token.symbol,
        contractAddress: token.token_address,
        logo: token.logo,
        thumbnail: token.thumbnail,
        chain: EvmChainResolver.resolve(request.chain, core),
        possibleSpam: token.possible_spam
      }
    });
  });
}
function serializeRequest$9(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    tokenAddresses: maybe(request.tokenAddresses, function(addresses) {
      return addresses.map(function(address) {
        return EvmAddress.create(address).checksum;
      });
    }),
    address: EvmAddress.create(request.address).checksum,
    toBlock: request.toBlock,
    excludeSpam: request.excludeSpam
  };
}
function deserializeRequest$9(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    tokenAddresses: maybe(jsonRequest.tokenAddresses, function(addresses) {
      return addresses.map(function(address) {
        return EvmAddress.create(address);
      });
    }),
    address: EvmAddress.create(jsonRequest.address),
    toBlock: jsonRequest.toBlock,
    excludeSpam: jsonRequest.excludeSpam
  };
}
var getWalletTokenTransfersOperation = {
  method: "GET",
  name: "getWalletTokenTransfers",
  id: "getWalletTokenTransfers",
  groupName: "token",
  urlPathPattern: "/{address}/erc20/transfers",
  urlPathParamNames: ["address"],
  urlSearchParamNames: [
    "chain",
    "fromBlock",
    "toBlock",
    "fromDate",
    "toDate",
    "limit",
    "cursor",
    "order",
    "contractAddresses"
  ],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$8,
  serializeRequest: serializeRequest$8,
  deserializeRequest: deserializeRequest$8,
  deserializeResponse: deserializeResponse$8
};
function getRequestUrlParams$8(request, core) {
  var _a;
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    from_block: maybe(request.fromBlock, String),
    to_block: maybe(request.toBlock, String),
    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    limit: maybe(request.limit, String),
    cursor: request.cursor,
    order: request.order,
    contract_addresses: (_a = request.contractAddresses) === null || _a === void 0 ? void 0 : _a.map(function(address) {
      return EvmAddress.create(address).lowercase;
    })
  };
}
function deserializeResponse$8(jsonResponse, request, core) {
  var _a;
  return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function(transfer) {
    return Erc20Transaction.create(__assign2(__assign2({}, toCamelCase(transfer)), { chain: EvmChainResolver.resolve(request.chain, core), address: EvmAddress.create(transfer.address), toAddress: EvmAddress.create(transfer.to_address), fromAddress: EvmAddress.create(transfer.from_address), value: BigNumber.create(transfer.value), blockTimestamp: new Date(transfer.block_timestamp) }));
  });
}
function serializeRequest$8(request, core) {
  var _a;
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    address: EvmAddress.create(request.address).checksum,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    fromDate: request.fromDate,
    toDate: request.toDate,
    limit: request.limit,
    cursor: request.cursor,
    order: request.order,
    contractAddresses: (_a = request.contractAddresses) === null || _a === void 0 ? void 0 : _a.map(function(address) {
      return EvmAddress.create(address).lowercase;
    })
  };
}
function deserializeRequest$8(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    address: EvmAddress.create(jsonRequest.address),
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    fromDate: jsonRequest.fromDate,
    toDate: jsonRequest.toDate,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    order: jsonRequest.order,
    contractAddresses: jsonRequest.contractAddresses ? jsonRequest.contractAddresses.map(EvmAddress.create) : void 0
  };
}
var getTransactionOperation = {
  method: "GET",
  name: "getTransaction",
  id: "getTransaction",
  groupName: "transaction",
  isNullable: true,
  urlPathPattern: "/transaction/{transactionHash}",
  urlPathParamNames: ["transactionHash"],
  urlSearchParamNames: ["chain", "include"],
  getRequestUrlParams: getRequestUrlParams$7,
  serializeRequest: serializeRequest$7,
  deserializeRequest: deserializeRequest$7,
  deserializeResponse: deserializeResponse$7
};
function getRequestUrlParams$7(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    transactionHash: request.transactionHash,
    include: request.include
  };
}
function serializeRequest$7(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    transactionHash: request.transactionHash,
    include: request.include
  };
}
function deserializeRequest$7(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    transactionHash: jsonRequest.transactionHash,
    include: jsonRequest.include
  };
}
function deserializeResponse$7(jsonResponse, request, core) {
  var _a, _b;
  var chain = EvmChainResolver.resolve(request.chain, core);
  return EvmTransaction.create({
    from: jsonResponse.from_address,
    to: jsonResponse.to_address,
    value: jsonResponse.value,
    gasPrice: jsonResponse.gas_price,
    gasUsed: jsonResponse.receipt_gas_used,
    data: jsonResponse.input,
    nonce: jsonResponse.nonce,
    blockHash: jsonResponse.block_hash,
    blockNumber: jsonResponse.block_number,
    blockTimestamp: jsonResponse.block_timestamp,
    index: jsonResponse.transaction_index,
    chain,
    hash: jsonResponse.hash,
    gas: jsonResponse.gas,
    cumulativeGasUsed: jsonResponse.receipt_cumulative_gas_used,
    contractAddress: jsonResponse.receipt_contract_address,
    logs: ((_a = jsonResponse.logs) !== null && _a !== void 0 ? _a : []).map(function(log) {
      return EvmTransactionLog.create({
        address: log.address,
        blockHash: log.block_hash,
        blockNumber: +log.block_number,
        data: log.data,
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        topics: [log.topic0, log.topic1, log.topic2, log.topic3],
        transactionHash: log.transaction_hash,
        blockTimestamp: log.block_timestamp,
        logIndex: +log.log_index,
        transactionIndex: +log.transaction_index,
        chain
      });
    }),
    internalTransactions: ((_b = jsonResponse.internal_transactions) !== null && _b !== void 0 ? _b : []).map(function(jsonInternalTransaction) {
      var internalTransaction = toCamelCase(jsonInternalTransaction);
      return EvmInternalTransaction.create(__assign2({ chain }, internalTransaction));
    }),
    receiptRoot: jsonResponse.receipt_root,
    receiptStatus: jsonResponse.receipt_status
  });
}
var getTransactionVerboseOperation = {
  method: "GET",
  name: "getTransactionVerbose",
  id: "getTransactionVerbose",
  groupName: "transaction",
  isNullable: true,
  urlPathPattern: "/transaction/{transactionHash}/verbose",
  urlPathParamNames: ["transactionHash"],
  urlSearchParamNames: ["chain", "include"],
  getRequestUrlParams: getRequestUrlParams$6,
  serializeRequest: serializeRequest$6,
  deserializeRequest: deserializeRequest$6,
  deserializeResponse: deserializeResponse$6
};
function getRequestUrlParams$6(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    transactionHash: request.transactionHash,
    include: request.include
  };
}
function serializeRequest$6(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    transactionHash: request.transactionHash,
    include: request.include
  };
}
function deserializeRequest$6(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    transactionHash: jsonRequest.transactionHash,
    include: jsonRequest.include
  };
}
function deserializeResponse$6(jsonResponse, request, core) {
  var _a;
  return EvmTransactionVerbose.create({
    from: jsonResponse.from_address,
    to: jsonResponse.to_address,
    value: jsonResponse.value,
    gasPrice: jsonResponse.gas_price,
    gasUsed: jsonResponse.receipt_gas_used,
    data: jsonResponse.input,
    nonce: jsonResponse.nonce,
    blockHash: jsonResponse.block_hash,
    blockNumber: jsonResponse.block_number,
    blockTimestamp: jsonResponse.block_timestamp,
    index: jsonResponse.transaction_index,
    chain: EvmChainResolver.resolve(request.chain, core),
    hash: jsonResponse.hash,
    gas: jsonResponse.gas,
    cumulativeGasUsed: jsonResponse.receipt_cumulative_gas_used,
    contractAddress: jsonResponse.receipt_contract_address,
    logs: ((_a = jsonResponse.logs) !== null && _a !== void 0 ? _a : []).map(function(log) {
      return EvmTransactionLogDecoded.create({
        address: log.address,
        blockHash: log.block_hash,
        blockNumber: +log.block_number,
        data: log.data,
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        topics: [log.topic0, log.topic1, log.topic2, log.topic3],
        transactionHash: log.transaction_hash,
        blockTimestamp: log.block_timestamp,
        logIndex: +log.log_index,
        transactionIndex: +log.transaction_index,
        chain: EvmChainResolver.resolve(request.chain, core),
        decodedEvent: log.decoded_event
      });
    }),
    decodedCall: jsonResponse.decoded_call,
    receiptRoot: jsonResponse.receipt_root,
    receiptStatus: jsonResponse.receipt_status
  });
}
var getWalletTransactionsOperation = {
  method: "GET",
  name: "getWalletTransactions",
  id: "getWalletTransactions",
  groupName: "transaction",
  urlPathPattern: "/{address}",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "fromBlock", "toBlock", "fromDate", "toDate", "cursor", "limit", "include", "order"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$5,
  serializeRequest: serializeRequest$5,
  deserializeRequest: deserializeRequest$5,
  deserializeResponse: deserializeResponse$5
};
function getRequestUrlParams$5(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    from_block: maybe(request.fromBlock, String),
    to_block: maybe(request.toBlock, String),
    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    cursor: request.cursor,
    limit: maybe(request.limit, String),
    address: EvmAddress.create(request.address).lowercase,
    include: request.include,
    order: request.order
  };
}
function serializeRequest$5(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    fromDate: request.fromDate,
    toDate: request.toDate,
    cursor: request.cursor,
    limit: request.limit,
    address: EvmAddress.create(request.address).checksum,
    include: request.include,
    order: request.order
  };
}
function deserializeRequest$5(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    fromDate: jsonRequest.fromDate,
    toDate: jsonRequest.toDate,
    cursor: jsonRequest.cursor,
    limit: jsonRequest.limit,
    address: EvmAddress.create(jsonRequest.address),
    include: jsonRequest.include,
    order: jsonRequest.order
  };
}
function deserializeResponse$5(jsonResponse, request, core) {
  var _a;
  return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function(transfer) {
    var _a2;
    var chain = EvmChainResolver.resolve(request.chain, core);
    return EvmTransaction.create({
      cumulativeGasUsed: transfer.receipt_cumulative_gas_used,
      gasPrice: transfer.gas_price,
      gasUsed: transfer.receipt_gas_used,
      index: +transfer.transaction_index,
      contractAddress: transfer.receipt_contract_address,
      receiptRoot: transfer.receipt_root,
      receiptStatus: +transfer.receipt_status,
      chain: EvmChainResolver.resolve(request.chain, core),
      data: transfer.input,
      from: transfer.from_address,
      hash: transfer.hash,
      nonce: transfer.nonce,
      value: transfer.value,
      blockHash: transfer.block_hash,
      blockNumber: +transfer.block_number,
      blockTimestamp: new Date(transfer.block_timestamp),
      gas: transfer.gas ? BigNumber.create(transfer.gas) : null,
      to: transfer.to_address ? transfer.to_address : null,
      internalTransactions: ((_a2 = transfer.internal_transactions) !== null && _a2 !== void 0 ? _a2 : []).map(function(jsonInternalTransaction) {
        var internalTransaction = toCamelCase(jsonInternalTransaction);
        return EvmInternalTransaction.create(__assign2({ chain }, internalTransaction));
      })
    });
  });
}
var getWalletTransactionsVerboseOperation = {
  method: "GET",
  name: "getWalletTransactionsVerbose",
  id: "getWalletTransactionsVerbose",
  groupName: "transaction",
  urlPathPattern: "/{address}/verbose",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "fromBlock", "toBlock", "fromDate", "toDate", "cursor", "limit", "include", "order"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$4,
  serializeRequest: serializeRequest$4,
  deserializeRequest: deserializeRequest$4,
  deserializeResponse: deserializeResponse$4
};
function getRequestUrlParams$4(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    from_block: maybe(request.fromBlock, String),
    to_block: maybe(request.toBlock, String),
    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    cursor: request.cursor,
    limit: maybe(request.limit, String),
    address: EvmAddress.create(request.address).lowercase,
    include: request.include,
    order: request.order
  };
}
function serializeRequest$4(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    fromDate: request.fromDate,
    toDate: request.toDate,
    cursor: request.cursor,
    limit: request.limit,
    address: EvmAddress.create(request.address).checksum,
    include: request.include,
    order: request.order
  };
}
function deserializeRequest$4(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    fromDate: jsonRequest.fromDate,
    toDate: jsonRequest.toDate,
    cursor: jsonRequest.cursor,
    limit: jsonRequest.limit,
    address: EvmAddress.create(jsonRequest.address),
    include: jsonRequest.include,
    order: jsonRequest.order
  };
}
function deserializeResponse$4(jsonResponse, request, core) {
  var _a;
  return ((_a = jsonResponse.result) !== null && _a !== void 0 ? _a : []).map(function(transfer) {
    var _a2;
    return EvmTransaction.create({
      cumulativeGasUsed: transfer.receipt_cumulative_gas_used,
      gasPrice: transfer.gas_price,
      gasUsed: transfer.receipt_gas_used,
      index: +transfer.transaction_index,
      contractAddress: transfer.receipt_contract_address,
      receiptRoot: transfer.receipt_root,
      receiptStatus: +transfer.receipt_status,
      chain: EvmChainResolver.resolve(request.chain, core),
      data: transfer.input,
      from: EvmAddress.create(transfer.from_address),
      hash: transfer.hash,
      nonce: transfer.nonce,
      value: transfer.value,
      blockHash: transfer.block_hash,
      blockNumber: +transfer.block_number,
      blockTimestamp: new Date(transfer.block_timestamp),
      gas: BigNumber.create(transfer.gas),
      to: EvmAddress.create(transfer.to_address),
      logs: ((_a2 = transfer.logs) !== null && _a2 !== void 0 ? _a2 : []).map(function(log) {
        return EvmTransactionLog.create({
          logIndex: +log.log_index,
          transactionHash: log.transaction_hash,
          transactionIndex: +log.transaction_index,
          address: log.address,
          data: log.data,
          topics: [log.topic0, log.topic1, log.topic2, log.topic3],
          blockHash: log.block_hash,
          blockNumber: +log.block_number,
          blockTimestamp: transfer.block_timestamp,
          chain: EvmChainResolver.resolve(request.chain, core)
        });
      })
    });
  });
}
var getInternalTransactionsOperation = {
  method: "GET",
  name: "getInternalTransactions",
  id: "getInternalTransactions",
  groupName: "transaction",
  urlPathPattern: "/transaction/{transactionHash}/internal-transactions",
  urlPathParamNames: ["transactionHash"],
  urlSearchParamNames: ["chain"],
  getRequestUrlParams: getRequestUrlParams$3,
  serializeRequest: serializeRequest$3,
  deserializeRequest: deserializeRequest$3,
  deserializeResponse: deserializeResponse$3
};
function getRequestUrlParams$3(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    transactionHash: request.transactionHash
  };
}
function serializeRequest$3(request, core) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    transactionHash: request.transactionHash
  };
}
function deserializeRequest$3(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    transactionHash: jsonRequest.transactionHash
  };
}
function deserializeResponse$3(jsonResponse, request, core) {
  return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function(transaction) {
    var chain = EvmChainResolver.resolve(request.chain, core);
    return EvmInternalTransaction.create({
      chain,
      blockHash: transaction.block_hash,
      blockNumber: transaction.block_number,
      from: transaction.from,
      gas: transaction.gas,
      gasUsed: transaction.gas_used,
      input: transaction.input,
      output: transaction.output,
      to: transaction.to,
      transactionHash: transaction.transaction_hash,
      type: transaction.type,
      value: transaction.value
    });
  });
}
var runContractFunctionOperation = {
  method: "POST",
  name: "runContractFunction",
  id: "runContractFunction",
  groupName: "utils",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "functionName"],
  urlPathPattern: "/{address}/function",
  bodyType: "properties",
  bodyParamNames: ["abi", "params"],
  getRequestUrlParams: getRequestUrlParams$2,
  getRequestBody,
  deserializeResponse: deserializeResponse$2,
  serializeRequest: serializeRequest$2,
  deserializeRequest: deserializeRequest$2
};
function getRequestUrlParams$2(request, core) {
  return {
    address: EvmAddress.create(request.address).lowercase,
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    function_name: request.functionName
  };
}
function getRequestBody(request) {
  return {
    abi: request.abi,
    params: request.params
  };
}
function deserializeResponse$2(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$2(request, core) {
  return {
    address: EvmAddress.create(request.address).checksum,
    chain: EvmChainResolver.resolve(request.chain, core).apiHex,
    functionName: request.functionName,
    abi: request.abi,
    params: request.params
  };
}
function deserializeRequest$2(jsonRequest) {
  return {
    address: EvmAddress.create(jsonRequest.address),
    chain: EvmChain.create(jsonRequest.chain),
    functionName: jsonRequest.functionName,
    abi: jsonRequest.abi,
    params: jsonRequest.params
  };
}
var endpointWeightsOperation = {
  method: "GET",
  name: "endpointWeights",
  id: "endpointWeights",
  groupName: "utils",
  urlPathPattern: "/info/endpointWeights",
  getRequestUrlParams: getRequestUrlParams$1,
  deserializeRequest: deserializeRequest$1,
  serializeRequest: serializeRequest$1,
  deserializeResponse: deserializeResponse$1
};
function getRequestUrlParams$1() {
  return {};
}
function serializeRequest$1() {
  return void 0;
}
function deserializeRequest$1() {
  return {};
}
function deserializeResponse$1(jsonResponse) {
  return jsonResponse;
}
var web3ApiVersionOperation = {
  method: "GET",
  name: "web3ApiVersion",
  id: "web3ApiVersion",
  groupName: "utils",
  urlPathPattern: "/web3/version",
  deserializeRequest,
  serializeRequest,
  getRequestUrlParams,
  deserializeResponse
};
function getRequestUrlParams() {
  return {};
}
function serializeRequest() {
  return void 0;
}
function deserializeRequest() {
  return {};
}
function deserializeResponse(jsonResponse) {
  return jsonResponse;
}
var operationsV2 = [
  getBlockOperation,
  getContractEventsOperation,
  getContractLogsOperation,
  getContractNFTsOperation,
  getDateToBlockOperation,
  getInternalTransactionsOperation,
  getMultipleNFTsOperation,
  getNativeBalanceOperation,
  getNativeBalancesForAddressesOperation,
  getNFTContractMetadataOperation,
  getNFTContractTransfersOperation,
  getNFTLowestPriceOperation,
  getNFTMetadataOperation,
  getNFTOwnersOperation,
  getNFTTokenIdOwnersOperation,
  getNFTTransfersByBlockOperation,
  getNFTTransfersFromToBlockOperation,
  getNFTTransfersOperation,
  getPairAddressOperation,
  getPairReservesOperation,
  getTokenAllowanceOperation,
  getTokenMetadataBySymbolOperation,
  getTokenMetadataOperation,
  getTokenPriceOperation,
  getTokenTransfersOperation,
  getTransactionOperation,
  getTransactionVerboseOperation,
  getWalletNFTCollectionsOperation,
  getWalletNFTsOperation,
  getWalletNFTTransfersOperation,
  getWalletTokenBalancesOperation,
  getWalletTokenTransfersOperation,
  getWalletTransactionsOperation,
  getWalletTransactionsVerboseOperation,
  resolveAddressOperation,
  resolveDomainOperation,
  resolveENSDomainOperation,
  reSyncMetadataOperation,
  runContractFunctionOperation,
  syncNFTContractOperation,
  uploadFolderOperation
];
var operationsV2All = __spreadArray2(__spreadArray2([], operationsV2, true), [
  endpointWeightsOperation,
  web3ApiVersionOperation,
  getNFTTradesOperation
], false);

export {
  CoreErrorCode,
  ApiErrorCode,
  AuthErrorCode,
  StreamErrorCode,
  MoralisError,
  CoreError,
  MoralisApiError,
  MoralisAuthError,
  MoralisStreamError,
  isMoralisError,
  CoreConfig,
  BigNumber,
  Core,
  CoreProvider,
  Module,
  ApiModule,
  RequestController,
  OperationRequestValidator,
  NextPaginatedRequestResolver,
  PaginationReader,
  ResponseAdapter,
  PaginatedResponseAdapter,
  toCamelCase,
  maybe,
  EvmChainList,
  EvmGetNFTTradesMarketplaceEnum,
  EvmGetMultipleTokenPricesIncludeEnum,
  EvmResolveAddressToDomainCurrencyEnum,
  EvmContractsReviewItemReportTypeEnum,
  EvmContractsReviewItemContractTypeEnum,
  EvmAddress,
  EvmChainParser,
  EvmChain,
  Erc20Token,
  Erc20Approval,
  Erc20Burn,
  Erc20Mint,
  Erc20Transaction,
  Erc20Value,
  EvmNative,
  EvmTransactionLog,
  EvmSignature,
  EvmInternalTransaction,
  EvmTransaction,
  EvmSimpleBlock,
  EvmBlock,
  EvmBlockDate,
  EvmEvent,
  EvmNftMedia,
  EvmNft,
  EvmNftCollection,
  EvmNftMetadata,
  EvmNftTransfer,
  EvmTransactionLogDecoded,
  EvmTransactionVerbose,
  EvmTrade,
  EvmTradeCollection,
  EvmNativeErc20Price,
  EvmErc20Price,
  EvmTokenPriceItem,
  EvmGetMultipleTokenPricesDto,
  EvmErc20TokenBalanceWithPrice,
  EvmErc20TokenBalanceWithPriceResult,
  EvmChainNetWorth,
  EvmNetWorthResult,
  EvmWeb3version,
  EvmEndpointWeights,
  EvmUnstoppableDomain,
  EvmErc20Metadata,
  EvmGetPairPrice,
  EvmMarketDataERC20TokenItem,
  EvmMarketDataERC20TokensByPriceMovers,
  EvmMarketDataTopNFTCollectionByMarketCapItem,
  EvmMarketDataHottestNFTCollectionByTradingVolumeItem,
  EvmMarketDataTopCryptoCurrenciesByMarketCapItem,
  EvmReviewContracts,
  EvmContractsReviewItem,
  EvmContractsReviewDto,
  EvmTransactionTimestamp,
  EvmWalletActiveChain,
  EvmWalletActiveChains,
  EvmWalletStatTransactions,
  EvmWalletStatNftTransfers,
  EvmWalletStatTokenTransfers,
  EvmWalletStat,
  EvmNftCollectionStatOwners,
  EvmNftCollectionStatTransfers,
  EvmNftCollectionStat,
  EvmNftTokenStatOwners,
  EvmNftTokenStatTransfers,
  EvmNftTokenStat,
  EvmErc20TokenStatTransfers,
  EvmErc20TokenStat,
  EvmBlockTokenStatTransactions,
  EvmBlockTokenStatNftTransfers,
  EvmBlockTokenStat,
  GetNFTTradesOperation,
  GetMultipleTokenPricesOperation,
  GetWalletTokenBalancesPriceOperation,
  GetWalletNetWorthOperation,
  Web3ApiVersionOperation,
  EndpointWeightsOperation,
  ResolveAddressToDomainOperation,
  GetPairPriceOperation,
  GetTopERC20TokensByMarketCapOperation,
  GetTopERC20TokensByPriceMoversOperation,
  GetTopNFTCollectionsByMarketCapOperation,
  GetHottestNFTCollectionsByTradingVolumeOperation,
  GetTopCryptoCurrenciesByMarketCapOperation,
  GetTopCryptoCurrenciesByTradingVolumeOperation,
  ReviewContractsOperation,
  GetWalletActiveChainsOperation,
  GetWalletStatsOperation,
  GetNFTCollectionStatsOperation,
  GetNFTTokenStatsOperation,
  GetTokenStatsOperation,
  GetBlockStatsOperation,
  operations,
  CommonEvmUtilsConfig,
  CommonEvmUtilsConfigSetup,
  CommonEvmUtils,
  EvmChainResolver,
  getNativeBalanceOperation,
  getNativeBalancesForAddressesOperation,
  getBlockOperation,
  getDateToBlockOperation,
  getPairAddressOperation,
  getPairReservesOperation,
  getContractEventsOperation,
  getContractLogsOperation,
  uploadFolderOperation,
  getContractNFTsOperation,
  getMultipleNFTsOperation,
  getNFTContractMetadataOperation,
  getNFTContractTransfersOperation,
  getNFTLowestPriceOperation,
  getNFTMetadataOperation,
  getNFTOwnersOperation,
  getNFTTokenIdOwnersOperation,
  getNFTTradesOperation,
  getNFTTransfersByBlockOperation,
  getNFTTransfersFromToBlockOperation,
  getNFTTransfersOperation,
  getWalletNFTCollectionsOperation,
  getWalletNFTsOperation,
  getWalletNFTTransfersOperation,
  reSyncMetadataOperation,
  syncNFTContractOperation,
  resolveAddressOperation,
  resolveDomainOperation,
  resolveENSDomainOperation,
  getTokenAllowanceOperation,
  getTokenMetadataBySymbolOperation,
  getTokenMetadataOperation,
  getTokenPriceOperation,
  getTokenTransfersOperation,
  getWalletTokenBalancesOperation,
  getWalletTokenTransfersOperation,
  getTransactionOperation,
  getTransactionVerboseOperation,
  getWalletTransactionsOperation,
  getWalletTransactionsVerboseOperation,
  getInternalTransactionsOperation,
  runContractFunctionOperation,
  endpointWeightsOperation,
  web3ApiVersionOperation,
  operationsV2,
  operationsV2All
};
//# sourceMappingURL=chunk-DVGFL5ZS.js.map
