import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'

globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
globalThis.global = globalThis.global || __global_polyfill
globalThis.process = globalThis.process || __process_polyfill

import "./chunk-LJGNMW5F.js";
import {
  Connector
} from "./chunk-JLQBCRLE.js";
import {
  normalizeChainId
} from "./chunk-QDOERRBY.js";
import {
  _defineProperty
} from "./chunk-N3O7XCWY.js";
import "./chunk-LY73PGCB.js";
import "./chunk-PU254C4Y.js";
import "./chunk-55P3PFIM.js";
import "./chunk-MJZRPKOI.js";
import "./chunk-VHUPT7IN.js";
import "./chunk-YKJFKAIV.js";
import "./chunk-AZX7MSUY.js";
import "./chunk-SCENXF2B.js";
import "./chunk-UESH64UC.js";
import "./chunk-4HL2YNCE.js";
import "./chunk-XG72QLZI.js";
import "./chunk-SFAMXRBE.js";
import "./chunk-I3WBHBCX.js";
import "./chunk-V4A62PNA.js";
import "./chunk-7DTRFKSL.js";
import "./chunk-TTRTNUT7.js";
import "./chunk-7HXMWYHO.js";
import "./chunk-JJB5YSFE.js";
import "./chunk-GNCROJXY.js";
import "./chunk-GWLWJ3WS.js";
import "./chunk-QNI7IUMT.js";
import "./chunk-SUNQK6BR.js";
import "./chunk-R6GZ7CQV.js";
import "./chunk-T2F3HN4V.js";
import {
  getChainProvider
} from "./chunk-VXFW7KOM.js";
import "./chunk-JDBCIGDO.js";
import "./chunk-DNIYFLEQ.js";
import "./chunk-GS5C4A5O.js";
import "./chunk-JO5JQBLK.js";
import "./chunk-CQNLDQCU.js";
import "./chunk-JBU465OI.js";
import "./chunk-VKHIDRSF.js";
import "./chunk-PI5QRFQD.js";
import "./chunk-IYAA7GMH.js";
import "./chunk-COE7PBKV.js";
import "./chunk-AL5RFYTD.js";
import "./chunk-2ZOBJDOP.js";
import "./chunk-TJ3KQKL7.js";
import "./chunk-G4VQPFLE.js";
import "./chunk-FM6O4SHN.js";
import "./chunk-CW55LPKJ.js";
import "./chunk-JMTLALVE.js";
import "./chunk-26QOIHDW.js";
import "./chunk-4H2UHIB4.js";
import "./chunk-A2JC7MJV.js";
import "./chunk-ZE5LSKC5.js";
import "./chunk-VTZKSTEZ.js";
import "./chunk-GQ4K6W75.js";
import "./chunk-A7M7FJO2.js";
import {
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-TXE7KCVI.js";
import {
  __toESM
} from "./chunk-FL3IE4PG.js";

// node_modules/@thirdweb-dev/wallets/evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.browser.esm.js
var import_dist = __toESM(require_dist());
var import_dist2 = __toESM(require_dist2());
var import_dist3 = __toESM(require_dist3());
var SignerConnector = class extends Connector {
  constructor(options) {
    super();
    _defineProperty(this, "onChainChanged", (chainId) => {
      const id = normalizeChainId(chainId);
      const unsupported = !this.options.chains.find((c) => c.chainId === id);
      this.emit("change", {
        chain: {
          id,
          unsupported
        }
      });
    });
    this.options = options;
  }
  async connect(args) {
    if (args.chainId) {
      this.switchChain(args.chainId);
    }
    const signer = await this.getSigner();
    const address = await signer.getAddress();
    return address;
  }
  async disconnect() {
    this._provider = void 0;
    this._signer = void 0;
  }
  async getAddress() {
    const signer = await this.getSigner();
    if (!signer) {
      throw new Error("No signer found");
    }
    return await signer.getAddress();
  }
  async isConnected() {
    try {
      const addr = await this.getAddress();
      return !!addr;
    } catch {
      return false;
    }
  }
  async getProvider() {
    if (!this._provider) {
      this._provider = getChainProvider(this.options.chain, {
        clientId: this.options.clientId,
        secretKey: this.options.secretKey
      });
    }
    return this._provider;
  }
  async getSigner() {
    if (!this._signer) {
      const provider = await this.getProvider();
      this._signer = getUpdatedSigner(this.options.signer, provider);
    }
    return this._signer;
  }
  async switchChain(chainId) {
    const chain = this.options.chains.find((c) => c.chainId === chainId);
    if (!chain) {
      throw new Error(`Chain not found for chainId ${chainId}, please add it to the chains property when creating this wallet`);
    }
    this._provider = getChainProvider(chain, {
      clientId: this.options.clientId,
      secretKey: this.options.secretKey
    });
    this._signer = getUpdatedSigner(this.options.signer, this._provider);
    this.onChainChanged(chainId);
  }
  async setupListeners() {
  }
  updateChains(chains) {
    this.options.chains = chains;
  }
};
function getUpdatedSigner(signer, provider) {
  if (provider) {
    return signer.connect(provider);
  }
  return signer;
}
export {
  SignerConnector
};
//# sourceMappingURL=thirdweb-dev-wallets-evm-connectors-signer.browser.esm-CXYBTJRZ.js.map
