import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SharedMetadataBatchStorage, SharedMetadataBatchStorageInterface } from "../SharedMetadataBatchStorage.js";
type SharedMetadataBatchStorageConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class SharedMetadataBatchStorage__factory extends ContractFactory {
    constructor(...args: SharedMetadataBatchStorageConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<SharedMetadataBatchStorage>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): TransactionRequest;
    attach(address: string): SharedMetadataBatchStorage;
    connect(signer: Signer): SharedMetadataBatchStorage__factory;
    static readonly bytecode = "0x60a6610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063a361dc9a146038575b600080fd5b605e7ff85ae2b98503142dac20c6561e88360cff7f1cb5634b6ad090b7f724e2f67a0081565b60405190815260200160405180910390f3fea26469706673582212206318d3c43605680e9988d11bc40a841ec7db95eb2b043be58b4bc9e7e11b85b264736f6c63430008170033";
    static readonly abi: {
        type: string;
        name: string;
        inputs: never[];
        outputs: {
            name: string;
            type: string;
            internalType: string;
        }[];
        stateMutability: string;
    }[];
    static createInterface(): SharedMetadataBatchStorageInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): SharedMetadataBatchStorage;
}
export {};
//# sourceMappingURL=SharedMetadataBatchStorage__factory.d.ts.map